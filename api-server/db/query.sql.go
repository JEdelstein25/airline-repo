// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createAirline = `-- name: CreateAirline :one
INSERT INTO airlines (
  iata_code,
  name
) VALUES (
  ?, ?
)
RETURNING id, iata_code, name
`

type CreateAirlineParams struct {
	IataCode string
	Name     string
}

func (q *Queries) CreateAirline(ctx context.Context, arg CreateAirlineParams) (Airline, error) {
	row := q.db.QueryRowContext(ctx, createAirline, arg.IataCode, arg.Name)
	var i Airline
	err := row.Scan(&i.ID, &i.IataCode, &i.Name)
	return i, err
}

const createAirport = `-- name: CreateAirport :one
INSERT INTO airports (
  iata_code,
  oadb_id
) VALUES (
  ?, ?
)
RETURNING id, iata_code, oadb_id
`

type CreateAirportParams struct {
	IataCode string
	OadbID   sql.NullInt64
}

func (q *Queries) CreateAirport(ctx context.Context, arg CreateAirportParams) (Airport, error) {
	row := q.db.QueryRowContext(ctx, createAirport, arg.IataCode, arg.OadbID)
	var i Airport
	err := row.Scan(&i.ID, &i.IataCode, &i.OadbID)
	return i, err
}

const createFlightSchedule = `-- name: CreateFlightSchedule :one
INSERT INTO flight_schedules (
  airline_id, number, origin_airport_id, destination_airport_id, published
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id
`

type CreateFlightScheduleParams struct {
	AirlineID            int64
	Number               string
	OriginAirportID      int64
	DestinationAirportID int64
	Published            bool
}

func (q *Queries) CreateFlightSchedule(ctx context.Context, arg CreateFlightScheduleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createFlightSchedule,
		arg.AirlineID,
		arg.Number,
		arg.OriginAirportID,
		arg.DestinationAirportID,
		arg.Published,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteAirline = `-- name: DeleteAirline :exec
DELETE FROM airlines
WHERE id=?
`

func (q *Queries) DeleteAirline(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAirline, id)
	return err
}

const deleteAirport = `-- name: DeleteAirport :exec
DELETE FROM airports
WHERE id=?
`

func (q *Queries) DeleteAirport(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAirport, id)
	return err
}

const deleteAllAirlines = `-- name: DeleteAllAirlines :exec
DELETE FROM airlines
`

func (q *Queries) DeleteAllAirlines(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllAirlines)
	return err
}

const deleteAllAirports = `-- name: DeleteAllAirports :exec
DELETE FROM airports
`

func (q *Queries) DeleteAllAirports(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllAirports)
	return err
}

const deleteAllFlightSchedules = `-- name: DeleteAllFlightSchedules :exec
DELETE FROM flight_schedules
`

func (q *Queries) DeleteAllFlightSchedules(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllFlightSchedules)
	return err
}

const deleteFlightSchedule = `-- name: DeleteFlightSchedule :exec
DELETE FROM flight_schedules
WHERE id=?
`

func (q *Queries) DeleteFlightSchedule(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFlightSchedule, id)
	return err
}

const getAirline = `-- name: GetAirline :one

SELECT id, iata_code, name FROM airlines
WHERE id=? LIMIT 1
`

// ----------------------------------------------------------------------------- airlines
func (q *Queries) GetAirline(ctx context.Context, id int64) (Airline, error) {
	row := q.db.QueryRowContext(ctx, getAirline, id)
	var i Airline
	err := row.Scan(&i.ID, &i.IataCode, &i.Name)
	return i, err
}

const getAirlineByIATACode = `-- name: GetAirlineByIATACode :one
SELECT id, iata_code, name FROM airlines
WHERE iata_code=? LIMIT 1
`

func (q *Queries) GetAirlineByIATACode(ctx context.Context, iataCode string) (Airline, error) {
	row := q.db.QueryRowContext(ctx, getAirlineByIATACode, iataCode)
	var i Airline
	err := row.Scan(&i.ID, &i.IataCode, &i.Name)
	return i, err
}

const getAirport = `-- name: GetAirport :one

SELECT id, iata_code, oadb_id FROM airports
WHERE id=? LIMIT 1
`

// ----------------------------------------------------------------------------- airports
func (q *Queries) GetAirport(ctx context.Context, id int64) (Airport, error) {
	row := q.db.QueryRowContext(ctx, getAirport, id)
	var i Airport
	err := row.Scan(&i.ID, &i.IataCode, &i.OadbID)
	return i, err
}

const getAirportByIATACode = `-- name: GetAirportByIATACode :one
SELECT id, iata_code, oadb_id FROM airports
WHERE iata_code=? LIMIT 1
`

func (q *Queries) GetAirportByIATACode(ctx context.Context, iataCode string) (Airport, error) {
	row := q.db.QueryRowContext(ctx, getAirportByIATACode, iataCode)
	var i Airport
	err := row.Scan(&i.ID, &i.IataCode, &i.OadbID)
	return i, err
}

const getFlightSchedule = `-- name: GetFlightSchedule :one

SELECT id, airline_id, number, origin_airport_id, destination_airport_id, published, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, airline_iata_code, airline_name FROM flight_schedules_view
WHERE id=? LIMIT 1
`

// ----------------------------------------------------------------------------- flight_schedules
func (q *Queries) GetFlightSchedule(ctx context.Context, id int64) (FlightSchedulesView, error) {
	row := q.db.QueryRowContext(ctx, getFlightSchedule, id)
	var i FlightSchedulesView
	err := row.Scan(
		&i.ID,
		&i.AirlineID,
		&i.Number,
		&i.OriginAirportID,
		&i.DestinationAirportID,
		&i.Published,
		&i.OriginAirportIataCode,
		&i.OriginAirportOadbID,
		&i.DestinationAirportIataCode,
		&i.DestinationAirportOadbID,
		&i.AirlineIataCode,
		&i.AirlineName,
	)
	return i, err
}

const getRouteByIATACodes = `-- name: GetRouteByIATACodes :one

SELECT origin_airport_id, destination_airport_id, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, flight_schedules_count FROM routes
WHERE origin_airport_iata_code=?1 AND destination_airport_iata_code=?2
LIMIT 1
`

type GetRouteByIATACodesParams struct {
	OriginAirportIataCode      string
	DestinationAirportIataCode string
}

// ----------------------------------------------------------------------------- routes
func (q *Queries) GetRouteByIATACodes(ctx context.Context, arg GetRouteByIATACodesParams) (Route, error) {
	row := q.db.QueryRowContext(ctx, getRouteByIATACodes, arg.OriginAirportIataCode, arg.DestinationAirportIataCode)
	var i Route
	err := row.Scan(
		&i.OriginAirportID,
		&i.DestinationAirportID,
		&i.OriginAirportIataCode,
		&i.OriginAirportOadbID,
		&i.DestinationAirportIataCode,
		&i.DestinationAirportOadbID,
		&i.FlightSchedulesCount,
	)
	return i, err
}

const listAirlines = `-- name: ListAirlines :many
SELECT id, iata_code, name FROM airlines
ORDER BY id ASC
`

func (q *Queries) ListAirlines(ctx context.Context) ([]Airline, error) {
	rows, err := q.db.QueryContext(ctx, listAirlines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Airline
	for rows.Next() {
		var i Airline
		if err := rows.Scan(&i.ID, &i.IataCode, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAirports = `-- name: ListAirports :many
SELECT id, iata_code, oadb_id FROM airports
ORDER BY id ASC
`

func (q *Queries) ListAirports(ctx context.Context) ([]Airport, error) {
	rows, err := q.db.QueryContext(ctx, listAirports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Airport
	for rows.Next() {
		var i Airport
		if err := rows.Scan(&i.ID, &i.IataCode, &i.OadbID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlightSchedules = `-- name: ListFlightSchedules :many
SELECT id, airline_id, number, origin_airport_id, destination_airport_id, published, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, airline_iata_code, airline_name FROM flight_schedules_view
ORDER BY id ASC
`

func (q *Queries) ListFlightSchedules(ctx context.Context) ([]FlightSchedulesView, error) {
	rows, err := q.db.QueryContext(ctx, listFlightSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlightSchedulesView
	for rows.Next() {
		var i FlightSchedulesView
		if err := rows.Scan(
			&i.ID,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.Published,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
			&i.AirlineIataCode,
			&i.AirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlightSchedulesByAirline = `-- name: ListFlightSchedulesByAirline :many
SELECT id, airline_id, number, origin_airport_id, destination_airport_id, published, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, airline_iata_code, airline_name
FROM flight_schedules_view
WHERE airline_id=?1
ORDER BY id ASC
`

func (q *Queries) ListFlightSchedulesByAirline(ctx context.Context, airline int64) ([]FlightSchedulesView, error) {
	rows, err := q.db.QueryContext(ctx, listFlightSchedulesByAirline, airline)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlightSchedulesView
	for rows.Next() {
		var i FlightSchedulesView
		if err := rows.Scan(
			&i.ID,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.Published,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
			&i.AirlineIataCode,
			&i.AirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlightSchedulesByAirport = `-- name: ListFlightSchedulesByAirport :many
SELECT id, airline_id, number, origin_airport_id, destination_airport_id, published, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, airline_iata_code, airline_name
FROM flight_schedules_view
WHERE origin_airport_id=?1 OR destination_airport_id=?1
ORDER BY id ASC
`

func (q *Queries) ListFlightSchedulesByAirport(ctx context.Context, airport int64) ([]FlightSchedulesView, error) {
	rows, err := q.db.QueryContext(ctx, listFlightSchedulesByAirport, airport)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlightSchedulesView
	for rows.Next() {
		var i FlightSchedulesView
		if err := rows.Scan(
			&i.ID,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.Published,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
			&i.AirlineIataCode,
			&i.AirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlightSchedulesByRoute = `-- name: ListFlightSchedulesByRoute :many
SELECT id, airline_id, number, origin_airport_id, destination_airport_id, published, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, airline_iata_code, airline_name
FROM flight_schedules_view
WHERE origin_airport_id=?1 OR destination_airport_id=?2
ORDER BY id ASC
`

type ListFlightSchedulesByRouteParams struct {
	OriginAirport      int64
	DestinationAirport int64
}

func (q *Queries) ListFlightSchedulesByRoute(ctx context.Context, arg ListFlightSchedulesByRouteParams) ([]FlightSchedulesView, error) {
	rows, err := q.db.QueryContext(ctx, listFlightSchedulesByRoute, arg.OriginAirport, arg.DestinationAirport)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlightSchedulesView
	for rows.Next() {
		var i FlightSchedulesView
		if err := rows.Scan(
			&i.ID,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.Published,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
			&i.AirlineIataCode,
			&i.AirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoutes = `-- name: ListRoutes :many
SELECT origin_airport_id, destination_airport_id, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, flight_schedules_count FROM routes
ORDER BY flight_schedules_count DESC, origin_airport_id ASC, destination_airport_id ASC
`

func (q *Queries) ListRoutes(ctx context.Context) ([]Route, error) {
	rows, err := q.db.QueryContext(ctx, listRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Route
	for rows.Next() {
		var i Route
		if err := rows.Scan(
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
			&i.FlightSchedulesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAirline = `-- name: UpdateAirline :one
UPDATE airlines SET
iata_code = COALESCE(?2, iata_code),
name = COALESCE(?3, name)
WHERE id=?
RETURNING id, iata_code, name
`

type UpdateAirlineParams struct {
	IataCode sql.NullString
	Name     sql.NullString
	ID       int64
}

func (q *Queries) UpdateAirline(ctx context.Context, arg UpdateAirlineParams) (Airline, error) {
	row := q.db.QueryRowContext(ctx, updateAirline, arg.IataCode, arg.Name, arg.ID)
	var i Airline
	err := row.Scan(&i.ID, &i.IataCode, &i.Name)
	return i, err
}

const updateAirport = `-- name: UpdateAirport :one
UPDATE airports SET
iata_code = COALESCE(?2, iata_code)
WHERE id=?
RETURNING id, iata_code, oadb_id
`

type UpdateAirportParams struct {
	IataCode sql.NullString
	ID       int64
}

func (q *Queries) UpdateAirport(ctx context.Context, arg UpdateAirportParams) (Airport, error) {
	row := q.db.QueryRowContext(ctx, updateAirport, arg.IataCode, arg.ID)
	var i Airport
	err := row.Scan(&i.ID, &i.IataCode, &i.OadbID)
	return i, err
}

const updateFlightSchedule = `-- name: UpdateFlightSchedule :exec
UPDATE flight_schedules SET
airline_id = COALESCE(?1, airline_id),
number = COALESCE(?2, number),
origin_airport_id = COALESCE(?3, origin_airport_id),
destination_airport_id = COALESCE(?4, destination_airport_id),
published = COALESCE(?5, published)
WHERE id=?6
RETURNING id
`

type UpdateFlightScheduleParams struct {
	AirlineID            sql.NullInt64
	Number               sql.NullString
	OriginAirportID      sql.NullInt64
	DestinationAirportID sql.NullInt64
	Published            sql.NullBool
	ID                   int64
}

func (q *Queries) UpdateFlightSchedule(ctx context.Context, arg UpdateFlightScheduleParams) error {
	_, err := q.db.ExecContext(ctx, updateFlightSchedule,
		arg.AirlineID,
		arg.Number,
		arg.OriginAirportID,
		arg.DestinationAirportID,
		arg.Published,
		arg.ID,
	)
	return err
}
