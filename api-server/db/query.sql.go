// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const createAirport = `-- name: CreateAirport :one
INSERT INTO airports (
  iata_code
) VALUES (
  ?
)
RETURNING id, iata_code
`

func (q *Queries) CreateAirport(ctx context.Context, iataCode string) (Airport, error) {
	row := q.db.QueryRowContext(ctx, createAirport, iataCode)
	var i Airport
	err := row.Scan(&i.ID, &i.IataCode)
	return i, err
}

const createFlight = `-- name: CreateFlight :one
INSERT INTO flights (
  number, origin_airport, destination_airport, published
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, number, origin_airport, destination_airport, published
`

type CreateFlightParams struct {
	Number             string
	OriginAirport      int64
	DestinationAirport int64
	Published          bool
}

func (q *Queries) CreateFlight(ctx context.Context, arg CreateFlightParams) (Flight, error) {
	row := q.db.QueryRowContext(ctx, createFlight,
		arg.Number,
		arg.OriginAirport,
		arg.DestinationAirport,
		arg.Published,
	)
	var i Flight
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.OriginAirport,
		&i.DestinationAirport,
		&i.Published,
	)
	return i, err
}

const deleteAirport = `-- name: DeleteAirport :exec
DELETE FROM airports
WHERE id=?
`

func (q *Queries) DeleteAirport(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAirport, id)
	return err
}

const deleteAllAirports = `-- name: DeleteAllAirports :exec
DELETE FROM airports
`

func (q *Queries) DeleteAllAirports(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllAirports)
	return err
}

const deleteAllFlights = `-- name: DeleteAllFlights :exec
DELETE FROM flights
`

func (q *Queries) DeleteAllFlights(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllFlights)
	return err
}

const deleteFlight = `-- name: DeleteFlight :exec
DELETE FROM flights
WHERE id=?
`

func (q *Queries) DeleteFlight(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFlight, id)
	return err
}

const getAirport = `-- name: GetAirport :one
SELECT id, iata_code FROM airports
WHERE id=? LIMIT 1
`

func (q *Queries) GetAirport(ctx context.Context, id int64) (Airport, error) {
	row := q.db.QueryRowContext(ctx, getAirport, id)
	var i Airport
	err := row.Scan(&i.ID, &i.IataCode)
	return i, err
}

const getFlight = `-- name: GetFlight :one

SELECT id, number, origin_airport, destination_airport, published FROM flights
WHERE id=? LIMIT 1
`

// -----------------------------------------------------------------------------
func (q *Queries) GetFlight(ctx context.Context, id int64) (Flight, error) {
	row := q.db.QueryRowContext(ctx, getFlight, id)
	var i Flight
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.OriginAirport,
		&i.DestinationAirport,
		&i.Published,
	)
	return i, err
}

const listAirports = `-- name: ListAirports :many
SELECT id, iata_code FROM airports
ORDER BY id ASC
`

func (q *Queries) ListAirports(ctx context.Context) ([]Airport, error) {
	rows, err := q.db.QueryContext(ctx, listAirports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Airport
	for rows.Next() {
		var i Airport
		if err := rows.Scan(&i.ID, &i.IataCode); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlights = `-- name: ListFlights :many
SELECT id, number, origin_airport, destination_airport, published FROM flights
ORDER BY id ASC
`

func (q *Queries) ListFlights(ctx context.Context) ([]Flight, error) {
	rows, err := q.db.QueryContext(ctx, listFlights)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flight
	for rows.Next() {
		var i Flight
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.OriginAirport,
			&i.DestinationAirport,
			&i.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAirport = `-- name: UpdateAirport :exec
UPDATE airports SET
iata_code=?
WHERE id=?
`

type UpdateAirportParams struct {
	IataCode string
	ID       int64
}

func (q *Queries) UpdateAirport(ctx context.Context, arg UpdateAirportParams) error {
	_, err := q.db.ExecContext(ctx, updateAirport, arg.IataCode, arg.ID)
	return err
}

const updateFlight = `-- name: UpdateFlight :exec
UPDATE flights SET
number=?,
origin_airport=?,
destination_airport=?,
published=?
WHERE id=?
`

type UpdateFlightParams struct {
	Number             string
	OriginAirport      int64
	DestinationAirport int64
	Published          bool
	ID                 int64
}

func (q *Queries) UpdateFlight(ctx context.Context, arg UpdateFlightParams) error {
	_, err := q.db.ExecContext(ctx, updateFlight,
		arg.Number,
		arg.OriginAirport,
		arg.DestinationAirport,
		arg.Published,
		arg.ID,
	)
	return err
}
