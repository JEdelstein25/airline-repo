// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const addProductToCategory = `-- name: AddProductToCategory :exec

INSERT INTO product_categories (
  product_id,
  category_id
) VALUES (
  ?, ?
)
`

type AddProductToCategoryParams struct {
	ProductID  int64
	CategoryID int64
}

// -----------------------------------------------------------------------------
func (q *Queries) AddProductToCategory(ctx context.Context, arg AddProductToCategoryParams) error {
	_, err := q.db.ExecContext(ctx, addProductToCategory, arg.ProductID, arg.CategoryID)
	return err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  title
) VALUES (
  ?
)
RETURNING id, title
`

func (q *Queries) CreateCategory(ctx context.Context, title string) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, title)
	var i Category
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  title, starred
) VALUES (
  ?, ?
)
RETURNING id, title, starred
`

type CreateProductParams struct {
	Title   string
	Starred bool
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Title, arg.Starred)
	var i Product
	err := row.Scan(&i.ID, &i.Title, &i.Starred)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id=?
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id=?
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, title FROM categories
WHERE id=? LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getProduct = `-- name: GetProduct :one

SELECT id, title, starred FROM products
WHERE id=? LIMIT 1
`

// -----------------------------------------------------------------------------
func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(&i.ID, &i.Title, &i.Starred)
	return i, err
}

const listCategorys = `-- name: ListCategorys :many
SELECT id, title FROM categories
ORDER BY id ASC
`

func (q *Queries) ListCategorys(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategorys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, title, starred FROM products
ORDER BY id ASC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(&i.ID, &i.Title, &i.Starred); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProductFromCategory = `-- name: RemoveProductFromCategory :exec
DELETE FROM product_categories
WHERE product_id = ? AND category_id = ?
`

type RemoveProductFromCategoryParams struct {
	ProductID  int64
	CategoryID int64
}

func (q *Queries) RemoveProductFromCategory(ctx context.Context, arg RemoveProductFromCategoryParams) error {
	_, err := q.db.ExecContext(ctx, removeProductFromCategory, arg.ProductID, arg.CategoryID)
	return err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categories SET
title=?
WHERE id=?
`

type UpdateCategoryParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory, arg.Title, arg.ID)
	return err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products SET
title=?,
starred=?
WHERE id=?
`

type UpdateProductParams struct {
	Title   string
	Starred bool
	ID      int64
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct, arg.Title, arg.Starred, arg.ID)
	return err
}
