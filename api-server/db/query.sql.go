// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/stellora/airline/api-server/localtime"
	"github.com/stellora/airline/api-server/zonedtime"
)

const addAircraftToFleet = `-- name: AddAircraftToFleet :exec
INSERT INTO fleets_aircraft (
  fleet_id,
  aircraft_id
) VALUES (
  ?, ?
)
`

type AddAircraftToFleetParams struct {
	FleetID    int64
	AircraftID int64
}

func (q *Queries) AddAircraftToFleet(ctx context.Context, arg AddAircraftToFleetParams) error {
	_, err := q.db.ExecContext(ctx, addAircraftToFleet, arg.FleetID, arg.AircraftID)
	return err
}

const addFlightToItinerary = `-- name: AddFlightToItinerary :exec
INSERT INTO itinerary_flights (
  itinerary_id,
  flight_instance_id
) VALUES (
  ?, ?
)
`

type AddFlightToItineraryParams struct {
	ItineraryID      int64
	FlightInstanceID int64
}

func (q *Queries) AddFlightToItinerary(ctx context.Context, arg AddFlightToItineraryParams) error {
	_, err := q.db.ExecContext(ctx, addFlightToItinerary, arg.ItineraryID, arg.FlightInstanceID)
	return err
}

const addPassengerToItinerary = `-- name: AddPassengerToItinerary :exec
INSERT INTO itinerary_passengers (
  itinerary_id,
  passenger_id
) VALUES (
  ?, ?
)
`

type AddPassengerToItineraryParams struct {
	ItineraryID int64
	PassengerID int64
}

func (q *Queries) AddPassengerToItinerary(ctx context.Context, arg AddPassengerToItineraryParams) error {
	_, err := q.db.ExecContext(ctx, addPassengerToItinerary, arg.ItineraryID, arg.PassengerID)
	return err
}

const createAircraft = `-- name: CreateAircraft :one
INSERT INTO aircraft (
  registration,
  aircraft_type,
  airline_id
) VALUES (
  ?, ?, ?
)
RETURNING id, registration, aircraft_type, airline_id
`

type CreateAircraftParams struct {
	Registration string
	AircraftType string
	AirlineID    int64
}

func (q *Queries) CreateAircraft(ctx context.Context, arg CreateAircraftParams) (Aircraft, error) {
	row := q.db.QueryRowContext(ctx, createAircraft, arg.Registration, arg.AircraftType, arg.AirlineID)
	var i Aircraft
	err := row.Scan(
		&i.ID,
		&i.Registration,
		&i.AircraftType,
		&i.AirlineID,
	)
	return i, err
}

const createAirline = `-- name: CreateAirline :one
INSERT INTO airlines (
  iata_code,
  name
) VALUES (
  ?, ?
)
RETURNING id, iata_code, name
`

type CreateAirlineParams struct {
	IataCode string
	Name     string
}

func (q *Queries) CreateAirline(ctx context.Context, arg CreateAirlineParams) (Airline, error) {
	row := q.db.QueryRowContext(ctx, createAirline, arg.IataCode, arg.Name)
	var i Airline
	err := row.Scan(&i.ID, &i.IataCode, &i.Name)
	return i, err
}

const createAirport = `-- name: CreateAirport :one
INSERT INTO airports (
  iata_code,
  oadb_id
) VALUES (
  ?, ?
)
RETURNING id, iata_code, oadb_id
`

type CreateAirportParams struct {
	IataCode string
	OadbID   sql.NullInt64
}

func (q *Queries) CreateAirport(ctx context.Context, arg CreateAirportParams) (Airport, error) {
	row := q.db.QueryRowContext(ctx, createAirport, arg.IataCode, arg.OadbID)
	var i Airport
	err := row.Scan(&i.ID, &i.IataCode, &i.OadbID)
	return i, err
}

const createFleet = `-- name: CreateFleet :one
INSERT INTO fleets (
  airline_id,
  code,
  description
) VALUES (
  ?, ?, ?
)
RETURNING id, airline_id, code, description
`

type CreateFleetParams struct {
	AirlineID   int64
	Code        string
	Description string
}

func (q *Queries) CreateFleet(ctx context.Context, arg CreateFleetParams) (Fleet, error) {
	row := q.db.QueryRowContext(ctx, createFleet, arg.AirlineID, arg.Code, arg.Description)
	var i Fleet
	err := row.Scan(
		&i.ID,
		&i.AirlineID,
		&i.Code,
		&i.Description,
	)
	return i, err
}

const createFlightInstance = `-- name: CreateFlightInstance :one
INSERT INTO flight_instances (
  source_schedule_id,
  source_schedule_instance_localdate,
  airline_id,
  number,
  origin_airport_id,
  destination_airport_id,
  fleet_id,
  aircraft_id,
  departure_datetime,
  arrival_datetime,
  departure_datetime_utc,
  arrival_datetime_utc,
  notes,
  published
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id
`

type CreateFlightInstanceParams struct {
	SourceScheduleID                sql.NullInt64
	SourceScheduleInstanceLocaldate *localtime.LocalDate
	AirlineID                       int64
	Number                          string
	OriginAirportID                 int64
	DestinationAirportID            int64
	FleetID                         int64
	AircraftID                      sql.NullInt64
	DepartureDatetime               *zonedtime.ZonedTime
	ArrivalDatetime                 *zonedtime.ZonedTime
	DepartureDatetimeUtc            time.Time
	ArrivalDatetimeUtc              time.Time
	Notes                           string
	Published                       bool
}

func (q *Queries) CreateFlightInstance(ctx context.Context, arg CreateFlightInstanceParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createFlightInstance,
		arg.SourceScheduleID,
		arg.SourceScheduleInstanceLocaldate,
		arg.AirlineID,
		arg.Number,
		arg.OriginAirportID,
		arg.DestinationAirportID,
		arg.FleetID,
		arg.AircraftID,
		arg.DepartureDatetime,
		arg.ArrivalDatetime,
		arg.DepartureDatetimeUtc,
		arg.ArrivalDatetimeUtc,
		arg.Notes,
		arg.Published,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createItinerary = `-- name: CreateItinerary :one
INSERT INTO itineraries (
  record_id
) VALUES (
  ?
)
RETURNING id, record_id
`

func (q *Queries) CreateItinerary(ctx context.Context, recordID string) (Itinerary, error) {
	row := q.db.QueryRowContext(ctx, createItinerary, recordID)
	var i Itinerary
	err := row.Scan(&i.ID, &i.RecordID)
	return i, err
}

const createPassenger = `-- name: CreatePassenger :one
INSERT INTO passengers (
  name
) VALUES (
  ?
)
RETURNING id
`

func (q *Queries) CreatePassenger(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPassenger, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (
  airline_id, number, origin_airport_id, destination_airport_id, fleet_id, start_localdate, end_localdate, days_of_week, departure_localtime, duration_sec, published
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id
`

type CreateScheduleParams struct {
	AirlineID            int64
	Number               string
	OriginAirportID      int64
	DestinationAirportID int64
	FleetID              int64
	StartLocaldate       *localtime.LocalDate
	EndLocaldate         *localtime.LocalDate
	DaysOfWeek           string
	DepartureLocaltime   *localtime.TimeOfDay
	DurationSec          int64
	Published            bool
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSchedule,
		arg.AirlineID,
		arg.Number,
		arg.OriginAirportID,
		arg.DestinationAirportID,
		arg.FleetID,
		arg.StartLocaldate,
		arg.EndLocaldate,
		arg.DaysOfWeek,
		arg.DepartureLocaltime,
		arg.DurationSec,
		arg.Published,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createSeatAssignment = `-- name: CreateSeatAssignment :one
INSERT INTO seat_assignments (
  itinerary_id,
  passenger_id,
  flight_instance_id,
  seat
) VALUES (
  ?, ?, ?, ?
)
RETURNING id
`

type CreateSeatAssignmentParams struct {
	ItineraryID      int64
	PassengerID      int64
	FlightInstanceID int64
	Seat             string
}

func (q *Queries) CreateSeatAssignment(ctx context.Context, arg CreateSeatAssignmentParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSeatAssignment,
		arg.ItineraryID,
		arg.PassengerID,
		arg.FlightInstanceID,
		arg.Seat,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteAircraft = `-- name: DeleteAircraft :exec
DELETE FROM aircraft
WHERE id=?
`

func (q *Queries) DeleteAircraft(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAircraft, id)
	return err
}

const deleteAirline = `-- name: DeleteAirline :exec
DELETE FROM airlines
WHERE id=?
`

func (q *Queries) DeleteAirline(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAirline, id)
	return err
}

const deleteAirport = `-- name: DeleteAirport :exec
DELETE FROM airports
WHERE id=?
`

func (q *Queries) DeleteAirport(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAirport, id)
	return err
}

const deleteAllAircraft = `-- name: DeleteAllAircraft :exec
DELETE FROM aircraft
`

func (q *Queries) DeleteAllAircraft(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllAircraft)
	return err
}

const deleteAllAirlines = `-- name: DeleteAllAirlines :exec
DELETE FROM airlines
`

func (q *Queries) DeleteAllAirlines(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllAirlines)
	return err
}

const deleteAllAirports = `-- name: DeleteAllAirports :exec
DELETE FROM airports
`

func (q *Queries) DeleteAllAirports(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllAirports)
	return err
}

const deleteAllSchedules = `-- name: DeleteAllSchedules :exec
DELETE FROM schedules
`

func (q *Queries) DeleteAllSchedules(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllSchedules)
	return err
}

const deleteFleet = `-- name: DeleteFleet :exec
DELETE FROM fleets
WHERE id=?
`

func (q *Queries) DeleteFleet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFleet, id)
	return err
}

const deleteFlightInstance = `-- name: DeleteFlightInstance :exec
DELETE FROM flight_instances
WHERE id=?
`

func (q *Queries) DeleteFlightInstance(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFlightInstance, id)
	return err
}

const deleteItinerary = `-- name: DeleteItinerary :exec
DELETE FROM itineraries
WHERE id = ?
`

func (q *Queries) DeleteItinerary(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteItinerary, id)
	return err
}

const deletePassenger = `-- name: DeletePassenger :exec
DELETE FROM passengers
WHERE id = ?
`

func (q *Queries) DeletePassenger(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePassenger, id)
	return err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedules
WHERE id=?
`

func (q *Queries) DeleteSchedule(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, id)
	return err
}

const deleteSeatAssignment = `-- name: DeleteSeatAssignment :exec
DELETE FROM seat_assignments
WHERE id=?
`

func (q *Queries) DeleteSeatAssignment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSeatAssignment, id)
	return err
}

const getAircraft = `-- name: GetAircraft :one

SELECT id, registration, aircraft_type, airline_id, airline_iata_code, airline_name FROM aircraft_view
WHERE id=? LIMIT 1
`

// ----------------------------------------------------------------------------- aircraft
func (q *Queries) GetAircraft(ctx context.Context, id int64) (AircraftView, error) {
	row := q.db.QueryRowContext(ctx, getAircraft, id)
	var i AircraftView
	err := row.Scan(
		&i.ID,
		&i.Registration,
		&i.AircraftType,
		&i.AirlineID,
		&i.AirlineIataCode,
		&i.AirlineName,
	)
	return i, err
}

const getAircraftByRegistration = `-- name: GetAircraftByRegistration :one
SELECT id, registration, aircraft_type, airline_id, airline_iata_code, airline_name FROM aircraft_view
WHERE registration=? LIMIT 1
`

func (q *Queries) GetAircraftByRegistration(ctx context.Context, registration string) (AircraftView, error) {
	row := q.db.QueryRowContext(ctx, getAircraftByRegistration, registration)
	var i AircraftView
	err := row.Scan(
		&i.ID,
		&i.Registration,
		&i.AircraftType,
		&i.AirlineID,
		&i.AirlineIataCode,
		&i.AirlineName,
	)
	return i, err
}

const getAirline = `-- name: GetAirline :one

SELECT id, iata_code, name FROM airlines
WHERE id=? LIMIT 1
`

// ----------------------------------------------------------------------------- airlines
func (q *Queries) GetAirline(ctx context.Context, id int64) (Airline, error) {
	row := q.db.QueryRowContext(ctx, getAirline, id)
	var i Airline
	err := row.Scan(&i.ID, &i.IataCode, &i.Name)
	return i, err
}

const getAirlineByIATACode = `-- name: GetAirlineByIATACode :one
SELECT id, iata_code, name FROM airlines
WHERE iata_code=? LIMIT 1
`

func (q *Queries) GetAirlineByIATACode(ctx context.Context, iataCode string) (Airline, error) {
	row := q.db.QueryRowContext(ctx, getAirlineByIATACode, iataCode)
	var i Airline
	err := row.Scan(&i.ID, &i.IataCode, &i.Name)
	return i, err
}

const getAirport = `-- name: GetAirport :one

SELECT id, iata_code, oadb_id FROM airports
WHERE id=? LIMIT 1
`

// ----------------------------------------------------------------------------- airports
func (q *Queries) GetAirport(ctx context.Context, id int64) (Airport, error) {
	row := q.db.QueryRowContext(ctx, getAirport, id)
	var i Airport
	err := row.Scan(&i.ID, &i.IataCode, &i.OadbID)
	return i, err
}

const getAirportByIATACode = `-- name: GetAirportByIATACode :one
SELECT id, iata_code, oadb_id FROM airports
WHERE iata_code=? LIMIT 1
`

func (q *Queries) GetAirportByIATACode(ctx context.Context, iataCode string) (Airport, error) {
	row := q.db.QueryRowContext(ctx, getAirportByIATACode, iataCode)
	var i Airport
	err := row.Scan(&i.ID, &i.IataCode, &i.OadbID)
	return i, err
}

const getFleet = `-- name: GetFleet :one

SELECT id, airline_id, code, description, airline_iata_code, airline_name FROM fleets_view
WHERE id=? LIMIT 1
`

// ----------------------------------------------------------------------------- fleets
func (q *Queries) GetFleet(ctx context.Context, id int64) (FleetsView, error) {
	row := q.db.QueryRowContext(ctx, getFleet, id)
	var i FleetsView
	err := row.Scan(
		&i.ID,
		&i.AirlineID,
		&i.Code,
		&i.Description,
		&i.AirlineIataCode,
		&i.AirlineName,
	)
	return i, err
}

const getFleetByCode = `-- name: GetFleetByCode :one
SELECT id, airline_id, code, description, airline_iata_code, airline_name FROM fleets_view
WHERE airline_id=? AND code=? LIMIT 1
`

type GetFleetByCodeParams struct {
	AirlineID int64
	Code      string
}

func (q *Queries) GetFleetByCode(ctx context.Context, arg GetFleetByCodeParams) (FleetsView, error) {
	row := q.db.QueryRowContext(ctx, getFleetByCode, arg.AirlineID, arg.Code)
	var i FleetsView
	err := row.Scan(
		&i.ID,
		&i.AirlineID,
		&i.Code,
		&i.Description,
		&i.AirlineIataCode,
		&i.AirlineName,
	)
	return i, err
}

const getFlightInstance = `-- name: GetFlightInstance :one

SELECT id, source_schedule_id, source_schedule_instance_localdate, airline_id, number, origin_airport_id, destination_airport_id, fleet_id, aircraft_id, departure_datetime, arrival_datetime, departure_datetime_utc, arrival_datetime_utc, notes, published, airline_iata_code, airline_name, fleet_airline_id, fleet_code, fleet_description, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, aircraft_registration, aircraft_aircraft_type, aircraft_airline_id, aircraft_airline_iata_code, aircraft_airline_name
FROM flight_instances_view
WHERE id=?1 LIMIT 1
`

// ----------------------------------------------------------------------------- flight_instances
func (q *Queries) GetFlightInstance(ctx context.Context, id int64) (FlightInstancesView, error) {
	row := q.db.QueryRowContext(ctx, getFlightInstance, id)
	var i FlightInstancesView
	err := row.Scan(
		&i.ID,
		&i.SourceScheduleID,
		&i.SourceScheduleInstanceLocaldate,
		&i.AirlineID,
		&i.Number,
		&i.OriginAirportID,
		&i.DestinationAirportID,
		&i.FleetID,
		&i.AircraftID,
		&i.DepartureDatetime,
		&i.ArrivalDatetime,
		&i.DepartureDatetimeUtc,
		&i.ArrivalDatetimeUtc,
		&i.Notes,
		&i.Published,
		&i.AirlineIataCode,
		&i.AirlineName,
		&i.FleetAirlineID,
		&i.FleetCode,
		&i.FleetDescription,
		&i.OriginAirportIataCode,
		&i.OriginAirportOadbID,
		&i.DestinationAirportIataCode,
		&i.DestinationAirportOadbID,
		&i.AircraftRegistration,
		&i.AircraftAircraftType,
		&i.AircraftAirlineID,
		&i.AircraftAirlineIataCode,
		&i.AircraftAirlineName,
	)
	return i, err
}

const getItinerary = `-- name: GetItinerary :one
SELECT id, record_id FROM itineraries
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetItinerary(ctx context.Context, id int64) (Itinerary, error) {
	row := q.db.QueryRowContext(ctx, getItinerary, id)
	var i Itinerary
	err := row.Scan(&i.ID, &i.RecordID)
	return i, err
}

const getItineraryByRecordLocator = `-- name: GetItineraryByRecordLocator :one
SELECT id, record_id FROM itineraries
WHERE record_id = ?
LIMIT 1
`

func (q *Queries) GetItineraryByRecordLocator(ctx context.Context, recordID string) (Itinerary, error) {
	row := q.db.QueryRowContext(ctx, getItineraryByRecordLocator, recordID)
	var i Itinerary
	err := row.Scan(&i.ID, &i.RecordID)
	return i, err
}

const getPassenger = `-- name: GetPassenger :one
SELECT id, name FROM passengers
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetPassenger(ctx context.Context, id int64) (Passenger, error) {
	row := q.db.QueryRowContext(ctx, getPassenger, id)
	var i Passenger
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRouteByIATACodes = `-- name: GetRouteByIATACodes :one

SELECT origin_airport_id, destination_airport_id, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, schedules_count FROM routes
WHERE origin_airport_iata_code=?1 AND destination_airport_iata_code=?2
LIMIT 1
`

type GetRouteByIATACodesParams struct {
	OriginAirportIataCode      string
	DestinationAirportIataCode string
}

// ----------------------------------------------------------------------------- routes
func (q *Queries) GetRouteByIATACodes(ctx context.Context, arg GetRouteByIATACodesParams) (Route, error) {
	row := q.db.QueryRowContext(ctx, getRouteByIATACodes, arg.OriginAirportIataCode, arg.DestinationAirportIataCode)
	var i Route
	err := row.Scan(
		&i.OriginAirportID,
		&i.DestinationAirportID,
		&i.OriginAirportIataCode,
		&i.OriginAirportOadbID,
		&i.DestinationAirportIataCode,
		&i.DestinationAirportOadbID,
		&i.SchedulesCount,
	)
	return i, err
}

const getSchedule = `-- name: GetSchedule :one

SELECT id, airline_id, number, origin_airport_id, destination_airport_id, fleet_id, start_localdate, end_localdate, days_of_week, departure_localtime, duration_sec, published, airline_iata_code, airline_name, fleet_airline_id, fleet_code, fleet_description, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id FROM schedules_view
WHERE id=? LIMIT 1
`

// ----------------------------------------------------------------------------- schedules
func (q *Queries) GetSchedule(ctx context.Context, id int64) (SchedulesView, error) {
	row := q.db.QueryRowContext(ctx, getSchedule, id)
	var i SchedulesView
	err := row.Scan(
		&i.ID,
		&i.AirlineID,
		&i.Number,
		&i.OriginAirportID,
		&i.DestinationAirportID,
		&i.FleetID,
		&i.StartLocaldate,
		&i.EndLocaldate,
		&i.DaysOfWeek,
		&i.DepartureLocaltime,
		&i.DurationSec,
		&i.Published,
		&i.AirlineIataCode,
		&i.AirlineName,
		&i.FleetAirlineID,
		&i.FleetCode,
		&i.FleetDescription,
		&i.OriginAirportIataCode,
		&i.OriginAirportOadbID,
		&i.DestinationAirportIataCode,
		&i.DestinationAirportOadbID,
	)
	return i, err
}

const getSeatAssignment = `-- name: GetSeatAssignment :one
SELECT id, itinerary_id, passenger_id, flight_instance_id, seat, itinerary_record_id, passenger_name FROM seat_assignments_view
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetSeatAssignment(ctx context.Context, id int64) (SeatAssignmentsView, error) {
	row := q.db.QueryRowContext(ctx, getSeatAssignment, id)
	var i SeatAssignmentsView
	err := row.Scan(
		&i.ID,
		&i.ItineraryID,
		&i.PassengerID,
		&i.FlightInstanceID,
		&i.Seat,
		&i.ItineraryRecordID,
		&i.PassengerName,
	)
	return i, err
}

const listAircraft = `-- name: ListAircraft :many
SELECT id, registration, aircraft_type, airline_id, airline_iata_code, airline_name FROM aircraft_view
ORDER BY id ASC
`

func (q *Queries) ListAircraft(ctx context.Context) ([]AircraftView, error) {
	rows, err := q.db.QueryContext(ctx, listAircraft)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AircraftView
	for rows.Next() {
		var i AircraftView
		if err := rows.Scan(
			&i.ID,
			&i.Registration,
			&i.AircraftType,
			&i.AirlineID,
			&i.AirlineIataCode,
			&i.AirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAircraftByAirline = `-- name: ListAircraftByAirline :many
SELECT id, registration, aircraft_type, airline_id, airline_iata_code, airline_name
FROM aircraft_view
WHERE airline_id=?1
ORDER BY id ASC
`

func (q *Queries) ListAircraftByAirline(ctx context.Context, airline int64) ([]AircraftView, error) {
	rows, err := q.db.QueryContext(ctx, listAircraftByAirline, airline)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AircraftView
	for rows.Next() {
		var i AircraftView
		if err := rows.Scan(
			&i.ID,
			&i.Registration,
			&i.AircraftType,
			&i.AirlineID,
			&i.AirlineIataCode,
			&i.AirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAircraftByFleet = `-- name: ListAircraftByFleet :many
SELECT id, registration, aircraft_type, airline_id, airline_iata_code, airline_name
FROM aircraft_view
WHERE id IN (
    SELECT aircraft_id
    FROM fleets_aircraft
    WHERE fleet_id = ?
)
ORDER BY id ASC
`

func (q *Queries) ListAircraftByFleet(ctx context.Context, fleetID int64) ([]AircraftView, error) {
	rows, err := q.db.QueryContext(ctx, listAircraftByFleet, fleetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AircraftView
	for rows.Next() {
		var i AircraftView
		if err := rows.Scan(
			&i.ID,
			&i.Registration,
			&i.AircraftType,
			&i.AirlineID,
			&i.AirlineIataCode,
			&i.AirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAirlines = `-- name: ListAirlines :many
SELECT id, iata_code, name FROM airlines
ORDER BY id ASC
`

func (q *Queries) ListAirlines(ctx context.Context) ([]Airline, error) {
	rows, err := q.db.QueryContext(ctx, listAirlines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Airline
	for rows.Next() {
		var i Airline
		if err := rows.Scan(&i.ID, &i.IataCode, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAirports = `-- name: ListAirports :many
SELECT id, iata_code, oadb_id FROM airports
ORDER BY id ASC
`

func (q *Queries) ListAirports(ctx context.Context) ([]Airport, error) {
	rows, err := q.db.QueryContext(ctx, listAirports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Airport
	for rows.Next() {
		var i Airport
		if err := rows.Scan(&i.ID, &i.IataCode, &i.OadbID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFleets = `-- name: ListFleets :many
SELECT id, airline_id, code, description, airline_iata_code, airline_name FROM fleets_view
ORDER BY id ASC
`

func (q *Queries) ListFleets(ctx context.Context) ([]FleetsView, error) {
	rows, err := q.db.QueryContext(ctx, listFleets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FleetsView
	for rows.Next() {
		var i FleetsView
		if err := rows.Scan(
			&i.ID,
			&i.AirlineID,
			&i.Code,
			&i.Description,
			&i.AirlineIataCode,
			&i.AirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFleetsByAirline = `-- name: ListFleetsByAirline :many
SELECT id, airline_id, code, description, airline_iata_code, airline_name
FROM fleets_view
WHERE airline_id=?1
ORDER BY id ASC
`

func (q *Queries) ListFleetsByAirline(ctx context.Context, airline int64) ([]FleetsView, error) {
	rows, err := q.db.QueryContext(ctx, listFleetsByAirline, airline)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FleetsView
	for rows.Next() {
		var i FleetsView
		if err := rows.Scan(
			&i.ID,
			&i.AirlineID,
			&i.Code,
			&i.Description,
			&i.AirlineIataCode,
			&i.AirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlightInstances = `-- name: ListFlightInstances :many
SELECT id, source_schedule_id, source_schedule_instance_localdate, airline_id, number, origin_airport_id, destination_airport_id, fleet_id, aircraft_id, departure_datetime, arrival_datetime, departure_datetime_utc, arrival_datetime_utc, notes, published, airline_iata_code, airline_name, fleet_airline_id, fleet_code, fleet_description, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, aircraft_registration, aircraft_aircraft_type, aircraft_airline_id, aircraft_airline_iata_code, aircraft_airline_name
FROM flight_instances_view
ORDER BY departure_datetime_utc ASC, arrival_datetime_utc ASC, id ASC
`

func (q *Queries) ListFlightInstances(ctx context.Context) ([]FlightInstancesView, error) {
	rows, err := q.db.QueryContext(ctx, listFlightInstances)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlightInstancesView
	for rows.Next() {
		var i FlightInstancesView
		if err := rows.Scan(
			&i.ID,
			&i.SourceScheduleID,
			&i.SourceScheduleInstanceLocaldate,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.FleetID,
			&i.AircraftID,
			&i.DepartureDatetime,
			&i.ArrivalDatetime,
			&i.DepartureDatetimeUtc,
			&i.ArrivalDatetimeUtc,
			&i.Notes,
			&i.Published,
			&i.AirlineIataCode,
			&i.AirlineName,
			&i.FleetAirlineID,
			&i.FleetCode,
			&i.FleetDescription,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
			&i.AircraftRegistration,
			&i.AircraftAircraftType,
			&i.AircraftAirlineID,
			&i.AircraftAirlineIataCode,
			&i.AircraftAirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlightInstancesByAirline = `-- name: ListFlightInstancesByAirline :many
SELECT flight_instances_view.id, flight_instances_view.source_schedule_id, flight_instances_view.source_schedule_instance_localdate, flight_instances_view.airline_id, flight_instances_view.number, flight_instances_view.origin_airport_id, flight_instances_view.destination_airport_id, flight_instances_view.fleet_id, flight_instances_view.aircraft_id, flight_instances_view.departure_datetime, flight_instances_view.arrival_datetime, flight_instances_view.departure_datetime_utc, flight_instances_view.arrival_datetime_utc, flight_instances_view.notes, flight_instances_view.published, flight_instances_view.airline_iata_code, flight_instances_view.airline_name, flight_instances_view.fleet_airline_id, flight_instances_view.fleet_code, flight_instances_view.fleet_description, flight_instances_view.origin_airport_iata_code, flight_instances_view.origin_airport_oadb_id, flight_instances_view.destination_airport_iata_code, flight_instances_view.destination_airport_oadb_id, flight_instances_view.aircraft_registration, flight_instances_view.aircraft_aircraft_type, flight_instances_view.aircraft_airline_id, flight_instances_view.aircraft_airline_iata_code, flight_instances_view.aircraft_airline_name
FROM flight_instances_view
WHERE airline_id=?1
ORDER BY departure_datetime_utc ASC, arrival_datetime_utc ASC, id ASC
`

func (q *Queries) ListFlightInstancesByAirline(ctx context.Context, airlineID int64) ([]FlightInstancesView, error) {
	rows, err := q.db.QueryContext(ctx, listFlightInstancesByAirline, airlineID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlightInstancesView
	for rows.Next() {
		var i FlightInstancesView
		if err := rows.Scan(
			&i.ID,
			&i.SourceScheduleID,
			&i.SourceScheduleInstanceLocaldate,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.FleetID,
			&i.AircraftID,
			&i.DepartureDatetime,
			&i.ArrivalDatetime,
			&i.DepartureDatetimeUtc,
			&i.ArrivalDatetimeUtc,
			&i.Notes,
			&i.Published,
			&i.AirlineIataCode,
			&i.AirlineName,
			&i.FleetAirlineID,
			&i.FleetCode,
			&i.FleetDescription,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
			&i.AircraftRegistration,
			&i.AircraftAircraftType,
			&i.AircraftAirlineID,
			&i.AircraftAirlineIataCode,
			&i.AircraftAirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlightInstancesForSchedule = `-- name: ListFlightInstancesForSchedule :many
SELECT id, source_schedule_id, source_schedule_instance_localdate, airline_id, number, origin_airport_id, destination_airport_id, fleet_id, aircraft_id, departure_datetime, arrival_datetime, departure_datetime_utc, arrival_datetime_utc, notes, published, airline_iata_code, airline_name, fleet_airline_id, fleet_code, fleet_description, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, aircraft_registration, aircraft_aircraft_type, aircraft_airline_id, aircraft_airline_iata_code, aircraft_airline_name
FROM flight_instances_view
WHERE source_schedule_id IS NOT NULL AND source_schedule_id=?1
ORDER BY departure_datetime_utc ASC, arrival_datetime_utc ASC, id ASC
`

func (q *Queries) ListFlightInstancesForSchedule(ctx context.Context, scheduleID sql.NullInt64) ([]FlightInstancesView, error) {
	rows, err := q.db.QueryContext(ctx, listFlightInstancesForSchedule, scheduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlightInstancesView
	for rows.Next() {
		var i FlightInstancesView
		if err := rows.Scan(
			&i.ID,
			&i.SourceScheduleID,
			&i.SourceScheduleInstanceLocaldate,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.FleetID,
			&i.AircraftID,
			&i.DepartureDatetime,
			&i.ArrivalDatetime,
			&i.DepartureDatetimeUtc,
			&i.ArrivalDatetimeUtc,
			&i.Notes,
			&i.Published,
			&i.AirlineIataCode,
			&i.AirlineName,
			&i.FleetAirlineID,
			&i.FleetCode,
			&i.FleetDescription,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
			&i.AircraftRegistration,
			&i.AircraftAircraftType,
			&i.AircraftAirlineID,
			&i.AircraftAirlineIataCode,
			&i.AircraftAirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItineraries = `-- name: ListItineraries :many

SELECT id, record_id FROM itineraries
ORDER BY id ASC
`

// ----------------------------------------------------------------------------- itineraries
func (q *Queries) ListItineraries(ctx context.Context) ([]Itinerary, error) {
	rows, err := q.db.QueryContext(ctx, listItineraries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Itinerary
	for rows.Next() {
		var i Itinerary
		if err := rows.Scan(&i.ID, &i.RecordID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItineraryFlights = `-- name: ListItineraryFlights :many
SELECT flight_instances_view.id, flight_instances_view.source_schedule_id, flight_instances_view.source_schedule_instance_localdate, flight_instances_view.airline_id, flight_instances_view.number, flight_instances_view.origin_airport_id, flight_instances_view.destination_airport_id, flight_instances_view.fleet_id, flight_instances_view.aircraft_id, flight_instances_view.departure_datetime, flight_instances_view.arrival_datetime, flight_instances_view.departure_datetime_utc, flight_instances_view.arrival_datetime_utc, flight_instances_view.notes, flight_instances_view.published, flight_instances_view.airline_iata_code, flight_instances_view.airline_name, flight_instances_view.fleet_airline_id, flight_instances_view.fleet_code, flight_instances_view.fleet_description, flight_instances_view.origin_airport_iata_code, flight_instances_view.origin_airport_oadb_id, flight_instances_view.destination_airport_iata_code, flight_instances_view.destination_airport_oadb_id, flight_instances_view.aircraft_registration, flight_instances_view.aircraft_aircraft_type, flight_instances_view.aircraft_airline_id, flight_instances_view.aircraft_airline_iata_code, flight_instances_view.aircraft_airline_name
FROM flight_instances_view
JOIN itinerary_flights ON itinerary_flights.flight_instance_id = flight_instances_view.id
WHERE itinerary_flights.itinerary_id = ?1
ORDER BY departure_datetime_utc ASC
`

func (q *Queries) ListItineraryFlights(ctx context.Context, itineraryID int64) ([]FlightInstancesView, error) {
	rows, err := q.db.QueryContext(ctx, listItineraryFlights, itineraryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlightInstancesView
	for rows.Next() {
		var i FlightInstancesView
		if err := rows.Scan(
			&i.ID,
			&i.SourceScheduleID,
			&i.SourceScheduleInstanceLocaldate,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.FleetID,
			&i.AircraftID,
			&i.DepartureDatetime,
			&i.ArrivalDatetime,
			&i.DepartureDatetimeUtc,
			&i.ArrivalDatetimeUtc,
			&i.Notes,
			&i.Published,
			&i.AirlineIataCode,
			&i.AirlineName,
			&i.FleetAirlineID,
			&i.FleetCode,
			&i.FleetDescription,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
			&i.AircraftRegistration,
			&i.AircraftAircraftType,
			&i.AircraftAirlineID,
			&i.AircraftAirlineIataCode,
			&i.AircraftAirlineName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItineraryPassengers = `-- name: ListItineraryPassengers :many
SELECT passengers.id, passengers.name
FROM passengers
JOIN itinerary_passengers ON itinerary_passengers.passenger_id = passengers.id
WHERE itinerary_passengers.itinerary_id = ?1
ORDER BY passengers.id ASC
`

func (q *Queries) ListItineraryPassengers(ctx context.Context, itineraryID int64) ([]Passenger, error) {
	rows, err := q.db.QueryContext(ctx, listItineraryPassengers, itineraryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Passenger
	for rows.Next() {
		var i Passenger
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPassengers = `-- name: ListPassengers :many

SELECT id, name FROM passengers
ORDER BY id ASC
`

// ----------------------------------------------------------------------------- passengers
func (q *Queries) ListPassengers(ctx context.Context) ([]Passenger, error) {
	rows, err := q.db.QueryContext(ctx, listPassengers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Passenger
	for rows.Next() {
		var i Passenger
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoutes = `-- name: ListRoutes :many
SELECT origin_airport_id, destination_airport_id, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id, schedules_count FROM routes
ORDER BY schedules_count DESC, origin_airport_id ASC, destination_airport_id ASC
`

func (q *Queries) ListRoutes(ctx context.Context) ([]Route, error) {
	rows, err := q.db.QueryContext(ctx, listRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Route
	for rows.Next() {
		var i Route
		if err := rows.Scan(
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
			&i.SchedulesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchedules = `-- name: ListSchedules :many
SELECT id, airline_id, number, origin_airport_id, destination_airport_id, fleet_id, start_localdate, end_localdate, days_of_week, departure_localtime, duration_sec, published, airline_iata_code, airline_name, fleet_airline_id, fleet_code, fleet_description, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id FROM schedules_view
ORDER BY id ASC
`

func (q *Queries) ListSchedules(ctx context.Context) ([]SchedulesView, error) {
	rows, err := q.db.QueryContext(ctx, listSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SchedulesView
	for rows.Next() {
		var i SchedulesView
		if err := rows.Scan(
			&i.ID,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.FleetID,
			&i.StartLocaldate,
			&i.EndLocaldate,
			&i.DaysOfWeek,
			&i.DepartureLocaltime,
			&i.DurationSec,
			&i.Published,
			&i.AirlineIataCode,
			&i.AirlineName,
			&i.FleetAirlineID,
			&i.FleetCode,
			&i.FleetDescription,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchedulesByAirline = `-- name: ListSchedulesByAirline :many
SELECT id, airline_id, number, origin_airport_id, destination_airport_id, fleet_id, start_localdate, end_localdate, days_of_week, departure_localtime, duration_sec, published, airline_iata_code, airline_name, fleet_airline_id, fleet_code, fleet_description, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id
FROM schedules_view
WHERE airline_id=?1
ORDER BY id ASC
`

func (q *Queries) ListSchedulesByAirline(ctx context.Context, airline int64) ([]SchedulesView, error) {
	rows, err := q.db.QueryContext(ctx, listSchedulesByAirline, airline)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SchedulesView
	for rows.Next() {
		var i SchedulesView
		if err := rows.Scan(
			&i.ID,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.FleetID,
			&i.StartLocaldate,
			&i.EndLocaldate,
			&i.DaysOfWeek,
			&i.DepartureLocaltime,
			&i.DurationSec,
			&i.Published,
			&i.AirlineIataCode,
			&i.AirlineName,
			&i.FleetAirlineID,
			&i.FleetCode,
			&i.FleetDescription,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchedulesByAirport = `-- name: ListSchedulesByAirport :many
SELECT id, airline_id, number, origin_airport_id, destination_airport_id, fleet_id, start_localdate, end_localdate, days_of_week, departure_localtime, duration_sec, published, airline_iata_code, airline_name, fleet_airline_id, fleet_code, fleet_description, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id
FROM schedules_view
WHERE origin_airport_id=?1 OR destination_airport_id=?1
ORDER BY id ASC
`

func (q *Queries) ListSchedulesByAirport(ctx context.Context, airport int64) ([]SchedulesView, error) {
	rows, err := q.db.QueryContext(ctx, listSchedulesByAirport, airport)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SchedulesView
	for rows.Next() {
		var i SchedulesView
		if err := rows.Scan(
			&i.ID,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.FleetID,
			&i.StartLocaldate,
			&i.EndLocaldate,
			&i.DaysOfWeek,
			&i.DepartureLocaltime,
			&i.DurationSec,
			&i.Published,
			&i.AirlineIataCode,
			&i.AirlineName,
			&i.FleetAirlineID,
			&i.FleetCode,
			&i.FleetDescription,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSchedulesByRoute = `-- name: ListSchedulesByRoute :many
SELECT id, airline_id, number, origin_airport_id, destination_airport_id, fleet_id, start_localdate, end_localdate, days_of_week, departure_localtime, duration_sec, published, airline_iata_code, airline_name, fleet_airline_id, fleet_code, fleet_description, origin_airport_iata_code, origin_airport_oadb_id, destination_airport_iata_code, destination_airport_oadb_id
FROM schedules_view
WHERE origin_airport_id=?1 OR destination_airport_id=?2
ORDER BY id ASC
`

type ListSchedulesByRouteParams struct {
	OriginAirport      int64
	DestinationAirport int64
}

func (q *Queries) ListSchedulesByRoute(ctx context.Context, arg ListSchedulesByRouteParams) ([]SchedulesView, error) {
	rows, err := q.db.QueryContext(ctx, listSchedulesByRoute, arg.OriginAirport, arg.DestinationAirport)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SchedulesView
	for rows.Next() {
		var i SchedulesView
		if err := rows.Scan(
			&i.ID,
			&i.AirlineID,
			&i.Number,
			&i.OriginAirportID,
			&i.DestinationAirportID,
			&i.FleetID,
			&i.StartLocaldate,
			&i.EndLocaldate,
			&i.DaysOfWeek,
			&i.DepartureLocaltime,
			&i.DurationSec,
			&i.Published,
			&i.AirlineIataCode,
			&i.AirlineName,
			&i.FleetAirlineID,
			&i.FleetCode,
			&i.FleetDescription,
			&i.OriginAirportIataCode,
			&i.OriginAirportOadbID,
			&i.DestinationAirportIataCode,
			&i.DestinationAirportOadbID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSeatAssignmentsForFlightInstance = `-- name: ListSeatAssignmentsForFlightInstance :many

SELECT id, itinerary_id, passenger_id, flight_instance_id, seat, itinerary_record_id, passenger_name FROM seat_assignments_view
WHERE flight_instance_id = ?
ORDER BY id ASC
`

// ----------------------------------------------------------------------------- seat_assignments
func (q *Queries) ListSeatAssignmentsForFlightInstance(ctx context.Context, flightInstanceID int64) ([]SeatAssignmentsView, error) {
	rows, err := q.db.QueryContext(ctx, listSeatAssignmentsForFlightInstance, flightInstanceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SeatAssignmentsView
	for rows.Next() {
		var i SeatAssignmentsView
		if err := rows.Scan(
			&i.ID,
			&i.ItineraryID,
			&i.PassengerID,
			&i.FlightInstanceID,
			&i.Seat,
			&i.ItineraryRecordID,
			&i.PassengerName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAircraftFromFleet = `-- name: RemoveAircraftFromFleet :exec
DELETE FROM fleets_aircraft
WHERE fleet_id=? AND aircraft_id=?
`

type RemoveAircraftFromFleetParams struct {
	FleetID    int64
	AircraftID int64
}

func (q *Queries) RemoveAircraftFromFleet(ctx context.Context, arg RemoveAircraftFromFleetParams) error {
	_, err := q.db.ExecContext(ctx, removeAircraftFromFleet, arg.FleetID, arg.AircraftID)
	return err
}

const removeFlightFromItinerary = `-- name: RemoveFlightFromItinerary :exec
DELETE FROM itinerary_flights
WHERE itinerary_id = ? AND flight_instance_id = ?
`

type RemoveFlightFromItineraryParams struct {
	ItineraryID      int64
	FlightInstanceID int64
}

func (q *Queries) RemoveFlightFromItinerary(ctx context.Context, arg RemoveFlightFromItineraryParams) error {
	_, err := q.db.ExecContext(ctx, removeFlightFromItinerary, arg.ItineraryID, arg.FlightInstanceID)
	return err
}

const removePassengerFromItinerary = `-- name: RemovePassengerFromItinerary :exec
DELETE FROM itinerary_passengers
WHERE itinerary_id = ? AND passenger_id = ?
`

type RemovePassengerFromItineraryParams struct {
	ItineraryID int64
	PassengerID int64
}

func (q *Queries) RemovePassengerFromItinerary(ctx context.Context, arg RemovePassengerFromItineraryParams) error {
	_, err := q.db.ExecContext(ctx, removePassengerFromItinerary, arg.ItineraryID, arg.PassengerID)
	return err
}

const updateAircraft = `-- name: UpdateAircraft :one
UPDATE aircraft SET
registration = COALESCE(?1, registration),
aircraft_type = COALESCE(?2, aircraft_type),
airline_id = COALESCE(?3, airline_id)
WHERE id=?4
RETURNING id, registration, aircraft_type, airline_id
`

type UpdateAircraftParams struct {
	Registration sql.NullString
	AircraftType sql.NullString
	AirlineID    sql.NullInt64
	ID           int64
}

func (q *Queries) UpdateAircraft(ctx context.Context, arg UpdateAircraftParams) (Aircraft, error) {
	row := q.db.QueryRowContext(ctx, updateAircraft,
		arg.Registration,
		arg.AircraftType,
		arg.AirlineID,
		arg.ID,
	)
	var i Aircraft
	err := row.Scan(
		&i.ID,
		&i.Registration,
		&i.AircraftType,
		&i.AirlineID,
	)
	return i, err
}

const updateAirline = `-- name: UpdateAirline :one
UPDATE airlines SET
iata_code = COALESCE(?1, iata_code),
name = COALESCE(?2, name)
WHERE id=?3
RETURNING id, iata_code, name
`

type UpdateAirlineParams struct {
	IataCode sql.NullString
	Name     sql.NullString
	ID       int64
}

func (q *Queries) UpdateAirline(ctx context.Context, arg UpdateAirlineParams) (Airline, error) {
	row := q.db.QueryRowContext(ctx, updateAirline, arg.IataCode, arg.Name, arg.ID)
	var i Airline
	err := row.Scan(&i.ID, &i.IataCode, &i.Name)
	return i, err
}

const updateAirport = `-- name: UpdateAirport :one
UPDATE airports SET
iata_code = COALESCE(?1, iata_code),
oadb_id = COALESCE(?2, oadb_id)
WHERE id=?3
RETURNING id, iata_code, oadb_id
`

type UpdateAirportParams struct {
	IataCode sql.NullString
	OadbID   sql.NullInt64
	ID       int64
}

func (q *Queries) UpdateAirport(ctx context.Context, arg UpdateAirportParams) (Airport, error) {
	row := q.db.QueryRowContext(ctx, updateAirport, arg.IataCode, arg.OadbID, arg.ID)
	var i Airport
	err := row.Scan(&i.ID, &i.IataCode, &i.OadbID)
	return i, err
}

const updateFleet = `-- name: UpdateFleet :one
UPDATE fleets SET
code = COALESCE(?1, code),
description = COALESCE(?2, description)
WHERE id=?3
RETURNING id, airline_id, code, description
`

type UpdateFleetParams struct {
	Code        sql.NullString
	Description sql.NullString
	ID          int64
}

func (q *Queries) UpdateFleet(ctx context.Context, arg UpdateFleetParams) (Fleet, error) {
	row := q.db.QueryRowContext(ctx, updateFleet, arg.Code, arg.Description, arg.ID)
	var i Fleet
	err := row.Scan(
		&i.ID,
		&i.AirlineID,
		&i.Code,
		&i.Description,
	)
	return i, err
}

const updateFlightInstance = `-- name: UpdateFlightInstance :one
UPDATE flight_instances SET
number = COALESCE(?1, number),
origin_airport_id = COALESCE(?2, origin_airport_id),
destination_airport_id = COALESCE(?3, destination_airport_id),
fleet_id = COALESCE(?4, fleet_id),
aircraft_id = COALESCE(?5, aircraft_id),
departure_datetime = COALESCE(?6, departure_datetime),
arrival_datetime = COALESCE(?7, arrival_datetime),
departure_datetime_utc = COALESCE(?8, departure_datetime_utc),
arrival_datetime_utc = COALESCE(?9, arrival_datetime_utc),
notes = COALESCE(?10, notes),
published = COALESCE(?11, published)
WHERE id=?12
RETURNING id
`

type UpdateFlightInstanceParams struct {
	Number               sql.NullString
	OriginAirportID      sql.NullInt64
	DestinationAirportID sql.NullInt64
	FleetID              sql.NullInt64
	AircraftID           sql.NullInt64
	DepartureDatetime    *zonedtime.ZonedTime
	ArrivalDatetime      *zonedtime.ZonedTime
	DepartureDatetimeUtc sql.NullTime
	ArrivalDatetimeUtc   sql.NullTime
	Notes                sql.NullString
	Published            sql.NullBool
	ID                   int64
}

func (q *Queries) UpdateFlightInstance(ctx context.Context, arg UpdateFlightInstanceParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateFlightInstance,
		arg.Number,
		arg.OriginAirportID,
		arg.DestinationAirportID,
		arg.FleetID,
		arg.AircraftID,
		arg.DepartureDatetime,
		arg.ArrivalDatetime,
		arg.DepartureDatetimeUtc,
		arg.ArrivalDatetimeUtc,
		arg.Notes,
		arg.Published,
		arg.ID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updatePassenger = `-- name: UpdatePassenger :one
UPDATE passengers SET
name = COALESCE(?1, name)
WHERE id = ?2
RETURNING id
`

type UpdatePassengerParams struct {
	Name sql.NullString
	ID   int64
}

func (q *Queries) UpdatePassenger(ctx context.Context, arg UpdatePassengerParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updatePassenger, arg.Name, arg.ID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateSchedule = `-- name: UpdateSchedule :one
UPDATE schedules SET
number = COALESCE(?1, number),
origin_airport_id = COALESCE(?2, origin_airport_id),
destination_airport_id = COALESCE(?3, destination_airport_id),
fleet_id = COALESCE(?4, fleet_id),
start_localdate = COALESCE(?5, start_localdate),
end_localdate = COALESCE(?6, end_localdate),
days_of_week = COALESCE(?7, days_of_week),
departure_localtime = COALESCE(?8, departure_localtime),
duration_sec = COALESCE(?9, duration_sec),
published = COALESCE(?10, published)
WHERE id=?11
RETURNING id
`

type UpdateScheduleParams struct {
	Number               sql.NullString
	OriginAirportID      sql.NullInt64
	DestinationAirportID sql.NullInt64
	FleetID              sql.NullInt64
	StartLocaldate       *localtime.LocalDate
	EndLocaldate         *localtime.LocalDate
	DaysOfWeek           sql.NullString
	DepartureLocaltime   *localtime.TimeOfDay
	DurationSec          sql.NullInt64
	Published            sql.NullBool
	ID                   int64
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateSchedule,
		arg.Number,
		arg.OriginAirportID,
		arg.DestinationAirportID,
		arg.FleetID,
		arg.StartLocaldate,
		arg.EndLocaldate,
		arg.DaysOfWeek,
		arg.DepartureLocaltime,
		arg.DurationSec,
		arg.Published,
		arg.ID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateSeatAssignment = `-- name: UpdateSeatAssignment :one
UPDATE seat_assignments SET
seat = COALESCE(?1, seat)
WHERE id=?2
RETURNING id, itinerary_id, passenger_id, flight_instance_id, seat
`

type UpdateSeatAssignmentParams struct {
	Seat sql.NullString
	ID   int64
}

func (q *Queries) UpdateSeatAssignment(ctx context.Context, arg UpdateSeatAssignmentParams) (SeatAssignment, error) {
	row := q.db.QueryRowContext(ctx, updateSeatAssignment, arg.Seat, arg.ID)
	var i SeatAssignment
	err := row.Scan(
		&i.ID,
		&i.ItineraryID,
		&i.PassengerID,
		&i.FlightInstanceID,
		&i.Seat,
	)
	return i, err
}
