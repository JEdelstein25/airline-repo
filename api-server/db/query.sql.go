// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const addFlightToAirport = `-- name: AddFlightToAirport :exec

INSERT INTO flight_airports (
  flight_id,
  airport_id
) VALUES (
  ?, ?
)
`

type AddFlightToAirportParams struct {
	FlightID  int64
	AirportID int64
}

// -----------------------------------------------------------------------------
func (q *Queries) AddFlightToAirport(ctx context.Context, arg AddFlightToAirportParams) error {
	_, err := q.db.ExecContext(ctx, addFlightToAirport, arg.FlightID, arg.AirportID)
	return err
}

const createAirport = `-- name: CreateAirport :one
INSERT INTO airports (
  title
) VALUES (
  ?
)
RETURNING id, title
`

func (q *Queries) CreateAirport(ctx context.Context, title string) (Airport, error) {
	row := q.db.QueryRowContext(ctx, createAirport, title)
	var i Airport
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const createFlight = `-- name: CreateFlight :one
INSERT INTO flights (
  title, starred
) VALUES (
  ?, ?
)
RETURNING id, title, starred
`

type CreateFlightParams struct {
	Title   string
	Starred bool
}

func (q *Queries) CreateFlight(ctx context.Context, arg CreateFlightParams) (Flight, error) {
	row := q.db.QueryRowContext(ctx, createFlight, arg.Title, arg.Starred)
	var i Flight
	err := row.Scan(&i.ID, &i.Title, &i.Starred)
	return i, err
}

const deleteAirport = `-- name: DeleteAirport :exec
DELETE FROM airports
WHERE id=?
`

func (q *Queries) DeleteAirport(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAirport, id)
	return err
}

const deleteFlight = `-- name: DeleteFlight :exec
DELETE FROM flights
WHERE id=?
`

func (q *Queries) DeleteFlight(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFlight, id)
	return err
}

const getAirport = `-- name: GetAirport :one
SELECT id, title FROM airports
WHERE id=? LIMIT 1
`

func (q *Queries) GetAirport(ctx context.Context, id int64) (Airport, error) {
	row := q.db.QueryRowContext(ctx, getAirport, id)
	var i Airport
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getFlight = `-- name: GetFlight :one

SELECT id, title, starred FROM flights
WHERE id=? LIMIT 1
`

// -----------------------------------------------------------------------------
func (q *Queries) GetFlight(ctx context.Context, id int64) (Flight, error) {
	row := q.db.QueryRowContext(ctx, getFlight, id)
	var i Flight
	err := row.Scan(&i.ID, &i.Title, &i.Starred)
	return i, err
}

const listAirports = `-- name: ListAirports :many
SELECT id, title FROM airports
ORDER BY id ASC
`

func (q *Queries) ListAirports(ctx context.Context) ([]Airport, error) {
	rows, err := q.db.QueryContext(ctx, listAirports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Airport
	for rows.Next() {
		var i Airport
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFlights = `-- name: ListFlights :many
SELECT id, title, starred FROM flights
ORDER BY id ASC
`

func (q *Queries) ListFlights(ctx context.Context) ([]Flight, error) {
	rows, err := q.db.QueryContext(ctx, listFlights)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flight
	for rows.Next() {
		var i Flight
		if err := rows.Scan(&i.ID, &i.Title, &i.Starred); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFlightFromAirport = `-- name: RemoveFlightFromAirport :exec
DELETE FROM flight_airports
WHERE flight_id = ? AND airport_id = ?
`

type RemoveFlightFromAirportParams struct {
	FlightID  int64
	AirportID int64
}

func (q *Queries) RemoveFlightFromAirport(ctx context.Context, arg RemoveFlightFromAirportParams) error {
	_, err := q.db.ExecContext(ctx, removeFlightFromAirport, arg.FlightID, arg.AirportID)
	return err
}

const updateAirport = `-- name: UpdateAirport :exec
UPDATE airports SET
title=?
WHERE id=?
`

type UpdateAirportParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdateAirport(ctx context.Context, arg UpdateAirportParams) error {
	_, err := q.db.ExecContext(ctx, updateAirport, arg.Title, arg.ID)
	return err
}

const updateFlight = `-- name: UpdateFlight :exec
UPDATE flights SET
title=?,
starred=?
WHERE id=?
`

type UpdateFlightParams struct {
	Title   string
	Starred bool
	ID      int64
}

func (q *Queries) UpdateFlight(ctx context.Context, arg UpdateFlightParams) error {
	_, err := q.db.ExecContext(ctx, updateFlight, arg.Title, arg.Starred, arg.ID)
	return err
}
