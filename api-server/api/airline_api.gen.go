//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20241128135601-9feb3033b612 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Airport defines model for Airport.
type Airport struct {
	Country  string `json:"country"`
	IataCode string `json:"iataCode"`
	Id       int    `json:"id"`
	Name     string `json:"name"`
	Point    Point  `json:"point"`
	Region   string `json:"region"`
}

// Flight defines model for Flight.
type Flight struct {
	DestinationAirport Airport `json:"destinationAirport"`
	DistanceMiles      float64 `json:"distanceMiles"`
	Id                 int     `json:"id"`
	Number             string  `json:"number"`
	OriginAirport      Airport `json:"originAirport"`
	Published          bool    `json:"published"`
}

// Point defines model for Point.
type Point struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

// AirportSpec defines model for airportSpec.
type AirportSpec struct {
	union json.RawMessage
}

// AirportSpec0 defines model for .
type AirportSpec0 = int

// AirportSpec1 defines model for .
type AirportSpec1 = string

// CreateAirportJSONBody defines parameters for CreateAirport.
type CreateAirportJSONBody struct {
	IataCode string `json:"iataCode"`
}

// UpdateAirportJSONBody defines parameters for UpdateAirport.
type UpdateAirportJSONBody struct {
	IataCode *string `json:"iataCode,omitempty"`
}

// CreateFlightJSONBody defines parameters for CreateFlight.
type CreateFlightJSONBody struct {
	DestinationAirport AirportSpec `json:"destinationAirport"`
	Number             string      `json:"number"`
	OriginAirport      AirportSpec `json:"originAirport"`
	Published          *bool       `json:"published,omitempty"`
}

// UpdateFlightJSONBody defines parameters for UpdateFlight.
type UpdateFlightJSONBody struct {
	DestinationAirport *int    `json:"destinationAirport,omitempty"`
	Number             *string `json:"number,omitempty"`
	OriginAirport      *int    `json:"originAirport,omitempty"`
	Published          *bool   `json:"published,omitempty"`
}

// CreateAirportJSONRequestBody defines body for CreateAirport for application/json ContentType.
type CreateAirportJSONRequestBody CreateAirportJSONBody

// UpdateAirportJSONRequestBody defines body for UpdateAirport for application/json ContentType.
type UpdateAirportJSONRequestBody UpdateAirportJSONBody

// CreateFlightJSONRequestBody defines body for CreateFlight for application/json ContentType.
type CreateFlightJSONRequestBody CreateFlightJSONBody

// UpdateFlightJSONRequestBody defines body for UpdateFlight for application/json ContentType.
type UpdateFlightJSONRequestBody UpdateFlightJSONBody

// AsAirportSpec0 returns the union data inside the AirportSpec as a AirportSpec0
func (t AirportSpec) AsAirportSpec0() (AirportSpec0, error) {
	var body AirportSpec0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirportSpec0 overwrites any union data inside the AirportSpec as the provided AirportSpec0
func (t *AirportSpec) FromAirportSpec0(v AirportSpec0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirportSpec0 performs a merge with any union data inside the AirportSpec, using the provided AirportSpec0
func (t *AirportSpec) MergeAirportSpec0(v AirportSpec0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAirportSpec1 returns the union data inside the AirportSpec as a AirportSpec1
func (t AirportSpec) AsAirportSpec1() (AirportSpec1, error) {
	var body AirportSpec1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirportSpec1 overwrites any union data inside the AirportSpec as the provided AirportSpec1
func (t *AirportSpec) FromAirportSpec1(v AirportSpec1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirportSpec1 performs a merge with any union data inside the AirportSpec, using the provided AirportSpec1
func (t *AirportSpec) MergeAirportSpec1(v AirportSpec1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AirportSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AirportSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete all airports
	// (DELETE /airports)
	DeleteAllAirports(w http.ResponseWriter, r *http.Request)
	// List all airports
	// (GET /airports)
	ListAirports(w http.ResponseWriter, r *http.Request)
	// Create a new airport
	// (POST /airports)
	CreateAirport(w http.ResponseWriter, r *http.Request)
	// Delete an airport
	// (DELETE /airports/{id})
	DeleteAirport(w http.ResponseWriter, r *http.Request, id int)
	// Get airport by ID
	// (GET /airports/{id})
	GetAirport(w http.ResponseWriter, r *http.Request, id int)
	// Update airport
	// (PATCH /airports/{id})
	UpdateAirport(w http.ResponseWriter, r *http.Request, id int)
	// List flights that depart from or arrive at an airport
	// (GET /airports/{id}/flights)
	ListFlightsByAirport(w http.ResponseWriter, r *http.Request, id int)
	// Delete all flights
	// (DELETE /flights)
	DeleteAllFlights(w http.ResponseWriter, r *http.Request)
	// List all flights
	// (GET /flights)
	ListFlights(w http.ResponseWriter, r *http.Request)
	// Create a new flight
	// (POST /flights)
	CreateFlight(w http.ResponseWriter, r *http.Request)
	// Delete a flight
	// (DELETE /flights/{id})
	DeleteFlight(w http.ResponseWriter, r *http.Request, id int)
	// Get flight by ID
	// (GET /flights/{id})
	GetFlight(w http.ResponseWriter, r *http.Request, id int)
	// Update flight
	// (PATCH /flights/{id})
	UpdateFlight(w http.ResponseWriter, r *http.Request, id int)
	// Health check endpoint
	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteAllAirports operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllAirports(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllAirports(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAirports operation middleware
func (siw *ServerInterfaceWrapper) ListAirports(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAirports(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAirport operation middleware
func (siw *ServerInterfaceWrapper) CreateAirport(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAirport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAirport operation middleware
func (siw *ServerInterfaceWrapper) DeleteAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAirport(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAirport operation middleware
func (siw *ServerInterfaceWrapper) GetAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAirport(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAirport operation middleware
func (siw *ServerInterfaceWrapper) UpdateAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAirport(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlightsByAirport operation middleware
func (siw *ServerInterfaceWrapper) ListFlightsByAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlightsByAirport(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAllFlights operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllFlights(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllFlights(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlights operation middleware
func (siw *ServerInterfaceWrapper) ListFlights(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlights(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateFlight operation middleware
func (siw *ServerInterfaceWrapper) CreateFlight(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFlight(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFlight operation middleware
func (siw *ServerInterfaceWrapper) DeleteFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFlight(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFlight operation middleware
func (siw *ServerInterfaceWrapper) GetFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlight(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateFlight operation middleware
func (siw *ServerInterfaceWrapper) UpdateFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFlight(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("DELETE "+options.BaseURL+"/airports", wrapper.DeleteAllAirports)
	m.HandleFunc("GET "+options.BaseURL+"/airports", wrapper.ListAirports)
	m.HandleFunc("POST "+options.BaseURL+"/airports", wrapper.CreateAirport)
	m.HandleFunc("DELETE "+options.BaseURL+"/airports/{id}", wrapper.DeleteAirport)
	m.HandleFunc("GET "+options.BaseURL+"/airports/{id}", wrapper.GetAirport)
	m.HandleFunc("PATCH "+options.BaseURL+"/airports/{id}", wrapper.UpdateAirport)
	m.HandleFunc("GET "+options.BaseURL+"/airports/{id}/flights", wrapper.ListFlightsByAirport)
	m.HandleFunc("DELETE "+options.BaseURL+"/flights", wrapper.DeleteAllFlights)
	m.HandleFunc("GET "+options.BaseURL+"/flights", wrapper.ListFlights)
	m.HandleFunc("POST "+options.BaseURL+"/flights", wrapper.CreateFlight)
	m.HandleFunc("DELETE "+options.BaseURL+"/flights/{id}", wrapper.DeleteFlight)
	m.HandleFunc("GET "+options.BaseURL+"/flights/{id}", wrapper.GetFlight)
	m.HandleFunc("PATCH "+options.BaseURL+"/flights/{id}", wrapper.UpdateFlight)
	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.HealthCheck)

	return m
}

type DeleteAllAirportsRequestObject struct {
}

type DeleteAllAirportsResponseObject interface {
	VisitDeleteAllAirportsResponse(w http.ResponseWriter) error
}

type DeleteAllAirports204Response struct {
}

func (response DeleteAllAirports204Response) VisitDeleteAllAirportsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListAirportsRequestObject struct {
}

type ListAirportsResponseObject interface {
	VisitListAirportsResponse(w http.ResponseWriter) error
}

type ListAirports200JSONResponse []Airport

func (response ListAirports200JSONResponse) VisitListAirportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirportRequestObject struct {
	Body *CreateAirportJSONRequestBody
}

type CreateAirportResponseObject interface {
	VisitCreateAirportResponse(w http.ResponseWriter) error
}

type CreateAirport201Response struct {
}

func (response CreateAirport201Response) VisitCreateAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateAirport400Response struct {
}

func (response CreateAirport400Response) VisitCreateAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteAirportRequestObject struct {
	Id int `json:"id"`
}

type DeleteAirportResponseObject interface {
	VisitDeleteAirportResponse(w http.ResponseWriter) error
}

type DeleteAirport204Response struct {
}

func (response DeleteAirport204Response) VisitDeleteAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAirport404Response struct {
}

func (response DeleteAirport404Response) VisitDeleteAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAirportRequestObject struct {
	Id int `json:"id"`
}

type GetAirportResponseObject interface {
	VisitGetAirportResponse(w http.ResponseWriter) error
}

type GetAirport200JSONResponse Airport

func (response GetAirport200JSONResponse) VisitGetAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAirport404Response struct {
}

func (response GetAirport404Response) VisitGetAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateAirportRequestObject struct {
	Id   int `json:"id"`
	Body *UpdateAirportJSONRequestBody
}

type UpdateAirportResponseObject interface {
	VisitUpdateAirportResponse(w http.ResponseWriter) error
}

type UpdateAirport204Response struct {
}

func (response UpdateAirport204Response) VisitUpdateAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateAirport404Response struct {
}

func (response UpdateAirport404Response) VisitUpdateAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFlightsByAirportRequestObject struct {
	Id int `json:"id"`
}

type ListFlightsByAirportResponseObject interface {
	VisitListFlightsByAirportResponse(w http.ResponseWriter) error
}

type ListFlightsByAirport200JSONResponse []Flight

func (response ListFlightsByAirport200JSONResponse) VisitListFlightsByAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAllFlightsRequestObject struct {
}

type DeleteAllFlightsResponseObject interface {
	VisitDeleteAllFlightsResponse(w http.ResponseWriter) error
}

type DeleteAllFlights204Response struct {
}

func (response DeleteAllFlights204Response) VisitDeleteAllFlightsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListFlightsRequestObject struct {
}

type ListFlightsResponseObject interface {
	VisitListFlightsResponse(w http.ResponseWriter) error
}

type ListFlights200JSONResponse []Flight

func (response ListFlights200JSONResponse) VisitListFlightsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlightRequestObject struct {
	Body *CreateFlightJSONRequestBody
}

type CreateFlightResponseObject interface {
	VisitCreateFlightResponse(w http.ResponseWriter) error
}

type CreateFlight201Response struct {
}

func (response CreateFlight201Response) VisitCreateFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateFlight400Response struct {
}

func (response CreateFlight400Response) VisitCreateFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteFlightRequestObject struct {
	Id int `json:"id"`
}

type DeleteFlightResponseObject interface {
	VisitDeleteFlightResponse(w http.ResponseWriter) error
}

type DeleteFlight204Response struct {
}

func (response DeleteFlight204Response) VisitDeleteFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFlight404Response struct {
}

func (response DeleteFlight404Response) VisitDeleteFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetFlightRequestObject struct {
	Id int `json:"id"`
}

type GetFlightResponseObject interface {
	VisitGetFlightResponse(w http.ResponseWriter) error
}

type GetFlight200JSONResponse Flight

func (response GetFlight200JSONResponse) VisitGetFlightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFlight404Response struct {
}

func (response GetFlight404Response) VisitGetFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateFlightRequestObject struct {
	Id   int `json:"id"`
	Body *UpdateFlightJSONRequestBody
}

type UpdateFlightResponseObject interface {
	VisitUpdateFlightResponse(w http.ResponseWriter) error
}

type UpdateFlight204Response struct {
}

func (response UpdateFlight204Response) VisitUpdateFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateFlight404Response struct {
}

func (response UpdateFlight404Response) VisitUpdateFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(w http.ResponseWriter) error
}

type HealthCheck200JSONResponse struct {
	Ok *bool `json:"ok,omitempty"`
}

func (response HealthCheck200JSONResponse) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete all airports
	// (DELETE /airports)
	DeleteAllAirports(ctx context.Context, request DeleteAllAirportsRequestObject) (DeleteAllAirportsResponseObject, error)
	// List all airports
	// (GET /airports)
	ListAirports(ctx context.Context, request ListAirportsRequestObject) (ListAirportsResponseObject, error)
	// Create a new airport
	// (POST /airports)
	CreateAirport(ctx context.Context, request CreateAirportRequestObject) (CreateAirportResponseObject, error)
	// Delete an airport
	// (DELETE /airports/{id})
	DeleteAirport(ctx context.Context, request DeleteAirportRequestObject) (DeleteAirportResponseObject, error)
	// Get airport by ID
	// (GET /airports/{id})
	GetAirport(ctx context.Context, request GetAirportRequestObject) (GetAirportResponseObject, error)
	// Update airport
	// (PATCH /airports/{id})
	UpdateAirport(ctx context.Context, request UpdateAirportRequestObject) (UpdateAirportResponseObject, error)
	// List flights that depart from or arrive at an airport
	// (GET /airports/{id}/flights)
	ListFlightsByAirport(ctx context.Context, request ListFlightsByAirportRequestObject) (ListFlightsByAirportResponseObject, error)
	// Delete all flights
	// (DELETE /flights)
	DeleteAllFlights(ctx context.Context, request DeleteAllFlightsRequestObject) (DeleteAllFlightsResponseObject, error)
	// List all flights
	// (GET /flights)
	ListFlights(ctx context.Context, request ListFlightsRequestObject) (ListFlightsResponseObject, error)
	// Create a new flight
	// (POST /flights)
	CreateFlight(ctx context.Context, request CreateFlightRequestObject) (CreateFlightResponseObject, error)
	// Delete a flight
	// (DELETE /flights/{id})
	DeleteFlight(ctx context.Context, request DeleteFlightRequestObject) (DeleteFlightResponseObject, error)
	// Get flight by ID
	// (GET /flights/{id})
	GetFlight(ctx context.Context, request GetFlightRequestObject) (GetFlightResponseObject, error)
	// Update flight
	// (PATCH /flights/{id})
	UpdateFlight(ctx context.Context, request UpdateFlightRequestObject) (UpdateFlightResponseObject, error)
	// Health check endpoint
	// (GET /health)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteAllAirports operation middleware
func (sh *strictHandler) DeleteAllAirports(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllAirportsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllAirports(ctx, request.(DeleteAllAirportsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllAirports")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllAirportsResponseObject); ok {
		if err := validResponse.VisitDeleteAllAirportsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAirports operation middleware
func (sh *strictHandler) ListAirports(w http.ResponseWriter, r *http.Request) {
	var request ListAirportsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAirports(ctx, request.(ListAirportsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAirports")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAirportsResponseObject); ok {
		if err := validResponse.VisitListAirportsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAirport operation middleware
func (sh *strictHandler) CreateAirport(w http.ResponseWriter, r *http.Request) {
	var request CreateAirportRequestObject

	var body CreateAirportJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAirport(ctx, request.(CreateAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAirportResponseObject); ok {
		if err := validResponse.VisitCreateAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAirport operation middleware
func (sh *strictHandler) DeleteAirport(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteAirportRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAirport(ctx, request.(DeleteAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAirportResponseObject); ok {
		if err := validResponse.VisitDeleteAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAirport operation middleware
func (sh *strictHandler) GetAirport(w http.ResponseWriter, r *http.Request, id int) {
	var request GetAirportRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAirport(ctx, request.(GetAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAirportResponseObject); ok {
		if err := validResponse.VisitGetAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAirport operation middleware
func (sh *strictHandler) UpdateAirport(w http.ResponseWriter, r *http.Request, id int) {
	var request UpdateAirportRequestObject

	request.Id = id

	var body UpdateAirportJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAirport(ctx, request.(UpdateAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAirportResponseObject); ok {
		if err := validResponse.VisitUpdateAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlightsByAirport operation middleware
func (sh *strictHandler) ListFlightsByAirport(w http.ResponseWriter, r *http.Request, id int) {
	var request ListFlightsByAirportRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlightsByAirport(ctx, request.(ListFlightsByAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlightsByAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightsByAirportResponseObject); ok {
		if err := validResponse.VisitListFlightsByAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAllFlights operation middleware
func (sh *strictHandler) DeleteAllFlights(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllFlightsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllFlights(ctx, request.(DeleteAllFlightsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllFlights")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllFlightsResponseObject); ok {
		if err := validResponse.VisitDeleteAllFlightsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlights operation middleware
func (sh *strictHandler) ListFlights(w http.ResponseWriter, r *http.Request) {
	var request ListFlightsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlights(ctx, request.(ListFlightsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlights")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightsResponseObject); ok {
		if err := validResponse.VisitListFlightsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFlight operation middleware
func (sh *strictHandler) CreateFlight(w http.ResponseWriter, r *http.Request) {
	var request CreateFlightRequestObject

	var body CreateFlightJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFlight(ctx, request.(CreateFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFlightResponseObject); ok {
		if err := validResponse.VisitCreateFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFlight operation middleware
func (sh *strictHandler) DeleteFlight(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteFlightRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFlight(ctx, request.(DeleteFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFlightResponseObject); ok {
		if err := validResponse.VisitDeleteFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFlight operation middleware
func (sh *strictHandler) GetFlight(w http.ResponseWriter, r *http.Request, id int) {
	var request GetFlightRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFlight(ctx, request.(GetFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFlightResponseObject); ok {
		if err := validResponse.VisitGetFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFlight operation middleware
func (sh *strictHandler) UpdateFlight(w http.ResponseWriter, r *http.Request, id int) {
	var request UpdateFlightRequestObject

	request.Id = id

	var body UpdateFlightJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFlight(ctx, request.(UpdateFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFlightResponseObject); ok {
		if err := validResponse.VisitUpdateFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	var request HealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx, request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		if err := validResponse.VisitHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
