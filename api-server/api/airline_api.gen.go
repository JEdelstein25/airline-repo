//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20241128135601-9feb3033b612 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Aircraft defines model for Aircraft.
type Aircraft struct {
	// AircraftType ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	AircraftType AircraftTypeICAOCode `json:"aircraftType"`
	Airline      Airline              `json:"airline"`
	Id           int                  `json:"id"`

	// Registration Registration code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_registration_prefixes.
	Registration AircraftRegistration `json:"registration"`
}

// AircraftID defines model for AircraftID.
type AircraftID = int

// AircraftRegistration Registration code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_registration_prefixes.
type AircraftRegistration = string

// AircraftSpec defines model for AircraftSpec.
type AircraftSpec struct {
	union json.RawMessage
}

// AircraftType defines model for AircraftType.
type AircraftType struct {
	// IcaoCode ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	IcaoCode AircraftTypeICAOCode `json:"icaoCode"`
	Name     string               `json:"name"`
}

// AircraftTypeICAOCode ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
type AircraftTypeICAOCode = string

// Airline defines model for Airline.
type Airline struct {
	// IataCode IATA code for airline
	IataCode AirlineIATACode `json:"iataCode"`
	Id       int             `json:"id"`
	Name     string          `json:"name"`
}

// AirlineIATACode IATA code for airline
type AirlineIATACode = string

// AirlineID defines model for AirlineID.
type AirlineID = int

// AirlineSpec defines model for AirlineSpec.
type AirlineSpec struct {
	union json.RawMessage
}

// Airport defines model for Airport.
type Airport struct {
	Country string `json:"country"`

	// IataCode IATA code for airport
	IataCode AirportIATACode `json:"iataCode"`
	Id       int             `json:"id"`
	Name     string          `json:"name"`
	Point    Point           `json:"point"`
	Region   string          `json:"region"`

	// TimezoneID Tz database ID for the timezone of the airport, such as "America/New_York". See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
	TimezoneID string `json:"timezoneID"`
}

// AirportIATACode IATA code for airport
type AirportIATACode = string

// AirportID defines model for AirportID.
type AirportID = int

// AirportSpec defines model for AirportSpec.
type AirportSpec struct {
	union json.RawMessage
}

// DaysOfWeek defines model for DaysOfWeek.
type DaysOfWeek = []int

// FlightInstance A single flight, either created and synced automatically from a flight schedule or created manually.
type FlightInstance struct {
	Aircraft             *Aircraft           `json:"aircraft,omitempty"`
	AircraftType         AircraftType        `json:"aircraftType"`
	Airline              Airline             `json:"airline"`
	ArrivalDateTime      time.Time           `json:"arrivalDateTime"`
	DepartureDateTime    time.Time           `json:"departureDateTime"`
	DestinationAirport   Airport             `json:"destinationAirport"`
	Id                   int                 `json:"id"`
	Notes                string              `json:"notes"`
	Number               FlightNumber        `json:"number"`
	OriginAirport        Airport             `json:"originAirport"`
	Published            bool                `json:"published"`
	ScheduleID           *int                `json:"scheduleID,omitempty"`
	ScheduleInstanceDate *openapi_types.Date `json:"scheduleInstanceDate,omitempty"`
}

// FlightNumber defines model for FlightNumber.
type FlightNumber = string

// FlightSchedule defines model for FlightSchedule.
type FlightSchedule struct {
	AircraftType AircraftType `json:"aircraftType"`
	Airline      Airline      `json:"airline"`

	// ArrivalTime A local time of day with hours and minutes (e.g., "7:30" or "21:45"), without a date or timezone.
	ArrivalTime TimeOfDay  `json:"arrivalTime"`
	DaysOfWeek  DaysOfWeek `json:"daysOfWeek"`

	// DepartureTime A local time of day with hours and minutes (e.g., "7:30" or "21:45"), without a date or timezone.
	DepartureTime      TimeOfDay          `json:"departureTime"`
	DestinationAirport Airport            `json:"destinationAirport"`
	DistanceMiles      *float64           `json:"distanceMiles,omitempty"`
	EndDate            openapi_types.Date `json:"endDate"`
	Id                 int                `json:"id"`
	Number             FlightNumber       `json:"number"`
	OriginAirport      Airport            `json:"originAirport"`
	Published          bool               `json:"published"`
	StartDate          openapi_types.Date `json:"startDate"`
}

// Point defines model for Point.
type Point struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

// Route defines model for Route.
type Route struct {
	DestinationAirport   Airport  `json:"destinationAirport"`
	DistanceMiles        *float64 `json:"distanceMiles,omitempty"`
	FlightSchedulesCount int      `json:"flightSchedulesCount"`
	OriginAirport        Airport  `json:"originAirport"`
}

// TimeOfDay A local time of day with hours and minutes (e.g., "7:30" or "21:45"), without a date or timezone.
type TimeOfDay = string

// CreateAircraftJSONBody defines parameters for CreateAircraft.
type CreateAircraftJSONBody struct {
	// AircraftType ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	AircraftType AircraftTypeICAOCode `json:"aircraftType"`
	Airline      AirlineSpec          `json:"airline"`

	// Registration Registration code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_registration_prefixes.
	Registration AircraftRegistration `json:"registration"`
}

// UpdateAircraftJSONBody defines parameters for UpdateAircraft.
type UpdateAircraftJSONBody struct {
	// AircraftType ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	AircraftType *AircraftTypeICAOCode `json:"aircraftType,omitempty"`
	Airline      *AirlineSpec          `json:"airline,omitempty"`

	// Registration Registration code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_registration_prefixes.
	Registration *AircraftRegistration `json:"registration,omitempty"`
}

// CreateAirlineJSONBody defines parameters for CreateAirline.
type CreateAirlineJSONBody struct {
	// IataCode IATA code for airline
	IataCode AirlineIATACode `json:"iataCode"`
	Name     string          `json:"name"`
}

// UpdateAirlineJSONBody defines parameters for UpdateAirline.
type UpdateAirlineJSONBody struct {
	// IataCode IATA code for airline
	IataCode *AirlineIATACode `json:"iataCode,omitempty"`
	Name     *string          `json:"name,omitempty"`
}

// CreateAirportJSONBody defines parameters for CreateAirport.
type CreateAirportJSONBody struct {
	// IataCode IATA code for airport
	IataCode AirportIATACode `json:"iataCode"`
}

// UpdateAirportJSONBody defines parameters for UpdateAirport.
type UpdateAirportJSONBody struct {
	// IataCode IATA code for airport
	IataCode *AirportIATACode `json:"iataCode,omitempty"`
}

// CreateFlightInstanceJSONBody defines parameters for CreateFlightInstance.
type CreateFlightInstanceJSONBody struct {
	Aircraft *AircraftSpec `json:"aircraft,omitempty"`

	// AircraftType ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	AircraftType       AircraftTypeICAOCode `json:"aircraftType"`
	Airline            AirlineSpec          `json:"airline"`
	ArrivalDateTime    time.Time            `json:"arrivalDateTime"`
	DepartureDateTime  time.Time            `json:"departureDateTime"`
	DestinationAirport AirportSpec          `json:"destinationAirport"`
	Notes              string               `json:"notes"`
	Number             FlightNumber         `json:"number"`
	OriginAirport      AirportSpec          `json:"originAirport"`
	Published          *bool                `json:"published,omitempty"`
}

// UpdateFlightInstanceJSONBody defines parameters for UpdateFlightInstance.
type UpdateFlightInstanceJSONBody struct {
	Aircraft *AircraftSpec `json:"aircraft,omitempty"`

	// AircraftType ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	AircraftType       *AircraftTypeICAOCode `json:"aircraftType,omitempty"`
	Airline            *AirlineSpec          `json:"airline,omitempty"`
	ArrivalDateTime    *time.Time            `json:"arrivalDateTime,omitempty"`
	DepartureDateTime  *time.Time            `json:"departureDateTime,omitempty"`
	DestinationAirport *AirportSpec          `json:"destinationAirport,omitempty"`
	Notes              *string               `json:"notes,omitempty"`
	Number             *FlightNumber         `json:"number,omitempty"`
	OriginAirport      *AirportSpec          `json:"originAirport,omitempty"`
	Published          *bool                 `json:"published,omitempty"`
}

// CreateFlightScheduleJSONBody defines parameters for CreateFlightSchedule.
type CreateFlightScheduleJSONBody struct {
	// AircraftType ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	AircraftType AircraftTypeICAOCode `json:"aircraftType"`
	Airline      AirlineSpec          `json:"airline"`

	// ArrivalTime A local time of day with hours and minutes (e.g., "7:30" or "21:45"), without a date or timezone.
	ArrivalTime TimeOfDay  `json:"arrivalTime"`
	DaysOfWeek  DaysOfWeek `json:"daysOfWeek"`

	// DepartureTime A local time of day with hours and minutes (e.g., "7:30" or "21:45"), without a date or timezone.
	DepartureTime      TimeOfDay          `json:"departureTime"`
	DestinationAirport AirportSpec        `json:"destinationAirport"`
	EndDate            openapi_types.Date `json:"endDate"`
	Number             FlightNumber       `json:"number"`
	OriginAirport      AirportSpec        `json:"originAirport"`
	Published          *bool              `json:"published,omitempty"`
	StartDate          openapi_types.Date `json:"startDate"`
}

// UpdateFlightScheduleJSONBody defines parameters for UpdateFlightSchedule.
type UpdateFlightScheduleJSONBody struct {
	// AircraftType ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	AircraftType *AircraftTypeICAOCode `json:"aircraftType,omitempty"`
	Airline      *AirlineSpec          `json:"airline,omitempty"`

	// ArrivalTime A local time of day with hours and minutes (e.g., "7:30" or "21:45"), without a date or timezone.
	ArrivalTime *TimeOfDay  `json:"arrivalTime,omitempty"`
	DaysOfWeek  *DaysOfWeek `json:"daysOfWeek,omitempty"`

	// DepartureTime A local time of day with hours and minutes (e.g., "7:30" or "21:45"), without a date or timezone.
	DepartureTime      *TimeOfDay          `json:"departureTime,omitempty"`
	DestinationAirport *AirportSpec        `json:"destinationAirport,omitempty"`
	EndDate            *openapi_types.Date `json:"endDate,omitempty"`
	Number             *FlightNumber       `json:"number,omitempty"`
	OriginAirport      *AirportSpec        `json:"originAirport,omitempty"`
	Published          *bool               `json:"published,omitempty"`
	StartDate          *openapi_types.Date `json:"startDate,omitempty"`
}

// CreateAircraftJSONRequestBody defines body for CreateAircraft for application/json ContentType.
type CreateAircraftJSONRequestBody CreateAircraftJSONBody

// UpdateAircraftJSONRequestBody defines body for UpdateAircraft for application/json ContentType.
type UpdateAircraftJSONRequestBody UpdateAircraftJSONBody

// CreateAirlineJSONRequestBody defines body for CreateAirline for application/json ContentType.
type CreateAirlineJSONRequestBody CreateAirlineJSONBody

// UpdateAirlineJSONRequestBody defines body for UpdateAirline for application/json ContentType.
type UpdateAirlineJSONRequestBody UpdateAirlineJSONBody

// CreateAirportJSONRequestBody defines body for CreateAirport for application/json ContentType.
type CreateAirportJSONRequestBody CreateAirportJSONBody

// UpdateAirportJSONRequestBody defines body for UpdateAirport for application/json ContentType.
type UpdateAirportJSONRequestBody UpdateAirportJSONBody

// CreateFlightInstanceJSONRequestBody defines body for CreateFlightInstance for application/json ContentType.
type CreateFlightInstanceJSONRequestBody CreateFlightInstanceJSONBody

// UpdateFlightInstanceJSONRequestBody defines body for UpdateFlightInstance for application/json ContentType.
type UpdateFlightInstanceJSONRequestBody UpdateFlightInstanceJSONBody

// CreateFlightScheduleJSONRequestBody defines body for CreateFlightSchedule for application/json ContentType.
type CreateFlightScheduleJSONRequestBody CreateFlightScheduleJSONBody

// UpdateFlightScheduleJSONRequestBody defines body for UpdateFlightSchedule for application/json ContentType.
type UpdateFlightScheduleJSONRequestBody UpdateFlightScheduleJSONBody

// AsAircraftID returns the union data inside the AircraftSpec as a AircraftID
func (t AircraftSpec) AsAircraftID() (AircraftID, error) {
	var body AircraftID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAircraftID overwrites any union data inside the AircraftSpec as the provided AircraftID
func (t *AircraftSpec) FromAircraftID(v AircraftID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAircraftID performs a merge with any union data inside the AircraftSpec, using the provided AircraftID
func (t *AircraftSpec) MergeAircraftID(v AircraftID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAircraftRegistration returns the union data inside the AircraftSpec as a AircraftRegistration
func (t AircraftSpec) AsAircraftRegistration() (AircraftRegistration, error) {
	var body AircraftRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAircraftRegistration overwrites any union data inside the AircraftSpec as the provided AircraftRegistration
func (t *AircraftSpec) FromAircraftRegistration(v AircraftRegistration) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAircraftRegistration performs a merge with any union data inside the AircraftSpec, using the provided AircraftRegistration
func (t *AircraftSpec) MergeAircraftRegistration(v AircraftRegistration) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AircraftSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AircraftSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAirlineID returns the union data inside the AirlineSpec as a AirlineID
func (t AirlineSpec) AsAirlineID() (AirlineID, error) {
	var body AirlineID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirlineID overwrites any union data inside the AirlineSpec as the provided AirlineID
func (t *AirlineSpec) FromAirlineID(v AirlineID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirlineID performs a merge with any union data inside the AirlineSpec, using the provided AirlineID
func (t *AirlineSpec) MergeAirlineID(v AirlineID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAirlineIATACode returns the union data inside the AirlineSpec as a AirlineIATACode
func (t AirlineSpec) AsAirlineIATACode() (AirlineIATACode, error) {
	var body AirlineIATACode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirlineIATACode overwrites any union data inside the AirlineSpec as the provided AirlineIATACode
func (t *AirlineSpec) FromAirlineIATACode(v AirlineIATACode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirlineIATACode performs a merge with any union data inside the AirlineSpec, using the provided AirlineIATACode
func (t *AirlineSpec) MergeAirlineIATACode(v AirlineIATACode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AirlineSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AirlineSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAirportID returns the union data inside the AirportSpec as a AirportID
func (t AirportSpec) AsAirportID() (AirportID, error) {
	var body AirportID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirportID overwrites any union data inside the AirportSpec as the provided AirportID
func (t *AirportSpec) FromAirportID(v AirportID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirportID performs a merge with any union data inside the AirportSpec, using the provided AirportID
func (t *AirportSpec) MergeAirportID(v AirportID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAirportIATACode returns the union data inside the AirportSpec as a AirportIATACode
func (t AirportSpec) AsAirportIATACode() (AirportIATACode, error) {
	var body AirportIATACode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirportIATACode overwrites any union data inside the AirportSpec as the provided AirportIATACode
func (t *AirportSpec) FromAirportIATACode(v AirportIATACode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirportIATACode performs a merge with any union data inside the AirportSpec, using the provided AirportIATACode
func (t *AirportSpec) MergeAirportIATACode(v AirportIATACode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AirportSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AirportSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete all aircraft
	// (DELETE /aircraft)
	DeleteAllAircraft(w http.ResponseWriter, r *http.Request)
	// List all aircraft
	// (GET /aircraft)
	ListAircraft(w http.ResponseWriter, r *http.Request)
	// Create a new aircraft
	// (POST /aircraft)
	CreateAircraft(w http.ResponseWriter, r *http.Request)
	// List all aircraft types
	// (GET /aircraft-types)
	ListAircraftTypes(w http.ResponseWriter, r *http.Request)
	// Delete an aircraft
	// (DELETE /aircraft/{aircraftSpec})
	DeleteAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec)
	// Get aircraft by ID or registration
	// (GET /aircraft/{aircraftSpec})
	GetAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec)
	// Update aircraft
	// (PATCH /aircraft/{aircraftSpec})
	UpdateAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec)
	// Delete all airlines
	// (DELETE /airlines)
	DeleteAllAirlines(w http.ResponseWriter, r *http.Request)
	// List all airlines
	// (GET /airlines)
	ListAirlines(w http.ResponseWriter, r *http.Request)
	// Create a new airline
	// (POST /airlines)
	CreateAirline(w http.ResponseWriter, r *http.Request)
	// Delete an airline
	// (DELETE /airlines/{airlineSpec})
	DeleteAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// Get airline by ID or IATA code
	// (GET /airlines/{airlineSpec})
	GetAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// Update airline
	// (PATCH /airlines/{airlineSpec})
	UpdateAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// List all aircraft owned by an airline
	// (GET /airlines/{airlineSpec}/aircraft)
	ListAircraftByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// List flight schedules for an airline
	// (GET /airlines/{airlineSpec}/flight-schedules)
	ListFlightSchedulesByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// Delete all airports
	// (DELETE /airports)
	DeleteAllAirports(w http.ResponseWriter, r *http.Request)
	// List all airports
	// (GET /airports)
	ListAirports(w http.ResponseWriter, r *http.Request)
	// Create a new airport
	// (POST /airports)
	CreateAirport(w http.ResponseWriter, r *http.Request)
	// Delete an airport
	// (DELETE /airports/{airportSpec})
	DeleteAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec)
	// Get airport by ID or IATA code
	// (GET /airports/{airportSpec})
	GetAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec)
	// Update airport
	// (PATCH /airports/{airportSpec})
	UpdateAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec)
	// List flight schedules that depart from or arrive at an airport
	// (GET /airports/{airportSpec}/flight-schedules)
	ListFlightSchedulesByAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec)
	// List all flight instances
	// (GET /flight-instances)
	ListFlightInstances(w http.ResponseWriter, r *http.Request)
	// Create a new single flight instance from manual input, not from a flight schedule
	// (POST /flight-instances)
	CreateFlightInstance(w http.ResponseWriter, r *http.Request)
	// Delete a flight instance created from manual input
	// (DELETE /flight-instances/{id})
	DeleteFlightInstance(w http.ResponseWriter, r *http.Request, id int)

	// (GET /flight-instances/{id})
	GetFlightInstance(w http.ResponseWriter, r *http.Request, id int)

	// (PATCH /flight-instances/{id})
	UpdateFlightInstance(w http.ResponseWriter, r *http.Request, id int)
	// Delete all flight schedules
	// (DELETE /flight-schedules)
	DeleteAllFlightSchedules(w http.ResponseWriter, r *http.Request)
	// List all flight schedules
	// (GET /flight-schedules)
	ListFlightSchedules(w http.ResponseWriter, r *http.Request)
	// Create a new flight schedule
	// (POST /flight-schedules)
	CreateFlightSchedule(w http.ResponseWriter, r *http.Request)
	// Delete a flight schedule
	// (DELETE /flight-schedules/{id})
	DeleteFlightSchedule(w http.ResponseWriter, r *http.Request, id int)
	// Get flight schedule by ID
	// (GET /flight-schedules/{id})
	GetFlightSchedule(w http.ResponseWriter, r *http.Request, id int)
	// Update flight schedule
	// (PATCH /flight-schedules/{id})
	UpdateFlightSchedule(w http.ResponseWriter, r *http.Request, id int)
	// Get flight instances defined by a flight schedule
	// (GET /flight-schedules/{id}/instances)
	ListFlightInstancesForFlightSchedule(w http.ResponseWriter, r *http.Request, id int)
	// Health check endpoint
	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// List all routes
	// (GET /routes)
	ListRoutes(w http.ResponseWriter, r *http.Request)
	// Get route by IATA codes of origin and destination airports
	// (GET /routes/{route})
	GetRoute(w http.ResponseWriter, r *http.Request, route string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteAllAircraft operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllAircraft(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllAircraft(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAircraft operation middleware
func (siw *ServerInterfaceWrapper) ListAircraft(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAircraft(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAircraft operation middleware
func (siw *ServerInterfaceWrapper) CreateAircraft(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAircraft(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAircraftTypes operation middleware
func (siw *ServerInterfaceWrapper) ListAircraftTypes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAircraftTypes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAircraft operation middleware
func (siw *ServerInterfaceWrapper) DeleteAircraft(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "aircraftSpec" -------------
	var aircraftSpec AircraftSpec

	err = runtime.BindStyledParameterWithOptions("simple", "aircraftSpec", r.PathValue("aircraftSpec"), &aircraftSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "aircraftSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAircraft(w, r, aircraftSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAircraft operation middleware
func (siw *ServerInterfaceWrapper) GetAircraft(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "aircraftSpec" -------------
	var aircraftSpec AircraftSpec

	err = runtime.BindStyledParameterWithOptions("simple", "aircraftSpec", r.PathValue("aircraftSpec"), &aircraftSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "aircraftSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAircraft(w, r, aircraftSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAircraft operation middleware
func (siw *ServerInterfaceWrapper) UpdateAircraft(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "aircraftSpec" -------------
	var aircraftSpec AircraftSpec

	err = runtime.BindStyledParameterWithOptions("simple", "aircraftSpec", r.PathValue("aircraftSpec"), &aircraftSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "aircraftSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAircraft(w, r, aircraftSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAllAirlines operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllAirlines(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllAirlines(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAirlines operation middleware
func (siw *ServerInterfaceWrapper) ListAirlines(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAirlines(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAirline operation middleware
func (siw *ServerInterfaceWrapper) CreateAirline(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAirline(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAirline operation middleware
func (siw *ServerInterfaceWrapper) DeleteAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAirline operation middleware
func (siw *ServerInterfaceWrapper) GetAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAirline operation middleware
func (siw *ServerInterfaceWrapper) UpdateAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAircraftByAirline operation middleware
func (siw *ServerInterfaceWrapper) ListAircraftByAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAircraftByAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlightSchedulesByAirline operation middleware
func (siw *ServerInterfaceWrapper) ListFlightSchedulesByAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlightSchedulesByAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAllAirports operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllAirports(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllAirports(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAirports operation middleware
func (siw *ServerInterfaceWrapper) ListAirports(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAirports(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAirport operation middleware
func (siw *ServerInterfaceWrapper) CreateAirport(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAirport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAirport operation middleware
func (siw *ServerInterfaceWrapper) DeleteAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAirport operation middleware
func (siw *ServerInterfaceWrapper) GetAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAirport operation middleware
func (siw *ServerInterfaceWrapper) UpdateAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlightSchedulesByAirport operation middleware
func (siw *ServerInterfaceWrapper) ListFlightSchedulesByAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlightSchedulesByAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlightInstances operation middleware
func (siw *ServerInterfaceWrapper) ListFlightInstances(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlightInstances(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateFlightInstance operation middleware
func (siw *ServerInterfaceWrapper) CreateFlightInstance(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFlightInstance(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFlightInstance operation middleware
func (siw *ServerInterfaceWrapper) DeleteFlightInstance(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFlightInstance(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFlightInstance operation middleware
func (siw *ServerInterfaceWrapper) GetFlightInstance(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlightInstance(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateFlightInstance operation middleware
func (siw *ServerInterfaceWrapper) UpdateFlightInstance(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFlightInstance(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAllFlightSchedules operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllFlightSchedules(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllFlightSchedules(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlightSchedules operation middleware
func (siw *ServerInterfaceWrapper) ListFlightSchedules(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlightSchedules(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateFlightSchedule operation middleware
func (siw *ServerInterfaceWrapper) CreateFlightSchedule(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFlightSchedule(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFlightSchedule operation middleware
func (siw *ServerInterfaceWrapper) DeleteFlightSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFlightSchedule(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFlightSchedule operation middleware
func (siw *ServerInterfaceWrapper) GetFlightSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlightSchedule(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateFlightSchedule operation middleware
func (siw *ServerInterfaceWrapper) UpdateFlightSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFlightSchedule(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlightInstancesForFlightSchedule operation middleware
func (siw *ServerInterfaceWrapper) ListFlightInstancesForFlightSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlightInstancesForFlightSchedule(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListRoutes operation middleware
func (siw *ServerInterfaceWrapper) ListRoutes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRoutes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRoute operation middleware
func (siw *ServerInterfaceWrapper) GetRoute(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "route" -------------
	var route string

	err = runtime.BindStyledParameterWithOptions("simple", "route", r.PathValue("route"), &route, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "route", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoute(w, r, route)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("DELETE "+options.BaseURL+"/aircraft", wrapper.DeleteAllAircraft)
	m.HandleFunc("GET "+options.BaseURL+"/aircraft", wrapper.ListAircraft)
	m.HandleFunc("POST "+options.BaseURL+"/aircraft", wrapper.CreateAircraft)
	m.HandleFunc("GET "+options.BaseURL+"/aircraft-types", wrapper.ListAircraftTypes)
	m.HandleFunc("DELETE "+options.BaseURL+"/aircraft/{aircraftSpec}", wrapper.DeleteAircraft)
	m.HandleFunc("GET "+options.BaseURL+"/aircraft/{aircraftSpec}", wrapper.GetAircraft)
	m.HandleFunc("PATCH "+options.BaseURL+"/aircraft/{aircraftSpec}", wrapper.UpdateAircraft)
	m.HandleFunc("DELETE "+options.BaseURL+"/airlines", wrapper.DeleteAllAirlines)
	m.HandleFunc("GET "+options.BaseURL+"/airlines", wrapper.ListAirlines)
	m.HandleFunc("POST "+options.BaseURL+"/airlines", wrapper.CreateAirline)
	m.HandleFunc("DELETE "+options.BaseURL+"/airlines/{airlineSpec}", wrapper.DeleteAirline)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}", wrapper.GetAirline)
	m.HandleFunc("PATCH "+options.BaseURL+"/airlines/{airlineSpec}", wrapper.UpdateAirline)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}/aircraft", wrapper.ListAircraftByAirline)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}/flight-schedules", wrapper.ListFlightSchedulesByAirline)
	m.HandleFunc("DELETE "+options.BaseURL+"/airports", wrapper.DeleteAllAirports)
	m.HandleFunc("GET "+options.BaseURL+"/airports", wrapper.ListAirports)
	m.HandleFunc("POST "+options.BaseURL+"/airports", wrapper.CreateAirport)
	m.HandleFunc("DELETE "+options.BaseURL+"/airports/{airportSpec}", wrapper.DeleteAirport)
	m.HandleFunc("GET "+options.BaseURL+"/airports/{airportSpec}", wrapper.GetAirport)
	m.HandleFunc("PATCH "+options.BaseURL+"/airports/{airportSpec}", wrapper.UpdateAirport)
	m.HandleFunc("GET "+options.BaseURL+"/airports/{airportSpec}/flight-schedules", wrapper.ListFlightSchedulesByAirport)
	m.HandleFunc("GET "+options.BaseURL+"/flight-instances", wrapper.ListFlightInstances)
	m.HandleFunc("POST "+options.BaseURL+"/flight-instances", wrapper.CreateFlightInstance)
	m.HandleFunc("DELETE "+options.BaseURL+"/flight-instances/{id}", wrapper.DeleteFlightInstance)
	m.HandleFunc("GET "+options.BaseURL+"/flight-instances/{id}", wrapper.GetFlightInstance)
	m.HandleFunc("PATCH "+options.BaseURL+"/flight-instances/{id}", wrapper.UpdateFlightInstance)
	m.HandleFunc("DELETE "+options.BaseURL+"/flight-schedules", wrapper.DeleteAllFlightSchedules)
	m.HandleFunc("GET "+options.BaseURL+"/flight-schedules", wrapper.ListFlightSchedules)
	m.HandleFunc("POST "+options.BaseURL+"/flight-schedules", wrapper.CreateFlightSchedule)
	m.HandleFunc("DELETE "+options.BaseURL+"/flight-schedules/{id}", wrapper.DeleteFlightSchedule)
	m.HandleFunc("GET "+options.BaseURL+"/flight-schedules/{id}", wrapper.GetFlightSchedule)
	m.HandleFunc("PATCH "+options.BaseURL+"/flight-schedules/{id}", wrapper.UpdateFlightSchedule)
	m.HandleFunc("GET "+options.BaseURL+"/flight-schedules/{id}/instances", wrapper.ListFlightInstancesForFlightSchedule)
	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.HealthCheck)
	m.HandleFunc("GET "+options.BaseURL+"/routes", wrapper.ListRoutes)
	m.HandleFunc("GET "+options.BaseURL+"/routes/{route}", wrapper.GetRoute)

	return m
}

type DeleteAllAircraftRequestObject struct {
}

type DeleteAllAircraftResponseObject interface {
	VisitDeleteAllAircraftResponse(w http.ResponseWriter) error
}

type DeleteAllAircraft204Response struct {
}

func (response DeleteAllAircraft204Response) VisitDeleteAllAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListAircraftRequestObject struct {
}

type ListAircraftResponseObject interface {
	VisitListAircraftResponse(w http.ResponseWriter) error
}

type ListAircraft200JSONResponse []Aircraft

func (response ListAircraft200JSONResponse) VisitListAircraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAircraftRequestObject struct {
	Body *CreateAircraftJSONRequestBody
}

type CreateAircraftResponseObject interface {
	VisitCreateAircraftResponse(w http.ResponseWriter) error
}

type CreateAircraft201JSONResponse Aircraft

func (response CreateAircraft201JSONResponse) VisitCreateAircraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAircraft400Response struct {
}

func (response CreateAircraft400Response) VisitCreateAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListAircraftTypesRequestObject struct {
}

type ListAircraftTypesResponseObject interface {
	VisitListAircraftTypesResponse(w http.ResponseWriter) error
}

type ListAircraftTypes200JSONResponse []AircraftType

func (response ListAircraftTypes200JSONResponse) VisitListAircraftTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAircraftRequestObject struct {
	AircraftSpec AircraftSpec `json:"aircraftSpec"`
}

type DeleteAircraftResponseObject interface {
	VisitDeleteAircraftResponse(w http.ResponseWriter) error
}

type DeleteAircraft204Response struct {
}

func (response DeleteAircraft204Response) VisitDeleteAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAircraft404Response struct {
}

func (response DeleteAircraft404Response) VisitDeleteAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAircraftRequestObject struct {
	AircraftSpec AircraftSpec `json:"aircraftSpec"`
}

type GetAircraftResponseObject interface {
	VisitGetAircraftResponse(w http.ResponseWriter) error
}

type GetAircraft200JSONResponse Aircraft

func (response GetAircraft200JSONResponse) VisitGetAircraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAircraft404Response struct {
}

func (response GetAircraft404Response) VisitGetAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateAircraftRequestObject struct {
	AircraftSpec AircraftSpec `json:"aircraftSpec"`
	Body         *UpdateAircraftJSONRequestBody
}

type UpdateAircraftResponseObject interface {
	VisitUpdateAircraftResponse(w http.ResponseWriter) error
}

type UpdateAircraft200JSONResponse Aircraft

func (response UpdateAircraft200JSONResponse) VisitUpdateAircraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAircraft404Response struct {
}

func (response UpdateAircraft404Response) VisitUpdateAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteAllAirlinesRequestObject struct {
}

type DeleteAllAirlinesResponseObject interface {
	VisitDeleteAllAirlinesResponse(w http.ResponseWriter) error
}

type DeleteAllAirlines204Response struct {
}

func (response DeleteAllAirlines204Response) VisitDeleteAllAirlinesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListAirlinesRequestObject struct {
}

type ListAirlinesResponseObject interface {
	VisitListAirlinesResponse(w http.ResponseWriter) error
}

type ListAirlines200JSONResponse []Airline

func (response ListAirlines200JSONResponse) VisitListAirlinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirlineRequestObject struct {
	Body *CreateAirlineJSONRequestBody
}

type CreateAirlineResponseObject interface {
	VisitCreateAirlineResponse(w http.ResponseWriter) error
}

type CreateAirline201JSONResponse Airline

func (response CreateAirline201JSONResponse) VisitCreateAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirline400Response struct {
}

func (response CreateAirline400Response) VisitCreateAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type DeleteAirlineResponseObject interface {
	VisitDeleteAirlineResponse(w http.ResponseWriter) error
}

type DeleteAirline204Response struct {
}

func (response DeleteAirline204Response) VisitDeleteAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAirline404Response struct {
}

func (response DeleteAirline404Response) VisitDeleteAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type GetAirlineResponseObject interface {
	VisitGetAirlineResponse(w http.ResponseWriter) error
}

type GetAirline200JSONResponse Airline

func (response GetAirline200JSONResponse) VisitGetAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAirline404Response struct {
}

func (response GetAirline404Response) VisitGetAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
	Body        *UpdateAirlineJSONRequestBody
}

type UpdateAirlineResponseObject interface {
	VisitUpdateAirlineResponse(w http.ResponseWriter) error
}

type UpdateAirline200JSONResponse Airline

func (response UpdateAirline200JSONResponse) VisitUpdateAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAirline404Response struct {
}

func (response UpdateAirline404Response) VisitUpdateAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListAircraftByAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type ListAircraftByAirlineResponseObject interface {
	VisitListAircraftByAirlineResponse(w http.ResponseWriter) error
}

type ListAircraftByAirline200JSONResponse []Aircraft

func (response ListAircraftByAirline200JSONResponse) VisitListAircraftByAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAircraftByAirline404Response struct {
}

func (response ListAircraftByAirline404Response) VisitListAircraftByAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFlightSchedulesByAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type ListFlightSchedulesByAirlineResponseObject interface {
	VisitListFlightSchedulesByAirlineResponse(w http.ResponseWriter) error
}

type ListFlightSchedulesByAirline200JSONResponse []FlightSchedule

func (response ListFlightSchedulesByAirline200JSONResponse) VisitListFlightSchedulesByAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFlightSchedulesByAirline404Response struct {
}

func (response ListFlightSchedulesByAirline404Response) VisitListFlightSchedulesByAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteAllAirportsRequestObject struct {
}

type DeleteAllAirportsResponseObject interface {
	VisitDeleteAllAirportsResponse(w http.ResponseWriter) error
}

type DeleteAllAirports204Response struct {
}

func (response DeleteAllAirports204Response) VisitDeleteAllAirportsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListAirportsRequestObject struct {
}

type ListAirportsResponseObject interface {
	VisitListAirportsResponse(w http.ResponseWriter) error
}

type ListAirports200JSONResponse []Airport

func (response ListAirports200JSONResponse) VisitListAirportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirportRequestObject struct {
	Body *CreateAirportJSONRequestBody
}

type CreateAirportResponseObject interface {
	VisitCreateAirportResponse(w http.ResponseWriter) error
}

type CreateAirport201JSONResponse Airport

func (response CreateAirport201JSONResponse) VisitCreateAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirport400Response struct {
}

func (response CreateAirport400Response) VisitCreateAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteAirportRequestObject struct {
	AirportSpec AirportSpec `json:"airportSpec"`
}

type DeleteAirportResponseObject interface {
	VisitDeleteAirportResponse(w http.ResponseWriter) error
}

type DeleteAirport204Response struct {
}

func (response DeleteAirport204Response) VisitDeleteAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAirport404Response struct {
}

func (response DeleteAirport404Response) VisitDeleteAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAirportRequestObject struct {
	AirportSpec AirportSpec `json:"airportSpec"`
}

type GetAirportResponseObject interface {
	VisitGetAirportResponse(w http.ResponseWriter) error
}

type GetAirport200JSONResponse Airport

func (response GetAirport200JSONResponse) VisitGetAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAirport404Response struct {
}

func (response GetAirport404Response) VisitGetAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateAirportRequestObject struct {
	AirportSpec AirportSpec `json:"airportSpec"`
	Body        *UpdateAirportJSONRequestBody
}

type UpdateAirportResponseObject interface {
	VisitUpdateAirportResponse(w http.ResponseWriter) error
}

type UpdateAirport200JSONResponse Airport

func (response UpdateAirport200JSONResponse) VisitUpdateAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAirport404Response struct {
}

func (response UpdateAirport404Response) VisitUpdateAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFlightSchedulesByAirportRequestObject struct {
	AirportSpec AirportSpec `json:"airportSpec"`
}

type ListFlightSchedulesByAirportResponseObject interface {
	VisitListFlightSchedulesByAirportResponse(w http.ResponseWriter) error
}

type ListFlightSchedulesByAirport200JSONResponse []FlightSchedule

func (response ListFlightSchedulesByAirport200JSONResponse) VisitListFlightSchedulesByAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFlightSchedulesByAirport404Response struct {
}

func (response ListFlightSchedulesByAirport404Response) VisitListFlightSchedulesByAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFlightInstancesRequestObject struct {
}

type ListFlightInstancesResponseObject interface {
	VisitListFlightInstancesResponse(w http.ResponseWriter) error
}

type ListFlightInstances200JSONResponse []FlightInstance

func (response ListFlightInstances200JSONResponse) VisitListFlightInstancesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlightInstanceRequestObject struct {
	Body *CreateFlightInstanceJSONRequestBody
}

type CreateFlightInstanceResponseObject interface {
	VisitCreateFlightInstanceResponse(w http.ResponseWriter) error
}

type CreateFlightInstance201JSONResponse FlightInstance

func (response CreateFlightInstance201JSONResponse) VisitCreateFlightInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlightInstance400Response struct {
}

func (response CreateFlightInstance400Response) VisitCreateFlightInstanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteFlightInstanceRequestObject struct {
	Id int `json:"id"`
}

type DeleteFlightInstanceResponseObject interface {
	VisitDeleteFlightInstanceResponse(w http.ResponseWriter) error
}

type DeleteFlightInstance204Response struct {
}

func (response DeleteFlightInstance204Response) VisitDeleteFlightInstanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFlightInstance400Response struct {
}

func (response DeleteFlightInstance400Response) VisitDeleteFlightInstanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteFlightInstance404Response struct {
}

func (response DeleteFlightInstance404Response) VisitDeleteFlightInstanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetFlightInstanceRequestObject struct {
	Id int `json:"id"`
}

type GetFlightInstanceResponseObject interface {
	VisitGetFlightInstanceResponse(w http.ResponseWriter) error
}

type GetFlightInstance200JSONResponse FlightInstance

func (response GetFlightInstance200JSONResponse) VisitGetFlightInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFlightInstance404Response struct {
}

func (response GetFlightInstance404Response) VisitGetFlightInstanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateFlightInstanceRequestObject struct {
	Id   int `json:"id"`
	Body *UpdateFlightInstanceJSONRequestBody
}

type UpdateFlightInstanceResponseObject interface {
	VisitUpdateFlightInstanceResponse(w http.ResponseWriter) error
}

type UpdateFlightInstance200JSONResponse FlightInstance

func (response UpdateFlightInstance200JSONResponse) VisitUpdateFlightInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlightInstance400Response struct {
}

func (response UpdateFlightInstance400Response) VisitUpdateFlightInstanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateFlightInstance404Response struct {
}

func (response UpdateFlightInstance404Response) VisitUpdateFlightInstanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteAllFlightSchedulesRequestObject struct {
}

type DeleteAllFlightSchedulesResponseObject interface {
	VisitDeleteAllFlightSchedulesResponse(w http.ResponseWriter) error
}

type DeleteAllFlightSchedules204Response struct {
}

func (response DeleteAllFlightSchedules204Response) VisitDeleteAllFlightSchedulesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListFlightSchedulesRequestObject struct {
}

type ListFlightSchedulesResponseObject interface {
	VisitListFlightSchedulesResponse(w http.ResponseWriter) error
}

type ListFlightSchedules200JSONResponse []FlightSchedule

func (response ListFlightSchedules200JSONResponse) VisitListFlightSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlightScheduleRequestObject struct {
	Body *CreateFlightScheduleJSONRequestBody
}

type CreateFlightScheduleResponseObject interface {
	VisitCreateFlightScheduleResponse(w http.ResponseWriter) error
}

type CreateFlightSchedule201JSONResponse FlightSchedule

func (response CreateFlightSchedule201JSONResponse) VisitCreateFlightScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlightSchedule400Response struct {
}

func (response CreateFlightSchedule400Response) VisitCreateFlightScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteFlightScheduleRequestObject struct {
	Id int `json:"id"`
}

type DeleteFlightScheduleResponseObject interface {
	VisitDeleteFlightScheduleResponse(w http.ResponseWriter) error
}

type DeleteFlightSchedule204Response struct {
}

func (response DeleteFlightSchedule204Response) VisitDeleteFlightScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFlightSchedule404Response struct {
}

func (response DeleteFlightSchedule404Response) VisitDeleteFlightScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetFlightScheduleRequestObject struct {
	Id int `json:"id"`
}

type GetFlightScheduleResponseObject interface {
	VisitGetFlightScheduleResponse(w http.ResponseWriter) error
}

type GetFlightSchedule200JSONResponse FlightSchedule

func (response GetFlightSchedule200JSONResponse) VisitGetFlightScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFlightSchedule404Response struct {
}

func (response GetFlightSchedule404Response) VisitGetFlightScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateFlightScheduleRequestObject struct {
	Id   int `json:"id"`
	Body *UpdateFlightScheduleJSONRequestBody
}

type UpdateFlightScheduleResponseObject interface {
	VisitUpdateFlightScheduleResponse(w http.ResponseWriter) error
}

type UpdateFlightSchedule200JSONResponse FlightSchedule

func (response UpdateFlightSchedule200JSONResponse) VisitUpdateFlightScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlightSchedule404Response struct {
}

func (response UpdateFlightSchedule404Response) VisitUpdateFlightScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFlightInstancesForFlightScheduleRequestObject struct {
	Id int `json:"id"`
}

type ListFlightInstancesForFlightScheduleResponseObject interface {
	VisitListFlightInstancesForFlightScheduleResponse(w http.ResponseWriter) error
}

type ListFlightInstancesForFlightSchedule200JSONResponse []FlightInstance

func (response ListFlightInstancesForFlightSchedule200JSONResponse) VisitListFlightInstancesForFlightScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFlightInstancesForFlightSchedule404Response struct {
}

func (response ListFlightInstancesForFlightSchedule404Response) VisitListFlightInstancesForFlightScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(w http.ResponseWriter) error
}

type HealthCheck200JSONResponse struct {
	Ok *bool `json:"ok,omitempty"`
}

func (response HealthCheck200JSONResponse) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRoutesRequestObject struct {
}

type ListRoutesResponseObject interface {
	VisitListRoutesResponse(w http.ResponseWriter) error
}

type ListRoutes200JSONResponse []Route

func (response ListRoutes200JSONResponse) VisitListRoutesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRouteRequestObject struct {
	Route string `json:"route"`
}

type GetRouteResponseObject interface {
	VisitGetRouteResponse(w http.ResponseWriter) error
}

type GetRoute200JSONResponse Route

func (response GetRoute200JSONResponse) VisitGetRouteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoute404Response struct {
}

func (response GetRoute404Response) VisitGetRouteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete all aircraft
	// (DELETE /aircraft)
	DeleteAllAircraft(ctx context.Context, request DeleteAllAircraftRequestObject) (DeleteAllAircraftResponseObject, error)
	// List all aircraft
	// (GET /aircraft)
	ListAircraft(ctx context.Context, request ListAircraftRequestObject) (ListAircraftResponseObject, error)
	// Create a new aircraft
	// (POST /aircraft)
	CreateAircraft(ctx context.Context, request CreateAircraftRequestObject) (CreateAircraftResponseObject, error)
	// List all aircraft types
	// (GET /aircraft-types)
	ListAircraftTypes(ctx context.Context, request ListAircraftTypesRequestObject) (ListAircraftTypesResponseObject, error)
	// Delete an aircraft
	// (DELETE /aircraft/{aircraftSpec})
	DeleteAircraft(ctx context.Context, request DeleteAircraftRequestObject) (DeleteAircraftResponseObject, error)
	// Get aircraft by ID or registration
	// (GET /aircraft/{aircraftSpec})
	GetAircraft(ctx context.Context, request GetAircraftRequestObject) (GetAircraftResponseObject, error)
	// Update aircraft
	// (PATCH /aircraft/{aircraftSpec})
	UpdateAircraft(ctx context.Context, request UpdateAircraftRequestObject) (UpdateAircraftResponseObject, error)
	// Delete all airlines
	// (DELETE /airlines)
	DeleteAllAirlines(ctx context.Context, request DeleteAllAirlinesRequestObject) (DeleteAllAirlinesResponseObject, error)
	// List all airlines
	// (GET /airlines)
	ListAirlines(ctx context.Context, request ListAirlinesRequestObject) (ListAirlinesResponseObject, error)
	// Create a new airline
	// (POST /airlines)
	CreateAirline(ctx context.Context, request CreateAirlineRequestObject) (CreateAirlineResponseObject, error)
	// Delete an airline
	// (DELETE /airlines/{airlineSpec})
	DeleteAirline(ctx context.Context, request DeleteAirlineRequestObject) (DeleteAirlineResponseObject, error)
	// Get airline by ID or IATA code
	// (GET /airlines/{airlineSpec})
	GetAirline(ctx context.Context, request GetAirlineRequestObject) (GetAirlineResponseObject, error)
	// Update airline
	// (PATCH /airlines/{airlineSpec})
	UpdateAirline(ctx context.Context, request UpdateAirlineRequestObject) (UpdateAirlineResponseObject, error)
	// List all aircraft owned by an airline
	// (GET /airlines/{airlineSpec}/aircraft)
	ListAircraftByAirline(ctx context.Context, request ListAircraftByAirlineRequestObject) (ListAircraftByAirlineResponseObject, error)
	// List flight schedules for an airline
	// (GET /airlines/{airlineSpec}/flight-schedules)
	ListFlightSchedulesByAirline(ctx context.Context, request ListFlightSchedulesByAirlineRequestObject) (ListFlightSchedulesByAirlineResponseObject, error)
	// Delete all airports
	// (DELETE /airports)
	DeleteAllAirports(ctx context.Context, request DeleteAllAirportsRequestObject) (DeleteAllAirportsResponseObject, error)
	// List all airports
	// (GET /airports)
	ListAirports(ctx context.Context, request ListAirportsRequestObject) (ListAirportsResponseObject, error)
	// Create a new airport
	// (POST /airports)
	CreateAirport(ctx context.Context, request CreateAirportRequestObject) (CreateAirportResponseObject, error)
	// Delete an airport
	// (DELETE /airports/{airportSpec})
	DeleteAirport(ctx context.Context, request DeleteAirportRequestObject) (DeleteAirportResponseObject, error)
	// Get airport by ID or IATA code
	// (GET /airports/{airportSpec})
	GetAirport(ctx context.Context, request GetAirportRequestObject) (GetAirportResponseObject, error)
	// Update airport
	// (PATCH /airports/{airportSpec})
	UpdateAirport(ctx context.Context, request UpdateAirportRequestObject) (UpdateAirportResponseObject, error)
	// List flight schedules that depart from or arrive at an airport
	// (GET /airports/{airportSpec}/flight-schedules)
	ListFlightSchedulesByAirport(ctx context.Context, request ListFlightSchedulesByAirportRequestObject) (ListFlightSchedulesByAirportResponseObject, error)
	// List all flight instances
	// (GET /flight-instances)
	ListFlightInstances(ctx context.Context, request ListFlightInstancesRequestObject) (ListFlightInstancesResponseObject, error)
	// Create a new single flight instance from manual input, not from a flight schedule
	// (POST /flight-instances)
	CreateFlightInstance(ctx context.Context, request CreateFlightInstanceRequestObject) (CreateFlightInstanceResponseObject, error)
	// Delete a flight instance created from manual input
	// (DELETE /flight-instances/{id})
	DeleteFlightInstance(ctx context.Context, request DeleteFlightInstanceRequestObject) (DeleteFlightInstanceResponseObject, error)

	// (GET /flight-instances/{id})
	GetFlightInstance(ctx context.Context, request GetFlightInstanceRequestObject) (GetFlightInstanceResponseObject, error)

	// (PATCH /flight-instances/{id})
	UpdateFlightInstance(ctx context.Context, request UpdateFlightInstanceRequestObject) (UpdateFlightInstanceResponseObject, error)
	// Delete all flight schedules
	// (DELETE /flight-schedules)
	DeleteAllFlightSchedules(ctx context.Context, request DeleteAllFlightSchedulesRequestObject) (DeleteAllFlightSchedulesResponseObject, error)
	// List all flight schedules
	// (GET /flight-schedules)
	ListFlightSchedules(ctx context.Context, request ListFlightSchedulesRequestObject) (ListFlightSchedulesResponseObject, error)
	// Create a new flight schedule
	// (POST /flight-schedules)
	CreateFlightSchedule(ctx context.Context, request CreateFlightScheduleRequestObject) (CreateFlightScheduleResponseObject, error)
	// Delete a flight schedule
	// (DELETE /flight-schedules/{id})
	DeleteFlightSchedule(ctx context.Context, request DeleteFlightScheduleRequestObject) (DeleteFlightScheduleResponseObject, error)
	// Get flight schedule by ID
	// (GET /flight-schedules/{id})
	GetFlightSchedule(ctx context.Context, request GetFlightScheduleRequestObject) (GetFlightScheduleResponseObject, error)
	// Update flight schedule
	// (PATCH /flight-schedules/{id})
	UpdateFlightSchedule(ctx context.Context, request UpdateFlightScheduleRequestObject) (UpdateFlightScheduleResponseObject, error)
	// Get flight instances defined by a flight schedule
	// (GET /flight-schedules/{id}/instances)
	ListFlightInstancesForFlightSchedule(ctx context.Context, request ListFlightInstancesForFlightScheduleRequestObject) (ListFlightInstancesForFlightScheduleResponseObject, error)
	// Health check endpoint
	// (GET /health)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
	// List all routes
	// (GET /routes)
	ListRoutes(ctx context.Context, request ListRoutesRequestObject) (ListRoutesResponseObject, error)
	// Get route by IATA codes of origin and destination airports
	// (GET /routes/{route})
	GetRoute(ctx context.Context, request GetRouteRequestObject) (GetRouteResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteAllAircraft operation middleware
func (sh *strictHandler) DeleteAllAircraft(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllAircraftRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllAircraft(ctx, request.(DeleteAllAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllAircraftResponseObject); ok {
		if err := validResponse.VisitDeleteAllAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAircraft operation middleware
func (sh *strictHandler) ListAircraft(w http.ResponseWriter, r *http.Request) {
	var request ListAircraftRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAircraft(ctx, request.(ListAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAircraftResponseObject); ok {
		if err := validResponse.VisitListAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAircraft operation middleware
func (sh *strictHandler) CreateAircraft(w http.ResponseWriter, r *http.Request) {
	var request CreateAircraftRequestObject

	var body CreateAircraftJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAircraft(ctx, request.(CreateAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAircraftResponseObject); ok {
		if err := validResponse.VisitCreateAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAircraftTypes operation middleware
func (sh *strictHandler) ListAircraftTypes(w http.ResponseWriter, r *http.Request) {
	var request ListAircraftTypesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAircraftTypes(ctx, request.(ListAircraftTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAircraftTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAircraftTypesResponseObject); ok {
		if err := validResponse.VisitListAircraftTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAircraft operation middleware
func (sh *strictHandler) DeleteAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec) {
	var request DeleteAircraftRequestObject

	request.AircraftSpec = aircraftSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAircraft(ctx, request.(DeleteAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAircraftResponseObject); ok {
		if err := validResponse.VisitDeleteAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAircraft operation middleware
func (sh *strictHandler) GetAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec) {
	var request GetAircraftRequestObject

	request.AircraftSpec = aircraftSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAircraft(ctx, request.(GetAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAircraftResponseObject); ok {
		if err := validResponse.VisitGetAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAircraft operation middleware
func (sh *strictHandler) UpdateAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec) {
	var request UpdateAircraftRequestObject

	request.AircraftSpec = aircraftSpec

	var body UpdateAircraftJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAircraft(ctx, request.(UpdateAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAircraftResponseObject); ok {
		if err := validResponse.VisitUpdateAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAllAirlines operation middleware
func (sh *strictHandler) DeleteAllAirlines(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllAirlinesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllAirlines(ctx, request.(DeleteAllAirlinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllAirlines")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllAirlinesResponseObject); ok {
		if err := validResponse.VisitDeleteAllAirlinesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAirlines operation middleware
func (sh *strictHandler) ListAirlines(w http.ResponseWriter, r *http.Request) {
	var request ListAirlinesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAirlines(ctx, request.(ListAirlinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAirlines")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAirlinesResponseObject); ok {
		if err := validResponse.VisitListAirlinesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAirline operation middleware
func (sh *strictHandler) CreateAirline(w http.ResponseWriter, r *http.Request) {
	var request CreateAirlineRequestObject

	var body CreateAirlineJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAirline(ctx, request.(CreateAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAirlineResponseObject); ok {
		if err := validResponse.VisitCreateAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAirline operation middleware
func (sh *strictHandler) DeleteAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request DeleteAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAirline(ctx, request.(DeleteAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAirlineResponseObject); ok {
		if err := validResponse.VisitDeleteAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAirline operation middleware
func (sh *strictHandler) GetAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request GetAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAirline(ctx, request.(GetAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAirlineResponseObject); ok {
		if err := validResponse.VisitGetAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAirline operation middleware
func (sh *strictHandler) UpdateAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request UpdateAirlineRequestObject

	request.AirlineSpec = airlineSpec

	var body UpdateAirlineJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAirline(ctx, request.(UpdateAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAirlineResponseObject); ok {
		if err := validResponse.VisitUpdateAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAircraftByAirline operation middleware
func (sh *strictHandler) ListAircraftByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request ListAircraftByAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAircraftByAirline(ctx, request.(ListAircraftByAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAircraftByAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAircraftByAirlineResponseObject); ok {
		if err := validResponse.VisitListAircraftByAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlightSchedulesByAirline operation middleware
func (sh *strictHandler) ListFlightSchedulesByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request ListFlightSchedulesByAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlightSchedulesByAirline(ctx, request.(ListFlightSchedulesByAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlightSchedulesByAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightSchedulesByAirlineResponseObject); ok {
		if err := validResponse.VisitListFlightSchedulesByAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAllAirports operation middleware
func (sh *strictHandler) DeleteAllAirports(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllAirportsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllAirports(ctx, request.(DeleteAllAirportsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllAirports")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllAirportsResponseObject); ok {
		if err := validResponse.VisitDeleteAllAirportsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAirports operation middleware
func (sh *strictHandler) ListAirports(w http.ResponseWriter, r *http.Request) {
	var request ListAirportsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAirports(ctx, request.(ListAirportsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAirports")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAirportsResponseObject); ok {
		if err := validResponse.VisitListAirportsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAirport operation middleware
func (sh *strictHandler) CreateAirport(w http.ResponseWriter, r *http.Request) {
	var request CreateAirportRequestObject

	var body CreateAirportJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAirport(ctx, request.(CreateAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAirportResponseObject); ok {
		if err := validResponse.VisitCreateAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAirport operation middleware
func (sh *strictHandler) DeleteAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec) {
	var request DeleteAirportRequestObject

	request.AirportSpec = airportSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAirport(ctx, request.(DeleteAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAirportResponseObject); ok {
		if err := validResponse.VisitDeleteAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAirport operation middleware
func (sh *strictHandler) GetAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec) {
	var request GetAirportRequestObject

	request.AirportSpec = airportSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAirport(ctx, request.(GetAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAirportResponseObject); ok {
		if err := validResponse.VisitGetAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAirport operation middleware
func (sh *strictHandler) UpdateAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec) {
	var request UpdateAirportRequestObject

	request.AirportSpec = airportSpec

	var body UpdateAirportJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAirport(ctx, request.(UpdateAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAirportResponseObject); ok {
		if err := validResponse.VisitUpdateAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlightSchedulesByAirport operation middleware
func (sh *strictHandler) ListFlightSchedulesByAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec) {
	var request ListFlightSchedulesByAirportRequestObject

	request.AirportSpec = airportSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlightSchedulesByAirport(ctx, request.(ListFlightSchedulesByAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlightSchedulesByAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightSchedulesByAirportResponseObject); ok {
		if err := validResponse.VisitListFlightSchedulesByAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlightInstances operation middleware
func (sh *strictHandler) ListFlightInstances(w http.ResponseWriter, r *http.Request) {
	var request ListFlightInstancesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlightInstances(ctx, request.(ListFlightInstancesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlightInstances")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightInstancesResponseObject); ok {
		if err := validResponse.VisitListFlightInstancesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFlightInstance operation middleware
func (sh *strictHandler) CreateFlightInstance(w http.ResponseWriter, r *http.Request) {
	var request CreateFlightInstanceRequestObject

	var body CreateFlightInstanceJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFlightInstance(ctx, request.(CreateFlightInstanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFlightInstance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFlightInstanceResponseObject); ok {
		if err := validResponse.VisitCreateFlightInstanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFlightInstance operation middleware
func (sh *strictHandler) DeleteFlightInstance(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteFlightInstanceRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFlightInstance(ctx, request.(DeleteFlightInstanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFlightInstance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFlightInstanceResponseObject); ok {
		if err := validResponse.VisitDeleteFlightInstanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFlightInstance operation middleware
func (sh *strictHandler) GetFlightInstance(w http.ResponseWriter, r *http.Request, id int) {
	var request GetFlightInstanceRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFlightInstance(ctx, request.(GetFlightInstanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFlightInstance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFlightInstanceResponseObject); ok {
		if err := validResponse.VisitGetFlightInstanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFlightInstance operation middleware
func (sh *strictHandler) UpdateFlightInstance(w http.ResponseWriter, r *http.Request, id int) {
	var request UpdateFlightInstanceRequestObject

	request.Id = id

	var body UpdateFlightInstanceJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFlightInstance(ctx, request.(UpdateFlightInstanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFlightInstance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFlightInstanceResponseObject); ok {
		if err := validResponse.VisitUpdateFlightInstanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAllFlightSchedules operation middleware
func (sh *strictHandler) DeleteAllFlightSchedules(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllFlightSchedulesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllFlightSchedules(ctx, request.(DeleteAllFlightSchedulesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllFlightSchedules")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllFlightSchedulesResponseObject); ok {
		if err := validResponse.VisitDeleteAllFlightSchedulesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlightSchedules operation middleware
func (sh *strictHandler) ListFlightSchedules(w http.ResponseWriter, r *http.Request) {
	var request ListFlightSchedulesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlightSchedules(ctx, request.(ListFlightSchedulesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlightSchedules")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightSchedulesResponseObject); ok {
		if err := validResponse.VisitListFlightSchedulesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFlightSchedule operation middleware
func (sh *strictHandler) CreateFlightSchedule(w http.ResponseWriter, r *http.Request) {
	var request CreateFlightScheduleRequestObject

	var body CreateFlightScheduleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFlightSchedule(ctx, request.(CreateFlightScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFlightSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFlightScheduleResponseObject); ok {
		if err := validResponse.VisitCreateFlightScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFlightSchedule operation middleware
func (sh *strictHandler) DeleteFlightSchedule(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteFlightScheduleRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFlightSchedule(ctx, request.(DeleteFlightScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFlightSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFlightScheduleResponseObject); ok {
		if err := validResponse.VisitDeleteFlightScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFlightSchedule operation middleware
func (sh *strictHandler) GetFlightSchedule(w http.ResponseWriter, r *http.Request, id int) {
	var request GetFlightScheduleRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFlightSchedule(ctx, request.(GetFlightScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFlightSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFlightScheduleResponseObject); ok {
		if err := validResponse.VisitGetFlightScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFlightSchedule operation middleware
func (sh *strictHandler) UpdateFlightSchedule(w http.ResponseWriter, r *http.Request, id int) {
	var request UpdateFlightScheduleRequestObject

	request.Id = id

	var body UpdateFlightScheduleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFlightSchedule(ctx, request.(UpdateFlightScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFlightSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFlightScheduleResponseObject); ok {
		if err := validResponse.VisitUpdateFlightScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlightInstancesForFlightSchedule operation middleware
func (sh *strictHandler) ListFlightInstancesForFlightSchedule(w http.ResponseWriter, r *http.Request, id int) {
	var request ListFlightInstancesForFlightScheduleRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlightInstancesForFlightSchedule(ctx, request.(ListFlightInstancesForFlightScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlightInstancesForFlightSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightInstancesForFlightScheduleResponseObject); ok {
		if err := validResponse.VisitListFlightInstancesForFlightScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	var request HealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx, request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		if err := validResponse.VisitHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRoutes operation middleware
func (sh *strictHandler) ListRoutes(w http.ResponseWriter, r *http.Request) {
	var request ListRoutesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRoutes(ctx, request.(ListRoutesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRoutes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRoutesResponseObject); ok {
		if err := validResponse.VisitListRoutesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRoute operation middleware
func (sh *strictHandler) GetRoute(w http.ResponseWriter, r *http.Request, route string) {
	var request GetRouteRequestObject

	request.Route = route

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoute(ctx, request.(GetRouteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoute")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRouteResponseObject); ok {
		if err := validResponse.VisitGetRouteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
