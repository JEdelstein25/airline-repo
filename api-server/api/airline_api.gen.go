//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20241128135601-9feb3033b612 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Airline defines model for Airline.
type Airline struct {
	// IataCode IATA code for airline
	IataCode AirlineIATACode `json:"iataCode"`
	Id       int             `json:"id"`
	Name     string          `json:"name"`
}

// AirlineIATACode IATA code for airline
type AirlineIATACode = string

// AirlineSpec defines model for AirlineSpec.
type AirlineSpec struct {
	union json.RawMessage
}

// AirlineSpec0 defines model for .
type AirlineSpec0 = int

// Airport defines model for Airport.
type Airport struct {
	Country string `json:"country"`

	// IataCode IATA code for airport
	IataCode AirportIATACode `json:"iataCode"`
	Id       int             `json:"id"`
	Name     string          `json:"name"`
	Point    Point           `json:"point"`
	Region   string          `json:"region"`
}

// AirportIATACode IATA code for airport
type AirportIATACode = string

// AirportID defines model for AirportID.
type AirportID = int

// AirportSpec defines model for AirportSpec.
type AirportSpec struct {
	union json.RawMessage
}

// Flight defines model for Flight.
type Flight struct {
	Airline            Airline      `json:"airline"`
	DestinationAirport Airport      `json:"destinationAirport"`
	DistanceMiles      *float64     `json:"distanceMiles,omitempty"`
	Id                 int          `json:"id"`
	Number             FlightNumber `json:"number"`
	OriginAirport      Airport      `json:"originAirport"`
	Published          bool         `json:"published"`
}

// FlightNumber defines model for FlightNumber.
type FlightNumber = string

// Point defines model for Point.
type Point struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

// Route defines model for Route.
type Route struct {
	DestinationAirport Airport  `json:"destinationAirport"`
	DistanceMiles      *float64 `json:"distanceMiles,omitempty"`
	FlightsCount       int      `json:"flightsCount"`
	OriginAirport      Airport  `json:"originAirport"`
}

// AirportSpecParam defines model for airportSpecParam.
type AirportSpecParam = AirportSpec

// CreateAirlineJSONBody defines parameters for CreateAirline.
type CreateAirlineJSONBody struct {
	// IataCode IATA code for airline
	IataCode AirlineIATACode `json:"iataCode"`
	Name     string          `json:"name"`
}

// UpdateAirlineJSONBody defines parameters for UpdateAirline.
type UpdateAirlineJSONBody struct {
	// IataCode IATA code for airline
	IataCode *AirlineIATACode `json:"iataCode,omitempty"`
	Name     *string          `json:"name,omitempty"`
}

// CreateAirportJSONBody defines parameters for CreateAirport.
type CreateAirportJSONBody struct {
	// IataCode IATA code for airport
	IataCode AirportIATACode `json:"iataCode"`
}

// UpdateAirportJSONBody defines parameters for UpdateAirport.
type UpdateAirportJSONBody struct {
	// IataCode IATA code for airport
	IataCode *AirportIATACode `json:"iataCode,omitempty"`
}

// CreateFlightJSONBody defines parameters for CreateFlight.
type CreateFlightJSONBody struct {
	Airline            AirlineSpec  `json:"airline"`
	DestinationAirport AirportSpec  `json:"destinationAirport"`
	Number             FlightNumber `json:"number"`
	OriginAirport      AirportSpec  `json:"originAirport"`
	Published          *bool        `json:"published,omitempty"`
}

// UpdateFlightJSONBody defines parameters for UpdateFlight.
type UpdateFlightJSONBody struct {
	Airline            *AirlineSpec  `json:"airline,omitempty"`
	DestinationAirport *AirportSpec  `json:"destinationAirport,omitempty"`
	Number             *FlightNumber `json:"number,omitempty"`
	OriginAirport      *AirportSpec  `json:"originAirport,omitempty"`
	Published          *bool         `json:"published,omitempty"`
}

// CreateAirlineJSONRequestBody defines body for CreateAirline for application/json ContentType.
type CreateAirlineJSONRequestBody CreateAirlineJSONBody

// UpdateAirlineJSONRequestBody defines body for UpdateAirline for application/json ContentType.
type UpdateAirlineJSONRequestBody UpdateAirlineJSONBody

// CreateAirportJSONRequestBody defines body for CreateAirport for application/json ContentType.
type CreateAirportJSONRequestBody CreateAirportJSONBody

// UpdateAirportJSONRequestBody defines body for UpdateAirport for application/json ContentType.
type UpdateAirportJSONRequestBody UpdateAirportJSONBody

// CreateFlightJSONRequestBody defines body for CreateFlight for application/json ContentType.
type CreateFlightJSONRequestBody CreateFlightJSONBody

// UpdateFlightJSONRequestBody defines body for UpdateFlight for application/json ContentType.
type UpdateFlightJSONRequestBody UpdateFlightJSONBody

// AsAirlineSpec0 returns the union data inside the AirlineSpec as a AirlineSpec0
func (t AirlineSpec) AsAirlineSpec0() (AirlineSpec0, error) {
	var body AirlineSpec0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirlineSpec0 overwrites any union data inside the AirlineSpec as the provided AirlineSpec0
func (t *AirlineSpec) FromAirlineSpec0(v AirlineSpec0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirlineSpec0 performs a merge with any union data inside the AirlineSpec, using the provided AirlineSpec0
func (t *AirlineSpec) MergeAirlineSpec0(v AirlineSpec0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAirlineIATACode returns the union data inside the AirlineSpec as a AirlineIATACode
func (t AirlineSpec) AsAirlineIATACode() (AirlineIATACode, error) {
	var body AirlineIATACode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirlineIATACode overwrites any union data inside the AirlineSpec as the provided AirlineIATACode
func (t *AirlineSpec) FromAirlineIATACode(v AirlineIATACode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirlineIATACode performs a merge with any union data inside the AirlineSpec, using the provided AirlineIATACode
func (t *AirlineSpec) MergeAirlineIATACode(v AirlineIATACode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AirlineSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AirlineSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAirportID returns the union data inside the AirportSpec as a AirportID
func (t AirportSpec) AsAirportID() (AirportID, error) {
	var body AirportID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirportID overwrites any union data inside the AirportSpec as the provided AirportID
func (t *AirportSpec) FromAirportID(v AirportID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirportID performs a merge with any union data inside the AirportSpec, using the provided AirportID
func (t *AirportSpec) MergeAirportID(v AirportID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAirportIATACode returns the union data inside the AirportSpec as a AirportIATACode
func (t AirportSpec) AsAirportIATACode() (AirportIATACode, error) {
	var body AirportIATACode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirportIATACode overwrites any union data inside the AirportSpec as the provided AirportIATACode
func (t *AirportSpec) FromAirportIATACode(v AirportIATACode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirportIATACode performs a merge with any union data inside the AirportSpec, using the provided AirportIATACode
func (t *AirportSpec) MergeAirportIATACode(v AirportIATACode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AirportSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AirportSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete all airlines
	// (DELETE /airlines)
	DeleteAllAirlines(w http.ResponseWriter, r *http.Request)
	// List all airlines
	// (GET /airlines)
	ListAirlines(w http.ResponseWriter, r *http.Request)
	// Create a new airline
	// (POST /airlines)
	CreateAirline(w http.ResponseWriter, r *http.Request)
	// Delete an airline
	// (DELETE /airlines/{airlineSpec})
	DeleteAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// Get airline by ID or IATA code
	// (GET /airlines/{airlineSpec})
	GetAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// Update airline
	// (PATCH /airlines/{airlineSpec})
	UpdateAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// List flights for an airline
	// (GET /airlines/{airlineSpec}/flights)
	ListFlightsByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// Delete all airports
	// (DELETE /airports)
	DeleteAllAirports(w http.ResponseWriter, r *http.Request)
	// List all airports
	// (GET /airports)
	ListAirports(w http.ResponseWriter, r *http.Request)
	// Create a new airport
	// (POST /airports)
	CreateAirport(w http.ResponseWriter, r *http.Request)
	// Delete an airport
	// (DELETE /airports/{airportSpec})
	DeleteAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpecParam)
	// Get airport by ID or IATA code
	// (GET /airports/{airportSpec})
	GetAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpecParam)
	// Update airport
	// (PATCH /airports/{airportSpec})
	UpdateAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpecParam)
	// List flights that depart from or arrive at an airport
	// (GET /airports/{airportSpec}/flights)
	ListFlightsByAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpecParam)
	// Delete all flights
	// (DELETE /flights)
	DeleteAllFlights(w http.ResponseWriter, r *http.Request)
	// List all flights
	// (GET /flights)
	ListFlights(w http.ResponseWriter, r *http.Request)
	// Create a new flight
	// (POST /flights)
	CreateFlight(w http.ResponseWriter, r *http.Request)
	// Delete a flight
	// (DELETE /flights/{id})
	DeleteFlight(w http.ResponseWriter, r *http.Request, id int)
	// Get flight by ID
	// (GET /flights/{id})
	GetFlight(w http.ResponseWriter, r *http.Request, id int)
	// Update flight
	// (PATCH /flights/{id})
	UpdateFlight(w http.ResponseWriter, r *http.Request, id int)
	// Health check endpoint
	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// List all routes
	// (GET /routes)
	ListRoutes(w http.ResponseWriter, r *http.Request)
	// Get route by IATA codes of origin and destination airports
	// (GET /routes/{route})
	GetRoute(w http.ResponseWriter, r *http.Request, route string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteAllAirlines operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllAirlines(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllAirlines(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAirlines operation middleware
func (siw *ServerInterfaceWrapper) ListAirlines(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAirlines(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAirline operation middleware
func (siw *ServerInterfaceWrapper) CreateAirline(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAirline(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAirline operation middleware
func (siw *ServerInterfaceWrapper) DeleteAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAirline operation middleware
func (siw *ServerInterfaceWrapper) GetAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAirline operation middleware
func (siw *ServerInterfaceWrapper) UpdateAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlightsByAirline operation middleware
func (siw *ServerInterfaceWrapper) ListFlightsByAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlightsByAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAllAirports operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllAirports(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllAirports(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAirports operation middleware
func (siw *ServerInterfaceWrapper) ListAirports(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAirports(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAirport operation middleware
func (siw *ServerInterfaceWrapper) CreateAirport(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAirport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAirport operation middleware
func (siw *ServerInterfaceWrapper) DeleteAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpecParam

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAirport operation middleware
func (siw *ServerInterfaceWrapper) GetAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpecParam

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAirport operation middleware
func (siw *ServerInterfaceWrapper) UpdateAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpecParam

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlightsByAirport operation middleware
func (siw *ServerInterfaceWrapper) ListFlightsByAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpecParam

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlightsByAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAllFlights operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllFlights(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllFlights(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlights operation middleware
func (siw *ServerInterfaceWrapper) ListFlights(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlights(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateFlight operation middleware
func (siw *ServerInterfaceWrapper) CreateFlight(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFlight(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFlight operation middleware
func (siw *ServerInterfaceWrapper) DeleteFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFlight(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFlight operation middleware
func (siw *ServerInterfaceWrapper) GetFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlight(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateFlight operation middleware
func (siw *ServerInterfaceWrapper) UpdateFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFlight(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListRoutes operation middleware
func (siw *ServerInterfaceWrapper) ListRoutes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRoutes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRoute operation middleware
func (siw *ServerInterfaceWrapper) GetRoute(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "route" -------------
	var route string

	err = runtime.BindStyledParameterWithOptions("simple", "route", r.PathValue("route"), &route, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "route", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoute(w, r, route)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("DELETE "+options.BaseURL+"/airlines", wrapper.DeleteAllAirlines)
	m.HandleFunc("GET "+options.BaseURL+"/airlines", wrapper.ListAirlines)
	m.HandleFunc("POST "+options.BaseURL+"/airlines", wrapper.CreateAirline)
	m.HandleFunc("DELETE "+options.BaseURL+"/airlines/{airlineSpec}", wrapper.DeleteAirline)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}", wrapper.GetAirline)
	m.HandleFunc("PATCH "+options.BaseURL+"/airlines/{airlineSpec}", wrapper.UpdateAirline)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}/flights", wrapper.ListFlightsByAirline)
	m.HandleFunc("DELETE "+options.BaseURL+"/airports", wrapper.DeleteAllAirports)
	m.HandleFunc("GET "+options.BaseURL+"/airports", wrapper.ListAirports)
	m.HandleFunc("POST "+options.BaseURL+"/airports", wrapper.CreateAirport)
	m.HandleFunc("DELETE "+options.BaseURL+"/airports/{airportSpec}", wrapper.DeleteAirport)
	m.HandleFunc("GET "+options.BaseURL+"/airports/{airportSpec}", wrapper.GetAirport)
	m.HandleFunc("PATCH "+options.BaseURL+"/airports/{airportSpec}", wrapper.UpdateAirport)
	m.HandleFunc("GET "+options.BaseURL+"/airports/{airportSpec}/flights", wrapper.ListFlightsByAirport)
	m.HandleFunc("DELETE "+options.BaseURL+"/flights", wrapper.DeleteAllFlights)
	m.HandleFunc("GET "+options.BaseURL+"/flights", wrapper.ListFlights)
	m.HandleFunc("POST "+options.BaseURL+"/flights", wrapper.CreateFlight)
	m.HandleFunc("DELETE "+options.BaseURL+"/flights/{id}", wrapper.DeleteFlight)
	m.HandleFunc("GET "+options.BaseURL+"/flights/{id}", wrapper.GetFlight)
	m.HandleFunc("PATCH "+options.BaseURL+"/flights/{id}", wrapper.UpdateFlight)
	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.HealthCheck)
	m.HandleFunc("GET "+options.BaseURL+"/routes", wrapper.ListRoutes)
	m.HandleFunc("GET "+options.BaseURL+"/routes/{route}", wrapper.GetRoute)

	return m
}

type DeleteAllAirlinesRequestObject struct {
}

type DeleteAllAirlinesResponseObject interface {
	VisitDeleteAllAirlinesResponse(w http.ResponseWriter) error
}

type DeleteAllAirlines204Response struct {
}

func (response DeleteAllAirlines204Response) VisitDeleteAllAirlinesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListAirlinesRequestObject struct {
}

type ListAirlinesResponseObject interface {
	VisitListAirlinesResponse(w http.ResponseWriter) error
}

type ListAirlines200JSONResponse []Airline

func (response ListAirlines200JSONResponse) VisitListAirlinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirlineRequestObject struct {
	Body *CreateAirlineJSONRequestBody
}

type CreateAirlineResponseObject interface {
	VisitCreateAirlineResponse(w http.ResponseWriter) error
}

type CreateAirline201JSONResponse Airline

func (response CreateAirline201JSONResponse) VisitCreateAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirline400Response struct {
}

func (response CreateAirline400Response) VisitCreateAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type DeleteAirlineResponseObject interface {
	VisitDeleteAirlineResponse(w http.ResponseWriter) error
}

type DeleteAirline204Response struct {
}

func (response DeleteAirline204Response) VisitDeleteAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAirline404Response struct {
}

func (response DeleteAirline404Response) VisitDeleteAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type GetAirlineResponseObject interface {
	VisitGetAirlineResponse(w http.ResponseWriter) error
}

type GetAirline200JSONResponse Airline

func (response GetAirline200JSONResponse) VisitGetAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAirline404Response struct {
}

func (response GetAirline404Response) VisitGetAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
	Body        *UpdateAirlineJSONRequestBody
}

type UpdateAirlineResponseObject interface {
	VisitUpdateAirlineResponse(w http.ResponseWriter) error
}

type UpdateAirline200JSONResponse Airline

func (response UpdateAirline200JSONResponse) VisitUpdateAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAirline404Response struct {
}

func (response UpdateAirline404Response) VisitUpdateAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFlightsByAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type ListFlightsByAirlineResponseObject interface {
	VisitListFlightsByAirlineResponse(w http.ResponseWriter) error
}

type ListFlightsByAirline200JSONResponse []Flight

func (response ListFlightsByAirline200JSONResponse) VisitListFlightsByAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFlightsByAirline404Response struct {
}

func (response ListFlightsByAirline404Response) VisitListFlightsByAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteAllAirportsRequestObject struct {
}

type DeleteAllAirportsResponseObject interface {
	VisitDeleteAllAirportsResponse(w http.ResponseWriter) error
}

type DeleteAllAirports204Response struct {
}

func (response DeleteAllAirports204Response) VisitDeleteAllAirportsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListAirportsRequestObject struct {
}

type ListAirportsResponseObject interface {
	VisitListAirportsResponse(w http.ResponseWriter) error
}

type ListAirports200JSONResponse []Airport

func (response ListAirports200JSONResponse) VisitListAirportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirportRequestObject struct {
	Body *CreateAirportJSONRequestBody
}

type CreateAirportResponseObject interface {
	VisitCreateAirportResponse(w http.ResponseWriter) error
}

type CreateAirport201JSONResponse Airport

func (response CreateAirport201JSONResponse) VisitCreateAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirport400Response struct {
}

func (response CreateAirport400Response) VisitCreateAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteAirportRequestObject struct {
	AirportSpec AirportSpecParam `json:"airportSpec"`
}

type DeleteAirportResponseObject interface {
	VisitDeleteAirportResponse(w http.ResponseWriter) error
}

type DeleteAirport204Response struct {
}

func (response DeleteAirport204Response) VisitDeleteAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAirport404Response struct {
}

func (response DeleteAirport404Response) VisitDeleteAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAirportRequestObject struct {
	AirportSpec AirportSpecParam `json:"airportSpec"`
}

type GetAirportResponseObject interface {
	VisitGetAirportResponse(w http.ResponseWriter) error
}

type GetAirport200JSONResponse Airport

func (response GetAirport200JSONResponse) VisitGetAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAirport404Response struct {
}

func (response GetAirport404Response) VisitGetAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateAirportRequestObject struct {
	AirportSpec AirportSpecParam `json:"airportSpec"`
	Body        *UpdateAirportJSONRequestBody
}

type UpdateAirportResponseObject interface {
	VisitUpdateAirportResponse(w http.ResponseWriter) error
}

type UpdateAirport200JSONResponse Airport

func (response UpdateAirport200JSONResponse) VisitUpdateAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAirport404Response struct {
}

func (response UpdateAirport404Response) VisitUpdateAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFlightsByAirportRequestObject struct {
	AirportSpec AirportSpecParam `json:"airportSpec"`
}

type ListFlightsByAirportResponseObject interface {
	VisitListFlightsByAirportResponse(w http.ResponseWriter) error
}

type ListFlightsByAirport200JSONResponse []Flight

func (response ListFlightsByAirport200JSONResponse) VisitListFlightsByAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFlightsByAirport404Response struct {
}

func (response ListFlightsByAirport404Response) VisitListFlightsByAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteAllFlightsRequestObject struct {
}

type DeleteAllFlightsResponseObject interface {
	VisitDeleteAllFlightsResponse(w http.ResponseWriter) error
}

type DeleteAllFlights204Response struct {
}

func (response DeleteAllFlights204Response) VisitDeleteAllFlightsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListFlightsRequestObject struct {
}

type ListFlightsResponseObject interface {
	VisitListFlightsResponse(w http.ResponseWriter) error
}

type ListFlights200JSONResponse []Flight

func (response ListFlights200JSONResponse) VisitListFlightsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlightRequestObject struct {
	Body *CreateFlightJSONRequestBody
}

type CreateFlightResponseObject interface {
	VisitCreateFlightResponse(w http.ResponseWriter) error
}

type CreateFlight201JSONResponse Flight

func (response CreateFlight201JSONResponse) VisitCreateFlightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlight400Response struct {
}

func (response CreateFlight400Response) VisitCreateFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteFlightRequestObject struct {
	Id int `json:"id"`
}

type DeleteFlightResponseObject interface {
	VisitDeleteFlightResponse(w http.ResponseWriter) error
}

type DeleteFlight204Response struct {
}

func (response DeleteFlight204Response) VisitDeleteFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFlight404Response struct {
}

func (response DeleteFlight404Response) VisitDeleteFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetFlightRequestObject struct {
	Id int `json:"id"`
}

type GetFlightResponseObject interface {
	VisitGetFlightResponse(w http.ResponseWriter) error
}

type GetFlight200JSONResponse Flight

func (response GetFlight200JSONResponse) VisitGetFlightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFlight404Response struct {
}

func (response GetFlight404Response) VisitGetFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateFlightRequestObject struct {
	Id   int `json:"id"`
	Body *UpdateFlightJSONRequestBody
}

type UpdateFlightResponseObject interface {
	VisitUpdateFlightResponse(w http.ResponseWriter) error
}

type UpdateFlight200JSONResponse Flight

func (response UpdateFlight200JSONResponse) VisitUpdateFlightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlight404Response struct {
}

func (response UpdateFlight404Response) VisitUpdateFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(w http.ResponseWriter) error
}

type HealthCheck200JSONResponse struct {
	Ok *bool `json:"ok,omitempty"`
}

func (response HealthCheck200JSONResponse) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRoutesRequestObject struct {
}

type ListRoutesResponseObject interface {
	VisitListRoutesResponse(w http.ResponseWriter) error
}

type ListRoutes200JSONResponse []Route

func (response ListRoutes200JSONResponse) VisitListRoutesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRouteRequestObject struct {
	Route string `json:"route"`
}

type GetRouteResponseObject interface {
	VisitGetRouteResponse(w http.ResponseWriter) error
}

type GetRoute200JSONResponse Route

func (response GetRoute200JSONResponse) VisitGetRouteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoute404Response struct {
}

func (response GetRoute404Response) VisitGetRouteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete all airlines
	// (DELETE /airlines)
	DeleteAllAirlines(ctx context.Context, request DeleteAllAirlinesRequestObject) (DeleteAllAirlinesResponseObject, error)
	// List all airlines
	// (GET /airlines)
	ListAirlines(ctx context.Context, request ListAirlinesRequestObject) (ListAirlinesResponseObject, error)
	// Create a new airline
	// (POST /airlines)
	CreateAirline(ctx context.Context, request CreateAirlineRequestObject) (CreateAirlineResponseObject, error)
	// Delete an airline
	// (DELETE /airlines/{airlineSpec})
	DeleteAirline(ctx context.Context, request DeleteAirlineRequestObject) (DeleteAirlineResponseObject, error)
	// Get airline by ID or IATA code
	// (GET /airlines/{airlineSpec})
	GetAirline(ctx context.Context, request GetAirlineRequestObject) (GetAirlineResponseObject, error)
	// Update airline
	// (PATCH /airlines/{airlineSpec})
	UpdateAirline(ctx context.Context, request UpdateAirlineRequestObject) (UpdateAirlineResponseObject, error)
	// List flights for an airline
	// (GET /airlines/{airlineSpec}/flights)
	ListFlightsByAirline(ctx context.Context, request ListFlightsByAirlineRequestObject) (ListFlightsByAirlineResponseObject, error)
	// Delete all airports
	// (DELETE /airports)
	DeleteAllAirports(ctx context.Context, request DeleteAllAirportsRequestObject) (DeleteAllAirportsResponseObject, error)
	// List all airports
	// (GET /airports)
	ListAirports(ctx context.Context, request ListAirportsRequestObject) (ListAirportsResponseObject, error)
	// Create a new airport
	// (POST /airports)
	CreateAirport(ctx context.Context, request CreateAirportRequestObject) (CreateAirportResponseObject, error)
	// Delete an airport
	// (DELETE /airports/{airportSpec})
	DeleteAirport(ctx context.Context, request DeleteAirportRequestObject) (DeleteAirportResponseObject, error)
	// Get airport by ID or IATA code
	// (GET /airports/{airportSpec})
	GetAirport(ctx context.Context, request GetAirportRequestObject) (GetAirportResponseObject, error)
	// Update airport
	// (PATCH /airports/{airportSpec})
	UpdateAirport(ctx context.Context, request UpdateAirportRequestObject) (UpdateAirportResponseObject, error)
	// List flights that depart from or arrive at an airport
	// (GET /airports/{airportSpec}/flights)
	ListFlightsByAirport(ctx context.Context, request ListFlightsByAirportRequestObject) (ListFlightsByAirportResponseObject, error)
	// Delete all flights
	// (DELETE /flights)
	DeleteAllFlights(ctx context.Context, request DeleteAllFlightsRequestObject) (DeleteAllFlightsResponseObject, error)
	// List all flights
	// (GET /flights)
	ListFlights(ctx context.Context, request ListFlightsRequestObject) (ListFlightsResponseObject, error)
	// Create a new flight
	// (POST /flights)
	CreateFlight(ctx context.Context, request CreateFlightRequestObject) (CreateFlightResponseObject, error)
	// Delete a flight
	// (DELETE /flights/{id})
	DeleteFlight(ctx context.Context, request DeleteFlightRequestObject) (DeleteFlightResponseObject, error)
	// Get flight by ID
	// (GET /flights/{id})
	GetFlight(ctx context.Context, request GetFlightRequestObject) (GetFlightResponseObject, error)
	// Update flight
	// (PATCH /flights/{id})
	UpdateFlight(ctx context.Context, request UpdateFlightRequestObject) (UpdateFlightResponseObject, error)
	// Health check endpoint
	// (GET /health)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
	// List all routes
	// (GET /routes)
	ListRoutes(ctx context.Context, request ListRoutesRequestObject) (ListRoutesResponseObject, error)
	// Get route by IATA codes of origin and destination airports
	// (GET /routes/{route})
	GetRoute(ctx context.Context, request GetRouteRequestObject) (GetRouteResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteAllAirlines operation middleware
func (sh *strictHandler) DeleteAllAirlines(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllAirlinesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllAirlines(ctx, request.(DeleteAllAirlinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllAirlines")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllAirlinesResponseObject); ok {
		if err := validResponse.VisitDeleteAllAirlinesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAirlines operation middleware
func (sh *strictHandler) ListAirlines(w http.ResponseWriter, r *http.Request) {
	var request ListAirlinesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAirlines(ctx, request.(ListAirlinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAirlines")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAirlinesResponseObject); ok {
		if err := validResponse.VisitListAirlinesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAirline operation middleware
func (sh *strictHandler) CreateAirline(w http.ResponseWriter, r *http.Request) {
	var request CreateAirlineRequestObject

	var body CreateAirlineJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAirline(ctx, request.(CreateAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAirlineResponseObject); ok {
		if err := validResponse.VisitCreateAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAirline operation middleware
func (sh *strictHandler) DeleteAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request DeleteAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAirline(ctx, request.(DeleteAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAirlineResponseObject); ok {
		if err := validResponse.VisitDeleteAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAirline operation middleware
func (sh *strictHandler) GetAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request GetAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAirline(ctx, request.(GetAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAirlineResponseObject); ok {
		if err := validResponse.VisitGetAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAirline operation middleware
func (sh *strictHandler) UpdateAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request UpdateAirlineRequestObject

	request.AirlineSpec = airlineSpec

	var body UpdateAirlineJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAirline(ctx, request.(UpdateAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAirlineResponseObject); ok {
		if err := validResponse.VisitUpdateAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlightsByAirline operation middleware
func (sh *strictHandler) ListFlightsByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request ListFlightsByAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlightsByAirline(ctx, request.(ListFlightsByAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlightsByAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightsByAirlineResponseObject); ok {
		if err := validResponse.VisitListFlightsByAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAllAirports operation middleware
func (sh *strictHandler) DeleteAllAirports(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllAirportsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllAirports(ctx, request.(DeleteAllAirportsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllAirports")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllAirportsResponseObject); ok {
		if err := validResponse.VisitDeleteAllAirportsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAirports operation middleware
func (sh *strictHandler) ListAirports(w http.ResponseWriter, r *http.Request) {
	var request ListAirportsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAirports(ctx, request.(ListAirportsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAirports")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAirportsResponseObject); ok {
		if err := validResponse.VisitListAirportsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAirport operation middleware
func (sh *strictHandler) CreateAirport(w http.ResponseWriter, r *http.Request) {
	var request CreateAirportRequestObject

	var body CreateAirportJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAirport(ctx, request.(CreateAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAirportResponseObject); ok {
		if err := validResponse.VisitCreateAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAirport operation middleware
func (sh *strictHandler) DeleteAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpecParam) {
	var request DeleteAirportRequestObject

	request.AirportSpec = airportSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAirport(ctx, request.(DeleteAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAirportResponseObject); ok {
		if err := validResponse.VisitDeleteAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAirport operation middleware
func (sh *strictHandler) GetAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpecParam) {
	var request GetAirportRequestObject

	request.AirportSpec = airportSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAirport(ctx, request.(GetAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAirportResponseObject); ok {
		if err := validResponse.VisitGetAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAirport operation middleware
func (sh *strictHandler) UpdateAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpecParam) {
	var request UpdateAirportRequestObject

	request.AirportSpec = airportSpec

	var body UpdateAirportJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAirport(ctx, request.(UpdateAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAirportResponseObject); ok {
		if err := validResponse.VisitUpdateAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlightsByAirport operation middleware
func (sh *strictHandler) ListFlightsByAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpecParam) {
	var request ListFlightsByAirportRequestObject

	request.AirportSpec = airportSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlightsByAirport(ctx, request.(ListFlightsByAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlightsByAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightsByAirportResponseObject); ok {
		if err := validResponse.VisitListFlightsByAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAllFlights operation middleware
func (sh *strictHandler) DeleteAllFlights(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllFlightsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllFlights(ctx, request.(DeleteAllFlightsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllFlights")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllFlightsResponseObject); ok {
		if err := validResponse.VisitDeleteAllFlightsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlights operation middleware
func (sh *strictHandler) ListFlights(w http.ResponseWriter, r *http.Request) {
	var request ListFlightsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlights(ctx, request.(ListFlightsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlights")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightsResponseObject); ok {
		if err := validResponse.VisitListFlightsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFlight operation middleware
func (sh *strictHandler) CreateFlight(w http.ResponseWriter, r *http.Request) {
	var request CreateFlightRequestObject

	var body CreateFlightJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFlight(ctx, request.(CreateFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFlightResponseObject); ok {
		if err := validResponse.VisitCreateFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFlight operation middleware
func (sh *strictHandler) DeleteFlight(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteFlightRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFlight(ctx, request.(DeleteFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFlightResponseObject); ok {
		if err := validResponse.VisitDeleteFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFlight operation middleware
func (sh *strictHandler) GetFlight(w http.ResponseWriter, r *http.Request, id int) {
	var request GetFlightRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFlight(ctx, request.(GetFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFlightResponseObject); ok {
		if err := validResponse.VisitGetFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFlight operation middleware
func (sh *strictHandler) UpdateFlight(w http.ResponseWriter, r *http.Request, id int) {
	var request UpdateFlightRequestObject

	request.Id = id

	var body UpdateFlightJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFlight(ctx, request.(UpdateFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFlightResponseObject); ok {
		if err := validResponse.VisitUpdateFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	var request HealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx, request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		if err := validResponse.VisitHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRoutes operation middleware
func (sh *strictHandler) ListRoutes(w http.ResponseWriter, r *http.Request) {
	var request ListRoutesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRoutes(ctx, request.(ListRoutesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRoutes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRoutesResponseObject); ok {
		if err := validResponse.VisitListRoutesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRoute operation middleware
func (sh *strictHandler) GetRoute(w http.ResponseWriter, r *http.Request, route string) {
	var request GetRouteRequestObject

	request.Route = route

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoute(ctx, request.(GetRouteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoute")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRouteResponseObject); ok {
		if err := validResponse.VisitGetRouteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
