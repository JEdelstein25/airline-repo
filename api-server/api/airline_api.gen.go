//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20241128135601-9feb3033b612 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	zonedtime "github.com/stellora/airline/api-server/zonedtime"
)

// Aircraft defines model for Aircraft.
type Aircraft struct {
	// AircraftType ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	AircraftType AircraftTypeICAOCode `json:"aircraftType"`
	Airline      Airline              `json:"airline"`
	Id           int                  `json:"id"`

	// Registration Registration code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_registration_prefixes.
	Registration AircraftRegistration `json:"registration"`
}

// AircraftID defines model for AircraftID.
type AircraftID = int

// AircraftRegistration Registration code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_registration_prefixes.
type AircraftRegistration = string

// AircraftSpec defines model for AircraftSpec.
type AircraftSpec struct {
	union json.RawMessage
}

// AircraftType defines model for AircraftType.
type AircraftType struct {
	// IcaoCode ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	IcaoCode AircraftTypeICAOCode `json:"icaoCode"`
	Name     string               `json:"name"`
}

// AircraftTypeICAOCode ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
type AircraftTypeICAOCode = string

// Airline defines model for Airline.
type Airline struct {
	// IataCode IATA code for airline
	IataCode AirlineIATACode `json:"iataCode"`
	Id       int             `json:"id"`
	Name     string          `json:"name"`
}

// AirlineIATACode IATA code for airline
type AirlineIATACode = string

// AirlineID defines model for AirlineID.
type AirlineID = int

// AirlineSpec defines model for AirlineSpec.
type AirlineSpec struct {
	union json.RawMessage
}

// Airport defines model for Airport.
type Airport struct {
	Country string `json:"country"`

	// IataCode IATA code for airport
	IataCode AirportIATACode `json:"iataCode"`
	Id       int             `json:"id"`
	Name     string          `json:"name"`
	Point    Point           `json:"point"`
	Region   string          `json:"region"`

	// TimezoneID Tz database ID for the timezone of the airport, such as "America/New_York". See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
	TimezoneID string `json:"timezoneID"`
}

// AirportIATACode IATA code for airport
type AirportIATACode = string

// AirportID defines model for AirportID.
type AirportID = int

// AirportSpec defines model for AirportSpec.
type AirportSpec struct {
	union json.RawMessage
}

// DaysOfWeek defines model for DaysOfWeek.
type DaysOfWeek = []int

// Fleet A fleet is a set of aircraft (owned by the same airline) with common characteristics.
type Fleet struct {
	Airline Airline `json:"airline"`

	// Code A short identifier for the fleet that is unique within the airline.
	Code        FleetCode `json:"code"`
	Description string    `json:"description"`

	// Id A numeric identifier for the fleet that is globally unique.
	Id FleetID `json:"id"`
}

// FleetCode A short identifier for the fleet that is unique within the airline.
type FleetCode = string

// FleetID A numeric identifier for the fleet that is globally unique.
type FleetID = int

// FleetSpec defines model for FleetSpec.
type FleetSpec struct {
	union json.RawMessage
}

// Flight A single flight, either created and synced automatically from a schedule or created manually.
type Flight struct {
	Aircraft *Aircraft `json:"aircraft,omitempty"`
	Airline  Airline   `json:"airline"`

	// ArrivalDateTime An [RFC 9557](https://www.rfc-editor.org/rfc/rfc9557.html) date-time string, with a time zone name, such as "2021-11-07T00:45[America/Los_Angeles]" or "2021-11-07T00:45-07:00[America/Los_Angeles]".
	ArrivalDateTime ZonedDateTime `json:"arrivalDateTime"`

	// DepartureDateTime An [RFC 9557](https://www.rfc-editor.org/rfc/rfc9557.html) date-time string, with a time zone name, such as "2021-11-07T00:45[America/Los_Angeles]" or "2021-11-07T00:45-07:00[America/Los_Angeles]".
	DepartureDateTime  ZonedDateTime `json:"departureDateTime"`
	DestinationAirport Airport       `json:"destinationAirport"`
	DistanceMiles      float64       `json:"distanceMiles"`

	// Fleet A fleet is a set of aircraft (owned by the same airline) with common characteristics.
	Fleet         Fleet        `json:"fleet"`
	Id            int          `json:"id"`
	Notes         string       `json:"notes"`
	Number        FlightNumber `json:"number"`
	OriginAirport Airport      `json:"originAirport"`
	Published     bool         `json:"published"`
	ScheduleID    *int         `json:"scheduleID,omitempty"`

	// ScheduleInstanceDate A date in YYYY-MM-DD format, with no timezone (timezone-naive).
	ScheduleInstanceDate *LocalDate `json:"scheduleInstanceDate,omitempty"`
}

// FlightNumber defines model for FlightNumber.
type FlightNumber = string

// Itinerary defines model for Itinerary.
type Itinerary struct {
	Flights []Flight `json:"flights"`

	// Id A globally unique numeric identifier for an itinerary.
	Id         ItineraryID `json:"id"`
	Passengers []Passenger `json:"passengers"`

	// RecordID A globally unique record locator code for an itinerary.
	RecordID RecordLocator `json:"recordID"`
}

// ItineraryID A globally unique numeric identifier for an itinerary.
type ItineraryID = int

// ItinerarySpec defines model for ItinerarySpec.
type ItinerarySpec struct {
	union json.RawMessage
}

// ItinerarySpecs defines model for ItinerarySpecs.
type ItinerarySpecs struct {
	// Id A globally unique numeric identifier for an itinerary.
	Id ItineraryID `json:"id"`

	// RecordID A globally unique record locator code for an itinerary.
	RecordID RecordLocator `json:"recordID"`
}

// LocalDate A date in YYYY-MM-DD format, with no timezone (timezone-naive).
type LocalDate = string

// Passenger defines model for Passenger.
type Passenger struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// Point defines model for Point.
type Point struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

// RecordLocator A globally unique record locator code for an itinerary.
type RecordLocator = string

// Route defines model for Route.
type Route struct {
	DestinationAirport Airport `json:"destinationAirport"`
	DistanceMiles      float64 `json:"distanceMiles"`
	OriginAirport      Airport `json:"originAirport"`
	SchedulesCount     int     `json:"schedulesCount"`
}

// Schedule defines model for Schedule.
type Schedule struct {
	Airline    Airline    `json:"airline"`
	DaysOfWeek DaysOfWeek `json:"daysOfWeek"`

	// DepartureTime A local time of day with hours and minutes (e.g., "7:30" or "21:45"), without a date or timezone.
	DepartureTime      TimeOfDay `json:"departureTime"`
	DestinationAirport Airport   `json:"destinationAirport"`
	DistanceMiles      float64   `json:"distanceMiles"`
	DurationSec        int       `json:"durationSec"`

	// EndDate A date in YYYY-MM-DD format, with no timezone (timezone-naive).
	EndDate LocalDate `json:"endDate"`

	// Fleet A fleet is a set of aircraft (owned by the same airline) with common characteristics.
	Fleet         Fleet        `json:"fleet"`
	Id            int          `json:"id"`
	Number        FlightNumber `json:"number"`
	OriginAirport Airport      `json:"originAirport"`
	Published     bool         `json:"published"`

	// StartDate A date in YYYY-MM-DD format, with no timezone (timezone-naive).
	StartDate LocalDate `json:"startDate"`
}

// SeatAssignment defines model for SeatAssignment.
type SeatAssignment struct {
	FlightID  int            `json:"flightID"`
	Id        int            `json:"id"`
	Itinerary ItinerarySpecs `json:"itinerary"`
	Passenger Passenger      `json:"passenger"`
	Seat      SeatNumber     `json:"seat"`
}

// SeatNumber defines model for SeatNumber.
type SeatNumber = string

// TimeOfDay A local time of day with hours and minutes (e.g., "7:30" or "21:45"), without a date or timezone.
type TimeOfDay = string

// ZonedDateTime An [RFC 9557](https://www.rfc-editor.org/rfc/rfc9557.html) date-time string, with a time zone name, such as "2021-11-07T00:45[America/Los_Angeles]" or "2021-11-07T00:45-07:00[America/Los_Angeles]".
type ZonedDateTime = zonedtime.ZonedTime

// RouteSpec defines model for routeSpec.
type RouteSpec = string

// CreateAircraftJSONBody defines parameters for CreateAircraft.
type CreateAircraftJSONBody struct {
	// AircraftType ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	AircraftType AircraftTypeICAOCode `json:"aircraftType"`
	Airline      AirlineSpec          `json:"airline"`

	// Registration Registration code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_registration_prefixes.
	Registration AircraftRegistration `json:"registration"`
}

// UpdateAircraftJSONBody defines parameters for UpdateAircraft.
type UpdateAircraftJSONBody struct {
	// AircraftType ICAO aircraft type code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_type_designators.
	AircraftType *AircraftTypeICAOCode `json:"aircraftType,omitempty"`
	Airline      *AirlineSpec          `json:"airline,omitempty"`

	// Registration Registration code for an aircraft. See https://en.wikipedia.org/wiki/List_of_aircraft_registration_prefixes.
	Registration *AircraftRegistration `json:"registration,omitempty"`
}

// CreateAirlineJSONBody defines parameters for CreateAirline.
type CreateAirlineJSONBody struct {
	// IataCode IATA code for airline
	IataCode AirlineIATACode `json:"iataCode"`
	Name     string          `json:"name"`
}

// UpdateAirlineJSONBody defines parameters for UpdateAirline.
type UpdateAirlineJSONBody struct {
	// IataCode IATA code for airline
	IataCode *AirlineIATACode `json:"iataCode,omitempty"`
	Name     *string          `json:"name,omitempty"`
}

// CreateFleetJSONBody defines parameters for CreateFleet.
type CreateFleetJSONBody struct {
	// Code A short identifier for the fleet that is unique within the airline.
	Code        FleetCode `json:"code"`
	Description string    `json:"description"`
}

// UpdateFleetJSONBody defines parameters for UpdateFleet.
type UpdateFleetJSONBody struct {
	// Code A short identifier for the fleet that is unique within the airline.
	Code        *FleetCode `json:"code,omitempty"`
	Description *string    `json:"description,omitempty"`
}

// CreateAirportJSONBody defines parameters for CreateAirport.
type CreateAirportJSONBody struct {
	// IataCode IATA code for airport
	IataCode AirportIATACode `json:"iataCode"`
}

// UpdateAirportJSONBody defines parameters for UpdateAirport.
type UpdateAirportJSONBody struct {
	// IataCode IATA code for airport
	IataCode *AirportIATACode `json:"iataCode,omitempty"`
}

// CreateFlightJSONBody defines parameters for CreateFlight.
type CreateFlightJSONBody struct {
	Aircraft *AircraftSpec `json:"aircraft,omitempty"`
	Airline  AirlineSpec   `json:"airline"`

	// ArrivalDateTime An [RFC 9557](https://www.rfc-editor.org/rfc/rfc9557.html) date-time string, with a time zone name, such as "2021-11-07T00:45[America/Los_Angeles]" or "2021-11-07T00:45-07:00[America/Los_Angeles]".
	ArrivalDateTime ZonedDateTime `json:"arrivalDateTime"`

	// DepartureDateTime An [RFC 9557](https://www.rfc-editor.org/rfc/rfc9557.html) date-time string, with a time zone name, such as "2021-11-07T00:45[America/Los_Angeles]" or "2021-11-07T00:45-07:00[America/Los_Angeles]".
	DepartureDateTime  ZonedDateTime `json:"departureDateTime"`
	DestinationAirport AirportSpec   `json:"destinationAirport"`
	Fleet              FleetSpec     `json:"fleet"`
	Notes              string        `json:"notes"`
	Number             FlightNumber  `json:"number"`
	OriginAirport      AirportSpec   `json:"originAirport"`
	Published          *bool         `json:"published,omitempty"`
}

// CreateSeatAssignmentJSONBody defines parameters for CreateSeatAssignment.
type CreateSeatAssignmentJSONBody struct {
	// ItineraryID A globally unique numeric identifier for an itinerary.
	ItineraryID ItineraryID `json:"itineraryID"`
	PassengerID int         `json:"passengerID"`
	Seat        SeatNumber  `json:"seat"`
}

// UpdateFlightJSONBody defines parameters for UpdateFlight.
type UpdateFlightJSONBody struct {
	Aircraft *AircraftSpec `json:"aircraft,omitempty"`

	// ArrivalDateTime An [RFC 9557](https://www.rfc-editor.org/rfc/rfc9557.html) date-time string, with a time zone name, such as "2021-11-07T00:45[America/Los_Angeles]" or "2021-11-07T00:45-07:00[America/Los_Angeles]".
	ArrivalDateTime *ZonedDateTime `json:"arrivalDateTime,omitempty"`

	// DepartureDateTime An [RFC 9557](https://www.rfc-editor.org/rfc/rfc9557.html) date-time string, with a time zone name, such as "2021-11-07T00:45[America/Los_Angeles]" or "2021-11-07T00:45-07:00[America/Los_Angeles]".
	DepartureDateTime  *ZonedDateTime `json:"departureDateTime,omitempty"`
	DestinationAirport *AirportSpec   `json:"destinationAirport,omitempty"`
	Fleet              *FleetSpec     `json:"fleet,omitempty"`
	Notes              *string        `json:"notes,omitempty"`
	Number             *FlightNumber  `json:"number,omitempty"`
	OriginAirport      *AirportSpec   `json:"originAirport,omitempty"`
	Published          *bool          `json:"published,omitempty"`
}

// CreateItineraryJSONBody defines parameters for CreateItinerary.
type CreateItineraryJSONBody struct {
	FlightIDs    []int `json:"flightIDs"`
	PassengerIDs []int `json:"passengerIDs"`
}

// CreatePassengerJSONBody defines parameters for CreatePassenger.
type CreatePassengerJSONBody struct {
	Name string `json:"name"`
}

// UpdatePassengerJSONBody defines parameters for UpdatePassenger.
type UpdatePassengerJSONBody struct {
	Name *string `json:"name,omitempty"`
}

// CreateScheduleJSONBody defines parameters for CreateSchedule.
type CreateScheduleJSONBody struct {
	Airline    AirlineSpec `json:"airline"`
	DaysOfWeek DaysOfWeek  `json:"daysOfWeek"`

	// DepartureTime A local time of day with hours and minutes (e.g., "7:30" or "21:45"), without a date or timezone.
	DepartureTime      TimeOfDay   `json:"departureTime"`
	DestinationAirport AirportSpec `json:"destinationAirport"`
	DurationSec        int         `json:"durationSec"`

	// EndDate A date in YYYY-MM-DD format, with no timezone (timezone-naive).
	EndDate       LocalDate    `json:"endDate"`
	Fleet         FleetSpec    `json:"fleet"`
	Number        FlightNumber `json:"number"`
	OriginAirport AirportSpec  `json:"originAirport"`
	Published     *bool        `json:"published,omitempty"`

	// StartDate A date in YYYY-MM-DD format, with no timezone (timezone-naive).
	StartDate LocalDate `json:"startDate"`
}

// UpdateScheduleJSONBody defines parameters for UpdateSchedule.
type UpdateScheduleJSONBody struct {
	DaysOfWeek *DaysOfWeek `json:"daysOfWeek,omitempty"`

	// DepartureTime A local time of day with hours and minutes (e.g., "7:30" or "21:45"), without a date or timezone.
	DepartureTime      *TimeOfDay   `json:"departureTime,omitempty"`
	DestinationAirport *AirportSpec `json:"destinationAirport,omitempty"`
	DurationSec        *int         `json:"durationSec,omitempty"`

	// EndDate A date in YYYY-MM-DD format, with no timezone (timezone-naive).
	EndDate       *LocalDate    `json:"endDate,omitempty"`
	Fleet         *FleetSpec    `json:"fleet,omitempty"`
	Number        *FlightNumber `json:"number,omitempty"`
	OriginAirport *AirportSpec  `json:"originAirport,omitempty"`
	Published     *bool         `json:"published,omitempty"`

	// StartDate A date in YYYY-MM-DD format, with no timezone (timezone-naive).
	StartDate *LocalDate `json:"startDate,omitempty"`
}

// CreateAircraftJSONRequestBody defines body for CreateAircraft for application/json ContentType.
type CreateAircraftJSONRequestBody CreateAircraftJSONBody

// UpdateAircraftJSONRequestBody defines body for UpdateAircraft for application/json ContentType.
type UpdateAircraftJSONRequestBody UpdateAircraftJSONBody

// CreateAirlineJSONRequestBody defines body for CreateAirline for application/json ContentType.
type CreateAirlineJSONRequestBody CreateAirlineJSONBody

// UpdateAirlineJSONRequestBody defines body for UpdateAirline for application/json ContentType.
type UpdateAirlineJSONRequestBody UpdateAirlineJSONBody

// CreateFleetJSONRequestBody defines body for CreateFleet for application/json ContentType.
type CreateFleetJSONRequestBody CreateFleetJSONBody

// UpdateFleetJSONRequestBody defines body for UpdateFleet for application/json ContentType.
type UpdateFleetJSONRequestBody UpdateFleetJSONBody

// CreateAirportJSONRequestBody defines body for CreateAirport for application/json ContentType.
type CreateAirportJSONRequestBody CreateAirportJSONBody

// UpdateAirportJSONRequestBody defines body for UpdateAirport for application/json ContentType.
type UpdateAirportJSONRequestBody UpdateAirportJSONBody

// CreateFlightJSONRequestBody defines body for CreateFlight for application/json ContentType.
type CreateFlightJSONRequestBody CreateFlightJSONBody

// CreateSeatAssignmentJSONRequestBody defines body for CreateSeatAssignment for application/json ContentType.
type CreateSeatAssignmentJSONRequestBody CreateSeatAssignmentJSONBody

// UpdateFlightJSONRequestBody defines body for UpdateFlight for application/json ContentType.
type UpdateFlightJSONRequestBody UpdateFlightJSONBody

// CreateItineraryJSONRequestBody defines body for CreateItinerary for application/json ContentType.
type CreateItineraryJSONRequestBody CreateItineraryJSONBody

// CreatePassengerJSONRequestBody defines body for CreatePassenger for application/json ContentType.
type CreatePassengerJSONRequestBody CreatePassengerJSONBody

// UpdatePassengerJSONRequestBody defines body for UpdatePassenger for application/json ContentType.
type UpdatePassengerJSONRequestBody UpdatePassengerJSONBody

// CreateScheduleJSONRequestBody defines body for CreateSchedule for application/json ContentType.
type CreateScheduleJSONRequestBody CreateScheduleJSONBody

// UpdateScheduleJSONRequestBody defines body for UpdateSchedule for application/json ContentType.
type UpdateScheduleJSONRequestBody UpdateScheduleJSONBody

// AsAircraftID returns the union data inside the AircraftSpec as a AircraftID
func (t AircraftSpec) AsAircraftID() (AircraftID, error) {
	var body AircraftID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAircraftID overwrites any union data inside the AircraftSpec as the provided AircraftID
func (t *AircraftSpec) FromAircraftID(v AircraftID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAircraftID performs a merge with any union data inside the AircraftSpec, using the provided AircraftID
func (t *AircraftSpec) MergeAircraftID(v AircraftID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAircraftRegistration returns the union data inside the AircraftSpec as a AircraftRegistration
func (t AircraftSpec) AsAircraftRegistration() (AircraftRegistration, error) {
	var body AircraftRegistration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAircraftRegistration overwrites any union data inside the AircraftSpec as the provided AircraftRegistration
func (t *AircraftSpec) FromAircraftRegistration(v AircraftRegistration) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAircraftRegistration performs a merge with any union data inside the AircraftSpec, using the provided AircraftRegistration
func (t *AircraftSpec) MergeAircraftRegistration(v AircraftRegistration) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AircraftSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AircraftSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAirlineID returns the union data inside the AirlineSpec as a AirlineID
func (t AirlineSpec) AsAirlineID() (AirlineID, error) {
	var body AirlineID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirlineID overwrites any union data inside the AirlineSpec as the provided AirlineID
func (t *AirlineSpec) FromAirlineID(v AirlineID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirlineID performs a merge with any union data inside the AirlineSpec, using the provided AirlineID
func (t *AirlineSpec) MergeAirlineID(v AirlineID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAirlineIATACode returns the union data inside the AirlineSpec as a AirlineIATACode
func (t AirlineSpec) AsAirlineIATACode() (AirlineIATACode, error) {
	var body AirlineIATACode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirlineIATACode overwrites any union data inside the AirlineSpec as the provided AirlineIATACode
func (t *AirlineSpec) FromAirlineIATACode(v AirlineIATACode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirlineIATACode performs a merge with any union data inside the AirlineSpec, using the provided AirlineIATACode
func (t *AirlineSpec) MergeAirlineIATACode(v AirlineIATACode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AirlineSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AirlineSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAirportID returns the union data inside the AirportSpec as a AirportID
func (t AirportSpec) AsAirportID() (AirportID, error) {
	var body AirportID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirportID overwrites any union data inside the AirportSpec as the provided AirportID
func (t *AirportSpec) FromAirportID(v AirportID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirportID performs a merge with any union data inside the AirportSpec, using the provided AirportID
func (t *AirportSpec) MergeAirportID(v AirportID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAirportIATACode returns the union data inside the AirportSpec as a AirportIATACode
func (t AirportSpec) AsAirportIATACode() (AirportIATACode, error) {
	var body AirportIATACode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAirportIATACode overwrites any union data inside the AirportSpec as the provided AirportIATACode
func (t *AirportSpec) FromAirportIATACode(v AirportIATACode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAirportIATACode performs a merge with any union data inside the AirportSpec, using the provided AirportIATACode
func (t *AirportSpec) MergeAirportIATACode(v AirportIATACode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AirportSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AirportSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFleetID returns the union data inside the FleetSpec as a FleetID
func (t FleetSpec) AsFleetID() (FleetID, error) {
	var body FleetID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFleetID overwrites any union data inside the FleetSpec as the provided FleetID
func (t *FleetSpec) FromFleetID(v FleetID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFleetID performs a merge with any union data inside the FleetSpec, using the provided FleetID
func (t *FleetSpec) MergeFleetID(v FleetID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFleetCode returns the union data inside the FleetSpec as a FleetCode
func (t FleetSpec) AsFleetCode() (FleetCode, error) {
	var body FleetCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFleetCode overwrites any union data inside the FleetSpec as the provided FleetCode
func (t *FleetSpec) FromFleetCode(v FleetCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFleetCode performs a merge with any union data inside the FleetSpec, using the provided FleetCode
func (t *FleetSpec) MergeFleetCode(v FleetCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FleetSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FleetSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsItineraryID returns the union data inside the ItinerarySpec as a ItineraryID
func (t ItinerarySpec) AsItineraryID() (ItineraryID, error) {
	var body ItineraryID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromItineraryID overwrites any union data inside the ItinerarySpec as the provided ItineraryID
func (t *ItinerarySpec) FromItineraryID(v ItineraryID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeItineraryID performs a merge with any union data inside the ItinerarySpec, using the provided ItineraryID
func (t *ItinerarySpec) MergeItineraryID(v ItineraryID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRecordLocator returns the union data inside the ItinerarySpec as a RecordLocator
func (t ItinerarySpec) AsRecordLocator() (RecordLocator, error) {
	var body RecordLocator
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRecordLocator overwrites any union data inside the ItinerarySpec as the provided RecordLocator
func (t *ItinerarySpec) FromRecordLocator(v RecordLocator) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRecordLocator performs a merge with any union data inside the ItinerarySpec, using the provided RecordLocator
func (t *ItinerarySpec) MergeRecordLocator(v RecordLocator) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ItinerarySpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ItinerarySpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete all aircraft
	// (DELETE /aircraft)
	DeleteAllAircraft(w http.ResponseWriter, r *http.Request)
	// List all aircraft
	// (GET /aircraft)
	ListAircraft(w http.ResponseWriter, r *http.Request)
	// Create a new aircraft
	// (POST /aircraft)
	CreateAircraft(w http.ResponseWriter, r *http.Request)
	// List all aircraft types
	// (GET /aircraft-types)
	ListAircraftTypes(w http.ResponseWriter, r *http.Request)
	// Delete an aircraft
	// (DELETE /aircraft/{aircraftSpec})
	DeleteAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec)
	// Get aircraft by ID or registration
	// (GET /aircraft/{aircraftSpec})
	GetAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec)
	// Update aircraft
	// (PATCH /aircraft/{aircraftSpec})
	UpdateAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec)
	// Delete all airlines
	// (DELETE /airlines)
	DeleteAllAirlines(w http.ResponseWriter, r *http.Request)
	// List all airlines
	// (GET /airlines)
	ListAirlines(w http.ResponseWriter, r *http.Request)
	// Create a new airline
	// (POST /airlines)
	CreateAirline(w http.ResponseWriter, r *http.Request)
	// Delete an airline
	// (DELETE /airlines/{airlineSpec})
	DeleteAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// Get airline by ID or IATA code
	// (GET /airlines/{airlineSpec})
	GetAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// Update airline
	// (PATCH /airlines/{airlineSpec})
	UpdateAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// List all aircraft owned by an airline
	// (GET /airlines/{airlineSpec}/aircraft)
	ListAircraftByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// List all fleets for an airline
	// (GET /airlines/{airlineSpec}/fleets)
	ListFleetsByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// Create a new fleet
	// (POST /airlines/{airlineSpec}/fleets)
	CreateFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// Delete a fleet
	// (DELETE /airlines/{airlineSpec}/fleets/{fleetSpec})
	DeleteFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec)
	// Get a fleet by ID or code
	// (GET /airlines/{airlineSpec}/fleets/{fleetSpec})
	GetFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec)
	// Update a fleet
	// (PATCH /airlines/{airlineSpec}/fleets/{fleetSpec})
	UpdateFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec)
	// List aircraft in a fleet
	// (GET /airlines/{airlineSpec}/fleets/{fleetSpec}/aircraft)
	ListAircraftByFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec)
	// Remove an aircraft from a fleet
	// (DELETE /airlines/{airlineSpec}/fleets/{fleetSpec}/aircraft/{aircraftSpec})
	RemoveAircraftFromFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec, aircraftSpec AircraftSpec)
	// Add an aircraft to a fleet
	// (PUT /airlines/{airlineSpec}/fleets/{fleetSpec}/aircraft/{aircraftSpec})
	AddAircraftToFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec, aircraftSpec AircraftSpec)
	// List flights for an airline
	// (GET /airlines/{airlineSpec}/flights)
	ListFlightsByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// List schedules for an airline
	// (GET /airlines/{airlineSpec}/schedules)
	ListSchedulesByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec)
	// Delete all airports
	// (DELETE /airports)
	DeleteAllAirports(w http.ResponseWriter, r *http.Request)
	// List all airports
	// (GET /airports)
	ListAirports(w http.ResponseWriter, r *http.Request)
	// Create a new airport
	// (POST /airports)
	CreateAirport(w http.ResponseWriter, r *http.Request)
	// Delete an airport
	// (DELETE /airports/{airportSpec})
	DeleteAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec)
	// Get airport by ID or IATA code
	// (GET /airports/{airportSpec})
	GetAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec)
	// Update airport
	// (PATCH /airports/{airportSpec})
	UpdateAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec)
	// List schedules that depart from or arrive at an airport
	// (GET /airports/{airportSpec}/schedules)
	ListSchedulesByAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec)
	// List all flights
	// (GET /flights)
	ListFlights(w http.ResponseWriter, r *http.Request)
	// Create a new single flight from manual input, not from a schedule
	// (POST /flights)
	CreateFlight(w http.ResponseWriter, r *http.Request)
	// Get seat assignments for a flight
	// (GET /flights/{flightID}/seat-assignments)
	ListSeatAssignmentsForFlight(w http.ResponseWriter, r *http.Request, flightID int)
	// Create a seat assignment for a flight
	// (POST /flights/{flightID}/seat-assignments)
	CreateSeatAssignment(w http.ResponseWriter, r *http.Request, flightID int)
	// Delete a flight created from manual input
	// (DELETE /flights/{id})
	DeleteFlight(w http.ResponseWriter, r *http.Request, id int)

	// (GET /flights/{id})
	GetFlight(w http.ResponseWriter, r *http.Request, id int)

	// (PATCH /flights/{id})
	UpdateFlight(w http.ResponseWriter, r *http.Request, id int)
	// Health check endpoint
	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// List all itineraries
	// (GET /itineraries)
	ListItineraries(w http.ResponseWriter, r *http.Request)
	// Create a new itinerary from manual input, not from a schedule
	// (POST /itineraries)
	CreateItinerary(w http.ResponseWriter, r *http.Request)
	// Delete an itinerary
	// (DELETE /itineraries/{itinerarySpec})
	DeleteItinerary(w http.ResponseWriter, r *http.Request, itinerarySpec ItinerarySpec)

	// (GET /itineraries/{itinerarySpec})
	GetItinerary(w http.ResponseWriter, r *http.Request, itinerarySpec ItinerarySpec)
	// List all passengers
	// (GET /passengers)
	ListPassengers(w http.ResponseWriter, r *http.Request)
	// Create a new passenger
	// (POST /passengers)
	CreatePassenger(w http.ResponseWriter, r *http.Request)

	// (DELETE /passengers/{id})
	DeletePassenger(w http.ResponseWriter, r *http.Request, id int)

	// (GET /passengers/{id})
	GetPassenger(w http.ResponseWriter, r *http.Request, id int)

	// (PATCH /passengers/{id})
	UpdatePassenger(w http.ResponseWriter, r *http.Request, id int)
	// List all routes
	// (GET /routes)
	ListRoutes(w http.ResponseWriter, r *http.Request)
	// Get route by IATA codes of origin and destination airports
	// (GET /routes/{route})
	GetRoute(w http.ResponseWriter, r *http.Request, route RouteSpec)
	// List flights for a route
	// (GET /routes/{route}/flights)
	ListFlightsByRoute(w http.ResponseWriter, r *http.Request, route RouteSpec)
	// List schedules for a route
	// (GET /routes/{route}/schedules)
	ListSchedulesByRoute(w http.ResponseWriter, r *http.Request, route RouteSpec)
	// Delete all schedules
	// (DELETE /schedules)
	DeleteAllSchedules(w http.ResponseWriter, r *http.Request)
	// List all schedules
	// (GET /schedules)
	ListSchedules(w http.ResponseWriter, r *http.Request)
	// Create a new schedule
	// (POST /schedules)
	CreateSchedule(w http.ResponseWriter, r *http.Request)
	// Delete a schedule
	// (DELETE /schedules/{id})
	DeleteSchedule(w http.ResponseWriter, r *http.Request, id int)
	// Get schedule by ID
	// (GET /schedules/{id})
	GetSchedule(w http.ResponseWriter, r *http.Request, id int)
	// Update schedule
	// (PATCH /schedules/{id})
	UpdateSchedule(w http.ResponseWriter, r *http.Request, id int)
	// Get flights defined by a schedule
	// (GET /schedules/{id}/flights)
	ListFlightsForSchedule(w http.ResponseWriter, r *http.Request, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteAllAircraft operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllAircraft(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllAircraft(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAircraft operation middleware
func (siw *ServerInterfaceWrapper) ListAircraft(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAircraft(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAircraft operation middleware
func (siw *ServerInterfaceWrapper) CreateAircraft(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAircraft(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAircraftTypes operation middleware
func (siw *ServerInterfaceWrapper) ListAircraftTypes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAircraftTypes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAircraft operation middleware
func (siw *ServerInterfaceWrapper) DeleteAircraft(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "aircraftSpec" -------------
	var aircraftSpec AircraftSpec

	err = runtime.BindStyledParameterWithOptions("simple", "aircraftSpec", r.PathValue("aircraftSpec"), &aircraftSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "aircraftSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAircraft(w, r, aircraftSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAircraft operation middleware
func (siw *ServerInterfaceWrapper) GetAircraft(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "aircraftSpec" -------------
	var aircraftSpec AircraftSpec

	err = runtime.BindStyledParameterWithOptions("simple", "aircraftSpec", r.PathValue("aircraftSpec"), &aircraftSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "aircraftSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAircraft(w, r, aircraftSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAircraft operation middleware
func (siw *ServerInterfaceWrapper) UpdateAircraft(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "aircraftSpec" -------------
	var aircraftSpec AircraftSpec

	err = runtime.BindStyledParameterWithOptions("simple", "aircraftSpec", r.PathValue("aircraftSpec"), &aircraftSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "aircraftSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAircraft(w, r, aircraftSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAllAirlines operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllAirlines(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllAirlines(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAirlines operation middleware
func (siw *ServerInterfaceWrapper) ListAirlines(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAirlines(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAirline operation middleware
func (siw *ServerInterfaceWrapper) CreateAirline(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAirline(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAirline operation middleware
func (siw *ServerInterfaceWrapper) DeleteAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAirline operation middleware
func (siw *ServerInterfaceWrapper) GetAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAirline operation middleware
func (siw *ServerInterfaceWrapper) UpdateAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAircraftByAirline operation middleware
func (siw *ServerInterfaceWrapper) ListAircraftByAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAircraftByAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFleetsByAirline operation middleware
func (siw *ServerInterfaceWrapper) ListFleetsByAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFleetsByAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateFleet operation middleware
func (siw *ServerInterfaceWrapper) CreateFleet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFleet(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFleet operation middleware
func (siw *ServerInterfaceWrapper) DeleteFleet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	// ------------- Path parameter "fleetSpec" -------------
	var fleetSpec FleetSpec

	err = runtime.BindStyledParameterWithOptions("simple", "fleetSpec", r.PathValue("fleetSpec"), &fleetSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fleetSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFleet(w, r, airlineSpec, fleetSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFleet operation middleware
func (siw *ServerInterfaceWrapper) GetFleet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	// ------------- Path parameter "fleetSpec" -------------
	var fleetSpec FleetSpec

	err = runtime.BindStyledParameterWithOptions("simple", "fleetSpec", r.PathValue("fleetSpec"), &fleetSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fleetSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFleet(w, r, airlineSpec, fleetSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateFleet operation middleware
func (siw *ServerInterfaceWrapper) UpdateFleet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	// ------------- Path parameter "fleetSpec" -------------
	var fleetSpec FleetSpec

	err = runtime.BindStyledParameterWithOptions("simple", "fleetSpec", r.PathValue("fleetSpec"), &fleetSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fleetSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFleet(w, r, airlineSpec, fleetSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAircraftByFleet operation middleware
func (siw *ServerInterfaceWrapper) ListAircraftByFleet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	// ------------- Path parameter "fleetSpec" -------------
	var fleetSpec FleetSpec

	err = runtime.BindStyledParameterWithOptions("simple", "fleetSpec", r.PathValue("fleetSpec"), &fleetSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fleetSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAircraftByFleet(w, r, airlineSpec, fleetSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RemoveAircraftFromFleet operation middleware
func (siw *ServerInterfaceWrapper) RemoveAircraftFromFleet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	// ------------- Path parameter "fleetSpec" -------------
	var fleetSpec FleetSpec

	err = runtime.BindStyledParameterWithOptions("simple", "fleetSpec", r.PathValue("fleetSpec"), &fleetSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fleetSpec", Err: err})
		return
	}

	// ------------- Path parameter "aircraftSpec" -------------
	var aircraftSpec AircraftSpec

	err = runtime.BindStyledParameterWithOptions("simple", "aircraftSpec", r.PathValue("aircraftSpec"), &aircraftSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "aircraftSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveAircraftFromFleet(w, r, airlineSpec, fleetSpec, aircraftSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddAircraftToFleet operation middleware
func (siw *ServerInterfaceWrapper) AddAircraftToFleet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	// ------------- Path parameter "fleetSpec" -------------
	var fleetSpec FleetSpec

	err = runtime.BindStyledParameterWithOptions("simple", "fleetSpec", r.PathValue("fleetSpec"), &fleetSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fleetSpec", Err: err})
		return
	}

	// ------------- Path parameter "aircraftSpec" -------------
	var aircraftSpec AircraftSpec

	err = runtime.BindStyledParameterWithOptions("simple", "aircraftSpec", r.PathValue("aircraftSpec"), &aircraftSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "aircraftSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddAircraftToFleet(w, r, airlineSpec, fleetSpec, aircraftSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlightsByAirline operation middleware
func (siw *ServerInterfaceWrapper) ListFlightsByAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlightsByAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSchedulesByAirline operation middleware
func (siw *ServerInterfaceWrapper) ListSchedulesByAirline(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airlineSpec" -------------
	var airlineSpec AirlineSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airlineSpec", r.PathValue("airlineSpec"), &airlineSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airlineSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSchedulesByAirline(w, r, airlineSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAllAirports operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllAirports(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllAirports(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAirports operation middleware
func (siw *ServerInterfaceWrapper) ListAirports(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAirports(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAirport operation middleware
func (siw *ServerInterfaceWrapper) CreateAirport(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAirport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAirport operation middleware
func (siw *ServerInterfaceWrapper) DeleteAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAirport operation middleware
func (siw *ServerInterfaceWrapper) GetAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAirport operation middleware
func (siw *ServerInterfaceWrapper) UpdateAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSchedulesByAirport operation middleware
func (siw *ServerInterfaceWrapper) ListSchedulesByAirport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "airportSpec" -------------
	var airportSpec AirportSpec

	err = runtime.BindStyledParameterWithOptions("simple", "airportSpec", r.PathValue("airportSpec"), &airportSpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "airportSpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSchedulesByAirport(w, r, airportSpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlights operation middleware
func (siw *ServerInterfaceWrapper) ListFlights(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlights(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateFlight operation middleware
func (siw *ServerInterfaceWrapper) CreateFlight(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFlight(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSeatAssignmentsForFlight operation middleware
func (siw *ServerInterfaceWrapper) ListSeatAssignmentsForFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flightID" -------------
	var flightID int

	err = runtime.BindStyledParameterWithOptions("simple", "flightID", r.PathValue("flightID"), &flightID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flightID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSeatAssignmentsForFlight(w, r, flightID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSeatAssignment operation middleware
func (siw *ServerInterfaceWrapper) CreateSeatAssignment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flightID" -------------
	var flightID int

	err = runtime.BindStyledParameterWithOptions("simple", "flightID", r.PathValue("flightID"), &flightID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flightID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSeatAssignment(w, r, flightID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFlight operation middleware
func (siw *ServerInterfaceWrapper) DeleteFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFlight(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFlight operation middleware
func (siw *ServerInterfaceWrapper) GetFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlight(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateFlight operation middleware
func (siw *ServerInterfaceWrapper) UpdateFlight(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFlight(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListItineraries operation middleware
func (siw *ServerInterfaceWrapper) ListItineraries(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListItineraries(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateItinerary operation middleware
func (siw *ServerInterfaceWrapper) CreateItinerary(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateItinerary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteItinerary operation middleware
func (siw *ServerInterfaceWrapper) DeleteItinerary(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "itinerarySpec" -------------
	var itinerarySpec ItinerarySpec

	err = runtime.BindStyledParameterWithOptions("simple", "itinerarySpec", r.PathValue("itinerarySpec"), &itinerarySpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itinerarySpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItinerary(w, r, itinerarySpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetItinerary operation middleware
func (siw *ServerInterfaceWrapper) GetItinerary(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "itinerarySpec" -------------
	var itinerarySpec ItinerarySpec

	err = runtime.BindStyledParameterWithOptions("simple", "itinerarySpec", r.PathValue("itinerarySpec"), &itinerarySpec, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itinerarySpec", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItinerary(w, r, itinerarySpec)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPassengers operation middleware
func (siw *ServerInterfaceWrapper) ListPassengers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPassengers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePassenger operation middleware
func (siw *ServerInterfaceWrapper) CreatePassenger(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePassenger(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePassenger operation middleware
func (siw *ServerInterfaceWrapper) DeletePassenger(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePassenger(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPassenger operation middleware
func (siw *ServerInterfaceWrapper) GetPassenger(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPassenger(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePassenger operation middleware
func (siw *ServerInterfaceWrapper) UpdatePassenger(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePassenger(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListRoutes operation middleware
func (siw *ServerInterfaceWrapper) ListRoutes(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRoutes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRoute operation middleware
func (siw *ServerInterfaceWrapper) GetRoute(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "route" -------------
	var route RouteSpec

	err = runtime.BindStyledParameterWithOptions("simple", "route", r.PathValue("route"), &route, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "route", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoute(w, r, route)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlightsByRoute operation middleware
func (siw *ServerInterfaceWrapper) ListFlightsByRoute(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "route" -------------
	var route RouteSpec

	err = runtime.BindStyledParameterWithOptions("simple", "route", r.PathValue("route"), &route, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "route", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlightsByRoute(w, r, route)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSchedulesByRoute operation middleware
func (siw *ServerInterfaceWrapper) ListSchedulesByRoute(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "route" -------------
	var route RouteSpec

	err = runtime.BindStyledParameterWithOptions("simple", "route", r.PathValue("route"), &route, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "route", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSchedulesByRoute(w, r, route)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAllSchedules operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllSchedules(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllSchedules(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSchedules operation middleware
func (siw *ServerInterfaceWrapper) ListSchedules(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSchedules(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSchedule operation middleware
func (siw *ServerInterfaceWrapper) CreateSchedule(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSchedule(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSchedule operation middleware
func (siw *ServerInterfaceWrapper) DeleteSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSchedule(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSchedule operation middleware
func (siw *ServerInterfaceWrapper) GetSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSchedule(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSchedule operation middleware
func (siw *ServerInterfaceWrapper) UpdateSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSchedule(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlightsForSchedule operation middleware
func (siw *ServerInterfaceWrapper) ListFlightsForSchedule(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlightsForSchedule(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("DELETE "+options.BaseURL+"/aircraft", wrapper.DeleteAllAircraft)
	m.HandleFunc("GET "+options.BaseURL+"/aircraft", wrapper.ListAircraft)
	m.HandleFunc("POST "+options.BaseURL+"/aircraft", wrapper.CreateAircraft)
	m.HandleFunc("GET "+options.BaseURL+"/aircraft-types", wrapper.ListAircraftTypes)
	m.HandleFunc("DELETE "+options.BaseURL+"/aircraft/{aircraftSpec}", wrapper.DeleteAircraft)
	m.HandleFunc("GET "+options.BaseURL+"/aircraft/{aircraftSpec}", wrapper.GetAircraft)
	m.HandleFunc("PATCH "+options.BaseURL+"/aircraft/{aircraftSpec}", wrapper.UpdateAircraft)
	m.HandleFunc("DELETE "+options.BaseURL+"/airlines", wrapper.DeleteAllAirlines)
	m.HandleFunc("GET "+options.BaseURL+"/airlines", wrapper.ListAirlines)
	m.HandleFunc("POST "+options.BaseURL+"/airlines", wrapper.CreateAirline)
	m.HandleFunc("DELETE "+options.BaseURL+"/airlines/{airlineSpec}", wrapper.DeleteAirline)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}", wrapper.GetAirline)
	m.HandleFunc("PATCH "+options.BaseURL+"/airlines/{airlineSpec}", wrapper.UpdateAirline)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}/aircraft", wrapper.ListAircraftByAirline)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}/fleets", wrapper.ListFleetsByAirline)
	m.HandleFunc("POST "+options.BaseURL+"/airlines/{airlineSpec}/fleets", wrapper.CreateFleet)
	m.HandleFunc("DELETE "+options.BaseURL+"/airlines/{airlineSpec}/fleets/{fleetSpec}", wrapper.DeleteFleet)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}/fleets/{fleetSpec}", wrapper.GetFleet)
	m.HandleFunc("PATCH "+options.BaseURL+"/airlines/{airlineSpec}/fleets/{fleetSpec}", wrapper.UpdateFleet)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}/fleets/{fleetSpec}/aircraft", wrapper.ListAircraftByFleet)
	m.HandleFunc("DELETE "+options.BaseURL+"/airlines/{airlineSpec}/fleets/{fleetSpec}/aircraft/{aircraftSpec}", wrapper.RemoveAircraftFromFleet)
	m.HandleFunc("PUT "+options.BaseURL+"/airlines/{airlineSpec}/fleets/{fleetSpec}/aircraft/{aircraftSpec}", wrapper.AddAircraftToFleet)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}/flights", wrapper.ListFlightsByAirline)
	m.HandleFunc("GET "+options.BaseURL+"/airlines/{airlineSpec}/schedules", wrapper.ListSchedulesByAirline)
	m.HandleFunc("DELETE "+options.BaseURL+"/airports", wrapper.DeleteAllAirports)
	m.HandleFunc("GET "+options.BaseURL+"/airports", wrapper.ListAirports)
	m.HandleFunc("POST "+options.BaseURL+"/airports", wrapper.CreateAirport)
	m.HandleFunc("DELETE "+options.BaseURL+"/airports/{airportSpec}", wrapper.DeleteAirport)
	m.HandleFunc("GET "+options.BaseURL+"/airports/{airportSpec}", wrapper.GetAirport)
	m.HandleFunc("PATCH "+options.BaseURL+"/airports/{airportSpec}", wrapper.UpdateAirport)
	m.HandleFunc("GET "+options.BaseURL+"/airports/{airportSpec}/schedules", wrapper.ListSchedulesByAirport)
	m.HandleFunc("GET "+options.BaseURL+"/flights", wrapper.ListFlights)
	m.HandleFunc("POST "+options.BaseURL+"/flights", wrapper.CreateFlight)
	m.HandleFunc("GET "+options.BaseURL+"/flights/{flightID}/seat-assignments", wrapper.ListSeatAssignmentsForFlight)
	m.HandleFunc("POST "+options.BaseURL+"/flights/{flightID}/seat-assignments", wrapper.CreateSeatAssignment)
	m.HandleFunc("DELETE "+options.BaseURL+"/flights/{id}", wrapper.DeleteFlight)
	m.HandleFunc("GET "+options.BaseURL+"/flights/{id}", wrapper.GetFlight)
	m.HandleFunc("PATCH "+options.BaseURL+"/flights/{id}", wrapper.UpdateFlight)
	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.HealthCheck)
	m.HandleFunc("GET "+options.BaseURL+"/itineraries", wrapper.ListItineraries)
	m.HandleFunc("POST "+options.BaseURL+"/itineraries", wrapper.CreateItinerary)
	m.HandleFunc("DELETE "+options.BaseURL+"/itineraries/{itinerarySpec}", wrapper.DeleteItinerary)
	m.HandleFunc("GET "+options.BaseURL+"/itineraries/{itinerarySpec}", wrapper.GetItinerary)
	m.HandleFunc("GET "+options.BaseURL+"/passengers", wrapper.ListPassengers)
	m.HandleFunc("POST "+options.BaseURL+"/passengers", wrapper.CreatePassenger)
	m.HandleFunc("DELETE "+options.BaseURL+"/passengers/{id}", wrapper.DeletePassenger)
	m.HandleFunc("GET "+options.BaseURL+"/passengers/{id}", wrapper.GetPassenger)
	m.HandleFunc("PATCH "+options.BaseURL+"/passengers/{id}", wrapper.UpdatePassenger)
	m.HandleFunc("GET "+options.BaseURL+"/routes", wrapper.ListRoutes)
	m.HandleFunc("GET "+options.BaseURL+"/routes/{route}", wrapper.GetRoute)
	m.HandleFunc("GET "+options.BaseURL+"/routes/{route}/flights", wrapper.ListFlightsByRoute)
	m.HandleFunc("GET "+options.BaseURL+"/routes/{route}/schedules", wrapper.ListSchedulesByRoute)
	m.HandleFunc("DELETE "+options.BaseURL+"/schedules", wrapper.DeleteAllSchedules)
	m.HandleFunc("GET "+options.BaseURL+"/schedules", wrapper.ListSchedules)
	m.HandleFunc("POST "+options.BaseURL+"/schedules", wrapper.CreateSchedule)
	m.HandleFunc("DELETE "+options.BaseURL+"/schedules/{id}", wrapper.DeleteSchedule)
	m.HandleFunc("GET "+options.BaseURL+"/schedules/{id}", wrapper.GetSchedule)
	m.HandleFunc("PATCH "+options.BaseURL+"/schedules/{id}", wrapper.UpdateSchedule)
	m.HandleFunc("GET "+options.BaseURL+"/schedules/{id}/flights", wrapper.ListFlightsForSchedule)

	return m
}

type DeleteAllAircraftRequestObject struct {
}

type DeleteAllAircraftResponseObject interface {
	VisitDeleteAllAircraftResponse(w http.ResponseWriter) error
}

type DeleteAllAircraft204Response struct {
}

func (response DeleteAllAircraft204Response) VisitDeleteAllAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListAircraftRequestObject struct {
}

type ListAircraftResponseObject interface {
	VisitListAircraftResponse(w http.ResponseWriter) error
}

type ListAircraft200JSONResponse []Aircraft

func (response ListAircraft200JSONResponse) VisitListAircraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAircraftRequestObject struct {
	Body *CreateAircraftJSONRequestBody
}

type CreateAircraftResponseObject interface {
	VisitCreateAircraftResponse(w http.ResponseWriter) error
}

type CreateAircraft201JSONResponse Aircraft

func (response CreateAircraft201JSONResponse) VisitCreateAircraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAircraft400Response struct {
}

func (response CreateAircraft400Response) VisitCreateAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListAircraftTypesRequestObject struct {
}

type ListAircraftTypesResponseObject interface {
	VisitListAircraftTypesResponse(w http.ResponseWriter) error
}

type ListAircraftTypes200JSONResponse []AircraftType

func (response ListAircraftTypes200JSONResponse) VisitListAircraftTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAircraftRequestObject struct {
	AircraftSpec AircraftSpec `json:"aircraftSpec"`
}

type DeleteAircraftResponseObject interface {
	VisitDeleteAircraftResponse(w http.ResponseWriter) error
}

type DeleteAircraft204Response struct {
}

func (response DeleteAircraft204Response) VisitDeleteAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAircraft404Response struct {
}

func (response DeleteAircraft404Response) VisitDeleteAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAircraftRequestObject struct {
	AircraftSpec AircraftSpec `json:"aircraftSpec"`
}

type GetAircraftResponseObject interface {
	VisitGetAircraftResponse(w http.ResponseWriter) error
}

type GetAircraft200JSONResponse Aircraft

func (response GetAircraft200JSONResponse) VisitGetAircraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAircraft404Response struct {
}

func (response GetAircraft404Response) VisitGetAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateAircraftRequestObject struct {
	AircraftSpec AircraftSpec `json:"aircraftSpec"`
	Body         *UpdateAircraftJSONRequestBody
}

type UpdateAircraftResponseObject interface {
	VisitUpdateAircraftResponse(w http.ResponseWriter) error
}

type UpdateAircraft200JSONResponse Aircraft

func (response UpdateAircraft200JSONResponse) VisitUpdateAircraftResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAircraft404Response struct {
}

func (response UpdateAircraft404Response) VisitUpdateAircraftResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteAllAirlinesRequestObject struct {
}

type DeleteAllAirlinesResponseObject interface {
	VisitDeleteAllAirlinesResponse(w http.ResponseWriter) error
}

type DeleteAllAirlines204Response struct {
}

func (response DeleteAllAirlines204Response) VisitDeleteAllAirlinesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListAirlinesRequestObject struct {
}

type ListAirlinesResponseObject interface {
	VisitListAirlinesResponse(w http.ResponseWriter) error
}

type ListAirlines200JSONResponse []Airline

func (response ListAirlines200JSONResponse) VisitListAirlinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirlineRequestObject struct {
	Body *CreateAirlineJSONRequestBody
}

type CreateAirlineResponseObject interface {
	VisitCreateAirlineResponse(w http.ResponseWriter) error
}

type CreateAirline201JSONResponse Airline

func (response CreateAirline201JSONResponse) VisitCreateAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirline400Response struct {
}

func (response CreateAirline400Response) VisitCreateAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type DeleteAirlineResponseObject interface {
	VisitDeleteAirlineResponse(w http.ResponseWriter) error
}

type DeleteAirline204Response struct {
}

func (response DeleteAirline204Response) VisitDeleteAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAirline404Response struct {
}

func (response DeleteAirline404Response) VisitDeleteAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type GetAirlineResponseObject interface {
	VisitGetAirlineResponse(w http.ResponseWriter) error
}

type GetAirline200JSONResponse Airline

func (response GetAirline200JSONResponse) VisitGetAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAirline404Response struct {
}

func (response GetAirline404Response) VisitGetAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
	Body        *UpdateAirlineJSONRequestBody
}

type UpdateAirlineResponseObject interface {
	VisitUpdateAirlineResponse(w http.ResponseWriter) error
}

type UpdateAirline200JSONResponse Airline

func (response UpdateAirline200JSONResponse) VisitUpdateAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAirline404Response struct {
}

func (response UpdateAirline404Response) VisitUpdateAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListAircraftByAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type ListAircraftByAirlineResponseObject interface {
	VisitListAircraftByAirlineResponse(w http.ResponseWriter) error
}

type ListAircraftByAirline200JSONResponse []Aircraft

func (response ListAircraftByAirline200JSONResponse) VisitListAircraftByAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAircraftByAirline404Response struct {
}

func (response ListAircraftByAirline404Response) VisitListAircraftByAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFleetsByAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type ListFleetsByAirlineResponseObject interface {
	VisitListFleetsByAirlineResponse(w http.ResponseWriter) error
}

type ListFleetsByAirline200JSONResponse []Fleet

func (response ListFleetsByAirline200JSONResponse) VisitListFleetsByAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFleetsByAirline404Response struct {
}

func (response ListFleetsByAirline404Response) VisitListFleetsByAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateFleetRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
	Body        *CreateFleetJSONRequestBody
}

type CreateFleetResponseObject interface {
	VisitCreateFleetResponse(w http.ResponseWriter) error
}

type CreateFleet201JSONResponse Fleet

func (response CreateFleet201JSONResponse) VisitCreateFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateFleet404Response struct {
}

func (response CreateFleet404Response) VisitCreateFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteFleetRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
	FleetSpec   FleetSpec   `json:"fleetSpec"`
}

type DeleteFleetResponseObject interface {
	VisitDeleteFleetResponse(w http.ResponseWriter) error
}

type DeleteFleet204Response struct {
}

func (response DeleteFleet204Response) VisitDeleteFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFleet404Response struct {
}

func (response DeleteFleet404Response) VisitDeleteFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetFleetRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
	FleetSpec   FleetSpec   `json:"fleetSpec"`
}

type GetFleetResponseObject interface {
	VisitGetFleetResponse(w http.ResponseWriter) error
}

type GetFleet200JSONResponse Fleet

func (response GetFleet200JSONResponse) VisitGetFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFleet404Response struct {
}

func (response GetFleet404Response) VisitGetFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateFleetRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
	FleetSpec   FleetSpec   `json:"fleetSpec"`
	Body        *UpdateFleetJSONRequestBody
}

type UpdateFleetResponseObject interface {
	VisitUpdateFleetResponse(w http.ResponseWriter) error
}

type UpdateFleet200JSONResponse Fleet

func (response UpdateFleet200JSONResponse) VisitUpdateFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFleet404Response struct {
}

func (response UpdateFleet404Response) VisitUpdateFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListAircraftByFleetRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
	FleetSpec   FleetSpec   `json:"fleetSpec"`
}

type ListAircraftByFleetResponseObject interface {
	VisitListAircraftByFleetResponse(w http.ResponseWriter) error
}

type ListAircraftByFleet200JSONResponse []Aircraft

func (response ListAircraftByFleet200JSONResponse) VisitListAircraftByFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAircraftByFleet404Response struct {
}

func (response ListAircraftByFleet404Response) VisitListAircraftByFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RemoveAircraftFromFleetRequestObject struct {
	AirlineSpec  AirlineSpec  `json:"airlineSpec"`
	FleetSpec    FleetSpec    `json:"fleetSpec"`
	AircraftSpec AircraftSpec `json:"aircraftSpec"`
}

type RemoveAircraftFromFleetResponseObject interface {
	VisitRemoveAircraftFromFleetResponse(w http.ResponseWriter) error
}

type RemoveAircraftFromFleet204Response struct {
}

func (response RemoveAircraftFromFleet204Response) VisitRemoveAircraftFromFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveAircraftFromFleet400Response struct {
}

func (response RemoveAircraftFromFleet400Response) VisitRemoveAircraftFromFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RemoveAircraftFromFleet404Response struct {
}

func (response RemoveAircraftFromFleet404Response) VisitRemoveAircraftFromFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AddAircraftToFleetRequestObject struct {
	AirlineSpec  AirlineSpec  `json:"airlineSpec"`
	FleetSpec    FleetSpec    `json:"fleetSpec"`
	AircraftSpec AircraftSpec `json:"aircraftSpec"`
}

type AddAircraftToFleetResponseObject interface {
	VisitAddAircraftToFleetResponse(w http.ResponseWriter) error
}

type AddAircraftToFleet200Response struct {
}

func (response AddAircraftToFleet200Response) VisitAddAircraftToFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AddAircraftToFleet400Response struct {
}

func (response AddAircraftToFleet400Response) VisitAddAircraftToFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AddAircraftToFleet404Response struct {
}

func (response AddAircraftToFleet404Response) VisitAddAircraftToFleetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFlightsByAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type ListFlightsByAirlineResponseObject interface {
	VisitListFlightsByAirlineResponse(w http.ResponseWriter) error
}

type ListFlightsByAirline200JSONResponse []Flight

func (response ListFlightsByAirline200JSONResponse) VisitListFlightsByAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFlightsByAirline404Response struct {
}

func (response ListFlightsByAirline404Response) VisitListFlightsByAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListSchedulesByAirlineRequestObject struct {
	AirlineSpec AirlineSpec `json:"airlineSpec"`
}

type ListSchedulesByAirlineResponseObject interface {
	VisitListSchedulesByAirlineResponse(w http.ResponseWriter) error
}

type ListSchedulesByAirline200JSONResponse []Schedule

func (response ListSchedulesByAirline200JSONResponse) VisitListSchedulesByAirlineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSchedulesByAirline404Response struct {
}

func (response ListSchedulesByAirline404Response) VisitListSchedulesByAirlineResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteAllAirportsRequestObject struct {
}

type DeleteAllAirportsResponseObject interface {
	VisitDeleteAllAirportsResponse(w http.ResponseWriter) error
}

type DeleteAllAirports204Response struct {
}

func (response DeleteAllAirports204Response) VisitDeleteAllAirportsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListAirportsRequestObject struct {
}

type ListAirportsResponseObject interface {
	VisitListAirportsResponse(w http.ResponseWriter) error
}

type ListAirports200JSONResponse []Airport

func (response ListAirports200JSONResponse) VisitListAirportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirportRequestObject struct {
	Body *CreateAirportJSONRequestBody
}

type CreateAirportResponseObject interface {
	VisitCreateAirportResponse(w http.ResponseWriter) error
}

type CreateAirport201JSONResponse Airport

func (response CreateAirport201JSONResponse) VisitCreateAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAirport400Response struct {
}

func (response CreateAirport400Response) VisitCreateAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteAirportRequestObject struct {
	AirportSpec AirportSpec `json:"airportSpec"`
}

type DeleteAirportResponseObject interface {
	VisitDeleteAirportResponse(w http.ResponseWriter) error
}

type DeleteAirport204Response struct {
}

func (response DeleteAirport204Response) VisitDeleteAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAirport404Response struct {
}

func (response DeleteAirport404Response) VisitDeleteAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAirportRequestObject struct {
	AirportSpec AirportSpec `json:"airportSpec"`
}

type GetAirportResponseObject interface {
	VisitGetAirportResponse(w http.ResponseWriter) error
}

type GetAirport200JSONResponse Airport

func (response GetAirport200JSONResponse) VisitGetAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAirport404Response struct {
}

func (response GetAirport404Response) VisitGetAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateAirportRequestObject struct {
	AirportSpec AirportSpec `json:"airportSpec"`
	Body        *UpdateAirportJSONRequestBody
}

type UpdateAirportResponseObject interface {
	VisitUpdateAirportResponse(w http.ResponseWriter) error
}

type UpdateAirport200JSONResponse Airport

func (response UpdateAirport200JSONResponse) VisitUpdateAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAirport404Response struct {
}

func (response UpdateAirport404Response) VisitUpdateAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListSchedulesByAirportRequestObject struct {
	AirportSpec AirportSpec `json:"airportSpec"`
}

type ListSchedulesByAirportResponseObject interface {
	VisitListSchedulesByAirportResponse(w http.ResponseWriter) error
}

type ListSchedulesByAirport200JSONResponse []Schedule

func (response ListSchedulesByAirport200JSONResponse) VisitListSchedulesByAirportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSchedulesByAirport404Response struct {
}

func (response ListSchedulesByAirport404Response) VisitListSchedulesByAirportResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFlightsRequestObject struct {
}

type ListFlightsResponseObject interface {
	VisitListFlightsResponse(w http.ResponseWriter) error
}

type ListFlights200JSONResponse []Flight

func (response ListFlights200JSONResponse) VisitListFlightsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlightRequestObject struct {
	Body *CreateFlightJSONRequestBody
}

type CreateFlightResponseObject interface {
	VisitCreateFlightResponse(w http.ResponseWriter) error
}

type CreateFlight201JSONResponse Flight

func (response CreateFlight201JSONResponse) VisitCreateFlightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlight400Response struct {
}

func (response CreateFlight400Response) VisitCreateFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListSeatAssignmentsForFlightRequestObject struct {
	FlightID int `json:"flightID"`
}

type ListSeatAssignmentsForFlightResponseObject interface {
	VisitListSeatAssignmentsForFlightResponse(w http.ResponseWriter) error
}

type ListSeatAssignmentsForFlight200JSONResponse []SeatAssignment

func (response ListSeatAssignmentsForFlight200JSONResponse) VisitListSeatAssignmentsForFlightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSeatAssignmentsForFlight404Response struct {
}

func (response ListSeatAssignmentsForFlight404Response) VisitListSeatAssignmentsForFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateSeatAssignmentRequestObject struct {
	FlightID int `json:"flightID"`
	Body     *CreateSeatAssignmentJSONRequestBody
}

type CreateSeatAssignmentResponseObject interface {
	VisitCreateSeatAssignmentResponse(w http.ResponseWriter) error
}

type CreateSeatAssignment201JSONResponse SeatAssignment

func (response CreateSeatAssignment201JSONResponse) VisitCreateSeatAssignmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSeatAssignment400Response struct {
}

func (response CreateSeatAssignment400Response) VisitCreateSeatAssignmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateSeatAssignment404Response struct {
}

func (response CreateSeatAssignment404Response) VisitCreateSeatAssignmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteFlightRequestObject struct {
	Id int `json:"id"`
}

type DeleteFlightResponseObject interface {
	VisitDeleteFlightResponse(w http.ResponseWriter) error
}

type DeleteFlight204Response struct {
}

func (response DeleteFlight204Response) VisitDeleteFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFlight400Response struct {
}

func (response DeleteFlight400Response) VisitDeleteFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteFlight404Response struct {
}

func (response DeleteFlight404Response) VisitDeleteFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetFlightRequestObject struct {
	Id int `json:"id"`
}

type GetFlightResponseObject interface {
	VisitGetFlightResponse(w http.ResponseWriter) error
}

type GetFlight200JSONResponse Flight

func (response GetFlight200JSONResponse) VisitGetFlightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFlight404Response struct {
}

func (response GetFlight404Response) VisitGetFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateFlightRequestObject struct {
	Id   int `json:"id"`
	Body *UpdateFlightJSONRequestBody
}

type UpdateFlightResponseObject interface {
	VisitUpdateFlightResponse(w http.ResponseWriter) error
}

type UpdateFlight200JSONResponse Flight

func (response UpdateFlight200JSONResponse) VisitUpdateFlightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlight400Response struct {
}

func (response UpdateFlight400Response) VisitUpdateFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateFlight404Response struct {
}

func (response UpdateFlight404Response) VisitUpdateFlightResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(w http.ResponseWriter) error
}

type HealthCheck200JSONResponse struct {
	Ok *bool `json:"ok,omitempty"`
}

func (response HealthCheck200JSONResponse) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListItinerariesRequestObject struct {
}

type ListItinerariesResponseObject interface {
	VisitListItinerariesResponse(w http.ResponseWriter) error
}

type ListItineraries200JSONResponse []Itinerary

func (response ListItineraries200JSONResponse) VisitListItinerariesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateItineraryRequestObject struct {
	Body *CreateItineraryJSONRequestBody
}

type CreateItineraryResponseObject interface {
	VisitCreateItineraryResponse(w http.ResponseWriter) error
}

type CreateItinerary201JSONResponse Itinerary

func (response CreateItinerary201JSONResponse) VisitCreateItineraryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateItinerary400Response struct {
}

func (response CreateItinerary400Response) VisitCreateItineraryResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteItineraryRequestObject struct {
	ItinerarySpec ItinerarySpec `json:"itinerarySpec"`
}

type DeleteItineraryResponseObject interface {
	VisitDeleteItineraryResponse(w http.ResponseWriter) error
}

type DeleteItinerary204Response struct {
}

func (response DeleteItinerary204Response) VisitDeleteItineraryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteItinerary404Response struct {
}

func (response DeleteItinerary404Response) VisitDeleteItineraryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetItineraryRequestObject struct {
	ItinerarySpec ItinerarySpec `json:"itinerarySpec"`
}

type GetItineraryResponseObject interface {
	VisitGetItineraryResponse(w http.ResponseWriter) error
}

type GetItinerary200JSONResponse Itinerary

func (response GetItinerary200JSONResponse) VisitGetItineraryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetItinerary404Response struct {
}

func (response GetItinerary404Response) VisitGetItineraryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListPassengersRequestObject struct {
}

type ListPassengersResponseObject interface {
	VisitListPassengersResponse(w http.ResponseWriter) error
}

type ListPassengers200JSONResponse []Passenger

func (response ListPassengers200JSONResponse) VisitListPassengersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePassengerRequestObject struct {
	Body *CreatePassengerJSONRequestBody
}

type CreatePassengerResponseObject interface {
	VisitCreatePassengerResponse(w http.ResponseWriter) error
}

type CreatePassenger201JSONResponse Passenger

func (response CreatePassenger201JSONResponse) VisitCreatePassengerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePassenger400Response struct {
}

func (response CreatePassenger400Response) VisitCreatePassengerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeletePassengerRequestObject struct {
	Id int `json:"id"`
}

type DeletePassengerResponseObject interface {
	VisitDeletePassengerResponse(w http.ResponseWriter) error
}

type DeletePassenger204Response struct {
}

func (response DeletePassenger204Response) VisitDeletePassengerResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePassenger404Response struct {
}

func (response DeletePassenger404Response) VisitDeletePassengerResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetPassengerRequestObject struct {
	Id int `json:"id"`
}

type GetPassengerResponseObject interface {
	VisitGetPassengerResponse(w http.ResponseWriter) error
}

type GetPassenger200JSONResponse Passenger

func (response GetPassenger200JSONResponse) VisitGetPassengerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPassenger404Response struct {
}

func (response GetPassenger404Response) VisitGetPassengerResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdatePassengerRequestObject struct {
	Id   int `json:"id"`
	Body *UpdatePassengerJSONRequestBody
}

type UpdatePassengerResponseObject interface {
	VisitUpdatePassengerResponse(w http.ResponseWriter) error
}

type UpdatePassenger200JSONResponse Passenger

func (response UpdatePassenger200JSONResponse) VisitUpdatePassengerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePassenger400Response struct {
}

func (response UpdatePassenger400Response) VisitUpdatePassengerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdatePassenger404Response struct {
}

func (response UpdatePassenger404Response) VisitUpdatePassengerResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListRoutesRequestObject struct {
}

type ListRoutesResponseObject interface {
	VisitListRoutesResponse(w http.ResponseWriter) error
}

type ListRoutes200JSONResponse []Route

func (response ListRoutes200JSONResponse) VisitListRoutesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRouteRequestObject struct {
	Route RouteSpec `json:"route"`
}

type GetRouteResponseObject interface {
	VisitGetRouteResponse(w http.ResponseWriter) error
}

type GetRoute200JSONResponse Route

func (response GetRoute200JSONResponse) VisitGetRouteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoute404Response struct {
}

func (response GetRoute404Response) VisitGetRouteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFlightsByRouteRequestObject struct {
	Route RouteSpec `json:"route"`
}

type ListFlightsByRouteResponseObject interface {
	VisitListFlightsByRouteResponse(w http.ResponseWriter) error
}

type ListFlightsByRoute200JSONResponse []Flight

func (response ListFlightsByRoute200JSONResponse) VisitListFlightsByRouteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFlightsByRoute404Response struct {
}

func (response ListFlightsByRoute404Response) VisitListFlightsByRouteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListSchedulesByRouteRequestObject struct {
	Route RouteSpec `json:"route"`
}

type ListSchedulesByRouteResponseObject interface {
	VisitListSchedulesByRouteResponse(w http.ResponseWriter) error
}

type ListSchedulesByRoute200JSONResponse []Schedule

func (response ListSchedulesByRoute200JSONResponse) VisitListSchedulesByRouteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSchedulesByRoute404Response struct {
}

func (response ListSchedulesByRoute404Response) VisitListSchedulesByRouteResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteAllSchedulesRequestObject struct {
}

type DeleteAllSchedulesResponseObject interface {
	VisitDeleteAllSchedulesResponse(w http.ResponseWriter) error
}

type DeleteAllSchedules204Response struct {
}

func (response DeleteAllSchedules204Response) VisitDeleteAllSchedulesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListSchedulesRequestObject struct {
}

type ListSchedulesResponseObject interface {
	VisitListSchedulesResponse(w http.ResponseWriter) error
}

type ListSchedules200JSONResponse []Schedule

func (response ListSchedules200JSONResponse) VisitListSchedulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateScheduleRequestObject struct {
	Body *CreateScheduleJSONRequestBody
}

type CreateScheduleResponseObject interface {
	VisitCreateScheduleResponse(w http.ResponseWriter) error
}

type CreateSchedule201JSONResponse Schedule

func (response CreateSchedule201JSONResponse) VisitCreateScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSchedule400Response struct {
}

func (response CreateSchedule400Response) VisitCreateScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteScheduleRequestObject struct {
	Id int `json:"id"`
}

type DeleteScheduleResponseObject interface {
	VisitDeleteScheduleResponse(w http.ResponseWriter) error
}

type DeleteSchedule204Response struct {
}

func (response DeleteSchedule204Response) VisitDeleteScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSchedule404Response struct {
}

func (response DeleteSchedule404Response) VisitDeleteScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetScheduleRequestObject struct {
	Id int `json:"id"`
}

type GetScheduleResponseObject interface {
	VisitGetScheduleResponse(w http.ResponseWriter) error
}

type GetSchedule200JSONResponse Schedule

func (response GetSchedule200JSONResponse) VisitGetScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchedule404Response struct {
}

func (response GetSchedule404Response) VisitGetScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateScheduleRequestObject struct {
	Id   int `json:"id"`
	Body *UpdateScheduleJSONRequestBody
}

type UpdateScheduleResponseObject interface {
	VisitUpdateScheduleResponse(w http.ResponseWriter) error
}

type UpdateSchedule200JSONResponse Schedule

func (response UpdateSchedule200JSONResponse) VisitUpdateScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSchedule404Response struct {
}

func (response UpdateSchedule404Response) VisitUpdateScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListFlightsForScheduleRequestObject struct {
	Id int `json:"id"`
}

type ListFlightsForScheduleResponseObject interface {
	VisitListFlightsForScheduleResponse(w http.ResponseWriter) error
}

type ListFlightsForSchedule200JSONResponse []Flight

func (response ListFlightsForSchedule200JSONResponse) VisitListFlightsForScheduleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFlightsForSchedule404Response struct {
}

func (response ListFlightsForSchedule404Response) VisitListFlightsForScheduleResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete all aircraft
	// (DELETE /aircraft)
	DeleteAllAircraft(ctx context.Context, request DeleteAllAircraftRequestObject) (DeleteAllAircraftResponseObject, error)
	// List all aircraft
	// (GET /aircraft)
	ListAircraft(ctx context.Context, request ListAircraftRequestObject) (ListAircraftResponseObject, error)
	// Create a new aircraft
	// (POST /aircraft)
	CreateAircraft(ctx context.Context, request CreateAircraftRequestObject) (CreateAircraftResponseObject, error)
	// List all aircraft types
	// (GET /aircraft-types)
	ListAircraftTypes(ctx context.Context, request ListAircraftTypesRequestObject) (ListAircraftTypesResponseObject, error)
	// Delete an aircraft
	// (DELETE /aircraft/{aircraftSpec})
	DeleteAircraft(ctx context.Context, request DeleteAircraftRequestObject) (DeleteAircraftResponseObject, error)
	// Get aircraft by ID or registration
	// (GET /aircraft/{aircraftSpec})
	GetAircraft(ctx context.Context, request GetAircraftRequestObject) (GetAircraftResponseObject, error)
	// Update aircraft
	// (PATCH /aircraft/{aircraftSpec})
	UpdateAircraft(ctx context.Context, request UpdateAircraftRequestObject) (UpdateAircraftResponseObject, error)
	// Delete all airlines
	// (DELETE /airlines)
	DeleteAllAirlines(ctx context.Context, request DeleteAllAirlinesRequestObject) (DeleteAllAirlinesResponseObject, error)
	// List all airlines
	// (GET /airlines)
	ListAirlines(ctx context.Context, request ListAirlinesRequestObject) (ListAirlinesResponseObject, error)
	// Create a new airline
	// (POST /airlines)
	CreateAirline(ctx context.Context, request CreateAirlineRequestObject) (CreateAirlineResponseObject, error)
	// Delete an airline
	// (DELETE /airlines/{airlineSpec})
	DeleteAirline(ctx context.Context, request DeleteAirlineRequestObject) (DeleteAirlineResponseObject, error)
	// Get airline by ID or IATA code
	// (GET /airlines/{airlineSpec})
	GetAirline(ctx context.Context, request GetAirlineRequestObject) (GetAirlineResponseObject, error)
	// Update airline
	// (PATCH /airlines/{airlineSpec})
	UpdateAirline(ctx context.Context, request UpdateAirlineRequestObject) (UpdateAirlineResponseObject, error)
	// List all aircraft owned by an airline
	// (GET /airlines/{airlineSpec}/aircraft)
	ListAircraftByAirline(ctx context.Context, request ListAircraftByAirlineRequestObject) (ListAircraftByAirlineResponseObject, error)
	// List all fleets for an airline
	// (GET /airlines/{airlineSpec}/fleets)
	ListFleetsByAirline(ctx context.Context, request ListFleetsByAirlineRequestObject) (ListFleetsByAirlineResponseObject, error)
	// Create a new fleet
	// (POST /airlines/{airlineSpec}/fleets)
	CreateFleet(ctx context.Context, request CreateFleetRequestObject) (CreateFleetResponseObject, error)
	// Delete a fleet
	// (DELETE /airlines/{airlineSpec}/fleets/{fleetSpec})
	DeleteFleet(ctx context.Context, request DeleteFleetRequestObject) (DeleteFleetResponseObject, error)
	// Get a fleet by ID or code
	// (GET /airlines/{airlineSpec}/fleets/{fleetSpec})
	GetFleet(ctx context.Context, request GetFleetRequestObject) (GetFleetResponseObject, error)
	// Update a fleet
	// (PATCH /airlines/{airlineSpec}/fleets/{fleetSpec})
	UpdateFleet(ctx context.Context, request UpdateFleetRequestObject) (UpdateFleetResponseObject, error)
	// List aircraft in a fleet
	// (GET /airlines/{airlineSpec}/fleets/{fleetSpec}/aircraft)
	ListAircraftByFleet(ctx context.Context, request ListAircraftByFleetRequestObject) (ListAircraftByFleetResponseObject, error)
	// Remove an aircraft from a fleet
	// (DELETE /airlines/{airlineSpec}/fleets/{fleetSpec}/aircraft/{aircraftSpec})
	RemoveAircraftFromFleet(ctx context.Context, request RemoveAircraftFromFleetRequestObject) (RemoveAircraftFromFleetResponseObject, error)
	// Add an aircraft to a fleet
	// (PUT /airlines/{airlineSpec}/fleets/{fleetSpec}/aircraft/{aircraftSpec})
	AddAircraftToFleet(ctx context.Context, request AddAircraftToFleetRequestObject) (AddAircraftToFleetResponseObject, error)
	// List flights for an airline
	// (GET /airlines/{airlineSpec}/flights)
	ListFlightsByAirline(ctx context.Context, request ListFlightsByAirlineRequestObject) (ListFlightsByAirlineResponseObject, error)
	// List schedules for an airline
	// (GET /airlines/{airlineSpec}/schedules)
	ListSchedulesByAirline(ctx context.Context, request ListSchedulesByAirlineRequestObject) (ListSchedulesByAirlineResponseObject, error)
	// Delete all airports
	// (DELETE /airports)
	DeleteAllAirports(ctx context.Context, request DeleteAllAirportsRequestObject) (DeleteAllAirportsResponseObject, error)
	// List all airports
	// (GET /airports)
	ListAirports(ctx context.Context, request ListAirportsRequestObject) (ListAirportsResponseObject, error)
	// Create a new airport
	// (POST /airports)
	CreateAirport(ctx context.Context, request CreateAirportRequestObject) (CreateAirportResponseObject, error)
	// Delete an airport
	// (DELETE /airports/{airportSpec})
	DeleteAirport(ctx context.Context, request DeleteAirportRequestObject) (DeleteAirportResponseObject, error)
	// Get airport by ID or IATA code
	// (GET /airports/{airportSpec})
	GetAirport(ctx context.Context, request GetAirportRequestObject) (GetAirportResponseObject, error)
	// Update airport
	// (PATCH /airports/{airportSpec})
	UpdateAirport(ctx context.Context, request UpdateAirportRequestObject) (UpdateAirportResponseObject, error)
	// List schedules that depart from or arrive at an airport
	// (GET /airports/{airportSpec}/schedules)
	ListSchedulesByAirport(ctx context.Context, request ListSchedulesByAirportRequestObject) (ListSchedulesByAirportResponseObject, error)
	// List all flights
	// (GET /flights)
	ListFlights(ctx context.Context, request ListFlightsRequestObject) (ListFlightsResponseObject, error)
	// Create a new single flight from manual input, not from a schedule
	// (POST /flights)
	CreateFlight(ctx context.Context, request CreateFlightRequestObject) (CreateFlightResponseObject, error)
	// Get seat assignments for a flight
	// (GET /flights/{flightID}/seat-assignments)
	ListSeatAssignmentsForFlight(ctx context.Context, request ListSeatAssignmentsForFlightRequestObject) (ListSeatAssignmentsForFlightResponseObject, error)
	// Create a seat assignment for a flight
	// (POST /flights/{flightID}/seat-assignments)
	CreateSeatAssignment(ctx context.Context, request CreateSeatAssignmentRequestObject) (CreateSeatAssignmentResponseObject, error)
	// Delete a flight created from manual input
	// (DELETE /flights/{id})
	DeleteFlight(ctx context.Context, request DeleteFlightRequestObject) (DeleteFlightResponseObject, error)

	// (GET /flights/{id})
	GetFlight(ctx context.Context, request GetFlightRequestObject) (GetFlightResponseObject, error)

	// (PATCH /flights/{id})
	UpdateFlight(ctx context.Context, request UpdateFlightRequestObject) (UpdateFlightResponseObject, error)
	// Health check endpoint
	// (GET /health)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
	// List all itineraries
	// (GET /itineraries)
	ListItineraries(ctx context.Context, request ListItinerariesRequestObject) (ListItinerariesResponseObject, error)
	// Create a new itinerary from manual input, not from a schedule
	// (POST /itineraries)
	CreateItinerary(ctx context.Context, request CreateItineraryRequestObject) (CreateItineraryResponseObject, error)
	// Delete an itinerary
	// (DELETE /itineraries/{itinerarySpec})
	DeleteItinerary(ctx context.Context, request DeleteItineraryRequestObject) (DeleteItineraryResponseObject, error)

	// (GET /itineraries/{itinerarySpec})
	GetItinerary(ctx context.Context, request GetItineraryRequestObject) (GetItineraryResponseObject, error)
	// List all passengers
	// (GET /passengers)
	ListPassengers(ctx context.Context, request ListPassengersRequestObject) (ListPassengersResponseObject, error)
	// Create a new passenger
	// (POST /passengers)
	CreatePassenger(ctx context.Context, request CreatePassengerRequestObject) (CreatePassengerResponseObject, error)

	// (DELETE /passengers/{id})
	DeletePassenger(ctx context.Context, request DeletePassengerRequestObject) (DeletePassengerResponseObject, error)

	// (GET /passengers/{id})
	GetPassenger(ctx context.Context, request GetPassengerRequestObject) (GetPassengerResponseObject, error)

	// (PATCH /passengers/{id})
	UpdatePassenger(ctx context.Context, request UpdatePassengerRequestObject) (UpdatePassengerResponseObject, error)
	// List all routes
	// (GET /routes)
	ListRoutes(ctx context.Context, request ListRoutesRequestObject) (ListRoutesResponseObject, error)
	// Get route by IATA codes of origin and destination airports
	// (GET /routes/{route})
	GetRoute(ctx context.Context, request GetRouteRequestObject) (GetRouteResponseObject, error)
	// List flights for a route
	// (GET /routes/{route}/flights)
	ListFlightsByRoute(ctx context.Context, request ListFlightsByRouteRequestObject) (ListFlightsByRouteResponseObject, error)
	// List schedules for a route
	// (GET /routes/{route}/schedules)
	ListSchedulesByRoute(ctx context.Context, request ListSchedulesByRouteRequestObject) (ListSchedulesByRouteResponseObject, error)
	// Delete all schedules
	// (DELETE /schedules)
	DeleteAllSchedules(ctx context.Context, request DeleteAllSchedulesRequestObject) (DeleteAllSchedulesResponseObject, error)
	// List all schedules
	// (GET /schedules)
	ListSchedules(ctx context.Context, request ListSchedulesRequestObject) (ListSchedulesResponseObject, error)
	// Create a new schedule
	// (POST /schedules)
	CreateSchedule(ctx context.Context, request CreateScheduleRequestObject) (CreateScheduleResponseObject, error)
	// Delete a schedule
	// (DELETE /schedules/{id})
	DeleteSchedule(ctx context.Context, request DeleteScheduleRequestObject) (DeleteScheduleResponseObject, error)
	// Get schedule by ID
	// (GET /schedules/{id})
	GetSchedule(ctx context.Context, request GetScheduleRequestObject) (GetScheduleResponseObject, error)
	// Update schedule
	// (PATCH /schedules/{id})
	UpdateSchedule(ctx context.Context, request UpdateScheduleRequestObject) (UpdateScheduleResponseObject, error)
	// Get flights defined by a schedule
	// (GET /schedules/{id}/flights)
	ListFlightsForSchedule(ctx context.Context, request ListFlightsForScheduleRequestObject) (ListFlightsForScheduleResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteAllAircraft operation middleware
func (sh *strictHandler) DeleteAllAircraft(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllAircraftRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllAircraft(ctx, request.(DeleteAllAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllAircraftResponseObject); ok {
		if err := validResponse.VisitDeleteAllAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAircraft operation middleware
func (sh *strictHandler) ListAircraft(w http.ResponseWriter, r *http.Request) {
	var request ListAircraftRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAircraft(ctx, request.(ListAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAircraftResponseObject); ok {
		if err := validResponse.VisitListAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAircraft operation middleware
func (sh *strictHandler) CreateAircraft(w http.ResponseWriter, r *http.Request) {
	var request CreateAircraftRequestObject

	var body CreateAircraftJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAircraft(ctx, request.(CreateAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAircraftResponseObject); ok {
		if err := validResponse.VisitCreateAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAircraftTypes operation middleware
func (sh *strictHandler) ListAircraftTypes(w http.ResponseWriter, r *http.Request) {
	var request ListAircraftTypesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAircraftTypes(ctx, request.(ListAircraftTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAircraftTypes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAircraftTypesResponseObject); ok {
		if err := validResponse.VisitListAircraftTypesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAircraft operation middleware
func (sh *strictHandler) DeleteAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec) {
	var request DeleteAircraftRequestObject

	request.AircraftSpec = aircraftSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAircraft(ctx, request.(DeleteAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAircraftResponseObject); ok {
		if err := validResponse.VisitDeleteAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAircraft operation middleware
func (sh *strictHandler) GetAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec) {
	var request GetAircraftRequestObject

	request.AircraftSpec = aircraftSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAircraft(ctx, request.(GetAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAircraftResponseObject); ok {
		if err := validResponse.VisitGetAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAircraft operation middleware
func (sh *strictHandler) UpdateAircraft(w http.ResponseWriter, r *http.Request, aircraftSpec AircraftSpec) {
	var request UpdateAircraftRequestObject

	request.AircraftSpec = aircraftSpec

	var body UpdateAircraftJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAircraft(ctx, request.(UpdateAircraftRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAircraft")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAircraftResponseObject); ok {
		if err := validResponse.VisitUpdateAircraftResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAllAirlines operation middleware
func (sh *strictHandler) DeleteAllAirlines(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllAirlinesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllAirlines(ctx, request.(DeleteAllAirlinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllAirlines")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllAirlinesResponseObject); ok {
		if err := validResponse.VisitDeleteAllAirlinesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAirlines operation middleware
func (sh *strictHandler) ListAirlines(w http.ResponseWriter, r *http.Request) {
	var request ListAirlinesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAirlines(ctx, request.(ListAirlinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAirlines")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAirlinesResponseObject); ok {
		if err := validResponse.VisitListAirlinesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAirline operation middleware
func (sh *strictHandler) CreateAirline(w http.ResponseWriter, r *http.Request) {
	var request CreateAirlineRequestObject

	var body CreateAirlineJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAirline(ctx, request.(CreateAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAirlineResponseObject); ok {
		if err := validResponse.VisitCreateAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAirline operation middleware
func (sh *strictHandler) DeleteAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request DeleteAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAirline(ctx, request.(DeleteAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAirlineResponseObject); ok {
		if err := validResponse.VisitDeleteAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAirline operation middleware
func (sh *strictHandler) GetAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request GetAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAirline(ctx, request.(GetAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAirlineResponseObject); ok {
		if err := validResponse.VisitGetAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAirline operation middleware
func (sh *strictHandler) UpdateAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request UpdateAirlineRequestObject

	request.AirlineSpec = airlineSpec

	var body UpdateAirlineJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAirline(ctx, request.(UpdateAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAirlineResponseObject); ok {
		if err := validResponse.VisitUpdateAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAircraftByAirline operation middleware
func (sh *strictHandler) ListAircraftByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request ListAircraftByAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAircraftByAirline(ctx, request.(ListAircraftByAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAircraftByAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAircraftByAirlineResponseObject); ok {
		if err := validResponse.VisitListAircraftByAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFleetsByAirline operation middleware
func (sh *strictHandler) ListFleetsByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request ListFleetsByAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFleetsByAirline(ctx, request.(ListFleetsByAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFleetsByAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFleetsByAirlineResponseObject); ok {
		if err := validResponse.VisitListFleetsByAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFleet operation middleware
func (sh *strictHandler) CreateFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request CreateFleetRequestObject

	request.AirlineSpec = airlineSpec

	var body CreateFleetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFleet(ctx, request.(CreateFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFleetResponseObject); ok {
		if err := validResponse.VisitCreateFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFleet operation middleware
func (sh *strictHandler) DeleteFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec) {
	var request DeleteFleetRequestObject

	request.AirlineSpec = airlineSpec
	request.FleetSpec = fleetSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFleet(ctx, request.(DeleteFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFleetResponseObject); ok {
		if err := validResponse.VisitDeleteFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFleet operation middleware
func (sh *strictHandler) GetFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec) {
	var request GetFleetRequestObject

	request.AirlineSpec = airlineSpec
	request.FleetSpec = fleetSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFleet(ctx, request.(GetFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFleetResponseObject); ok {
		if err := validResponse.VisitGetFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFleet operation middleware
func (sh *strictHandler) UpdateFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec) {
	var request UpdateFleetRequestObject

	request.AirlineSpec = airlineSpec
	request.FleetSpec = fleetSpec

	var body UpdateFleetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFleet(ctx, request.(UpdateFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFleetResponseObject); ok {
		if err := validResponse.VisitUpdateFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAircraftByFleet operation middleware
func (sh *strictHandler) ListAircraftByFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec) {
	var request ListAircraftByFleetRequestObject

	request.AirlineSpec = airlineSpec
	request.FleetSpec = fleetSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAircraftByFleet(ctx, request.(ListAircraftByFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAircraftByFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAircraftByFleetResponseObject); ok {
		if err := validResponse.VisitListAircraftByFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveAircraftFromFleet operation middleware
func (sh *strictHandler) RemoveAircraftFromFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec, aircraftSpec AircraftSpec) {
	var request RemoveAircraftFromFleetRequestObject

	request.AirlineSpec = airlineSpec
	request.FleetSpec = fleetSpec
	request.AircraftSpec = aircraftSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveAircraftFromFleet(ctx, request.(RemoveAircraftFromFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveAircraftFromFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RemoveAircraftFromFleetResponseObject); ok {
		if err := validResponse.VisitRemoveAircraftFromFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddAircraftToFleet operation middleware
func (sh *strictHandler) AddAircraftToFleet(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec, fleetSpec FleetSpec, aircraftSpec AircraftSpec) {
	var request AddAircraftToFleetRequestObject

	request.AirlineSpec = airlineSpec
	request.FleetSpec = fleetSpec
	request.AircraftSpec = aircraftSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddAircraftToFleet(ctx, request.(AddAircraftToFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddAircraftToFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddAircraftToFleetResponseObject); ok {
		if err := validResponse.VisitAddAircraftToFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlightsByAirline operation middleware
func (sh *strictHandler) ListFlightsByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request ListFlightsByAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlightsByAirline(ctx, request.(ListFlightsByAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlightsByAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightsByAirlineResponseObject); ok {
		if err := validResponse.VisitListFlightsByAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListSchedulesByAirline operation middleware
func (sh *strictHandler) ListSchedulesByAirline(w http.ResponseWriter, r *http.Request, airlineSpec AirlineSpec) {
	var request ListSchedulesByAirlineRequestObject

	request.AirlineSpec = airlineSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListSchedulesByAirline(ctx, request.(ListSchedulesByAirlineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSchedulesByAirline")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListSchedulesByAirlineResponseObject); ok {
		if err := validResponse.VisitListSchedulesByAirlineResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAllAirports operation middleware
func (sh *strictHandler) DeleteAllAirports(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllAirportsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllAirports(ctx, request.(DeleteAllAirportsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllAirports")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllAirportsResponseObject); ok {
		if err := validResponse.VisitDeleteAllAirportsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAirports operation middleware
func (sh *strictHandler) ListAirports(w http.ResponseWriter, r *http.Request) {
	var request ListAirportsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAirports(ctx, request.(ListAirportsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAirports")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAirportsResponseObject); ok {
		if err := validResponse.VisitListAirportsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAirport operation middleware
func (sh *strictHandler) CreateAirport(w http.ResponseWriter, r *http.Request) {
	var request CreateAirportRequestObject

	var body CreateAirportJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAirport(ctx, request.(CreateAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAirportResponseObject); ok {
		if err := validResponse.VisitCreateAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAirport operation middleware
func (sh *strictHandler) DeleteAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec) {
	var request DeleteAirportRequestObject

	request.AirportSpec = airportSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAirport(ctx, request.(DeleteAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAirportResponseObject); ok {
		if err := validResponse.VisitDeleteAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAirport operation middleware
func (sh *strictHandler) GetAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec) {
	var request GetAirportRequestObject

	request.AirportSpec = airportSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAirport(ctx, request.(GetAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAirportResponseObject); ok {
		if err := validResponse.VisitGetAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAirport operation middleware
func (sh *strictHandler) UpdateAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec) {
	var request UpdateAirportRequestObject

	request.AirportSpec = airportSpec

	var body UpdateAirportJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAirport(ctx, request.(UpdateAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAirportResponseObject); ok {
		if err := validResponse.VisitUpdateAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListSchedulesByAirport operation middleware
func (sh *strictHandler) ListSchedulesByAirport(w http.ResponseWriter, r *http.Request, airportSpec AirportSpec) {
	var request ListSchedulesByAirportRequestObject

	request.AirportSpec = airportSpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListSchedulesByAirport(ctx, request.(ListSchedulesByAirportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSchedulesByAirport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListSchedulesByAirportResponseObject); ok {
		if err := validResponse.VisitListSchedulesByAirportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlights operation middleware
func (sh *strictHandler) ListFlights(w http.ResponseWriter, r *http.Request) {
	var request ListFlightsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlights(ctx, request.(ListFlightsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlights")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightsResponseObject); ok {
		if err := validResponse.VisitListFlightsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFlight operation middleware
func (sh *strictHandler) CreateFlight(w http.ResponseWriter, r *http.Request) {
	var request CreateFlightRequestObject

	var body CreateFlightJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFlight(ctx, request.(CreateFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFlightResponseObject); ok {
		if err := validResponse.VisitCreateFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListSeatAssignmentsForFlight operation middleware
func (sh *strictHandler) ListSeatAssignmentsForFlight(w http.ResponseWriter, r *http.Request, flightID int) {
	var request ListSeatAssignmentsForFlightRequestObject

	request.FlightID = flightID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListSeatAssignmentsForFlight(ctx, request.(ListSeatAssignmentsForFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSeatAssignmentsForFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListSeatAssignmentsForFlightResponseObject); ok {
		if err := validResponse.VisitListSeatAssignmentsForFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSeatAssignment operation middleware
func (sh *strictHandler) CreateSeatAssignment(w http.ResponseWriter, r *http.Request, flightID int) {
	var request CreateSeatAssignmentRequestObject

	request.FlightID = flightID

	var body CreateSeatAssignmentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSeatAssignment(ctx, request.(CreateSeatAssignmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSeatAssignment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSeatAssignmentResponseObject); ok {
		if err := validResponse.VisitCreateSeatAssignmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFlight operation middleware
func (sh *strictHandler) DeleteFlight(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteFlightRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFlight(ctx, request.(DeleteFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFlightResponseObject); ok {
		if err := validResponse.VisitDeleteFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFlight operation middleware
func (sh *strictHandler) GetFlight(w http.ResponseWriter, r *http.Request, id int) {
	var request GetFlightRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFlight(ctx, request.(GetFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFlightResponseObject); ok {
		if err := validResponse.VisitGetFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFlight operation middleware
func (sh *strictHandler) UpdateFlight(w http.ResponseWriter, r *http.Request, id int) {
	var request UpdateFlightRequestObject

	request.Id = id

	var body UpdateFlightJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFlight(ctx, request.(UpdateFlightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFlight")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFlightResponseObject); ok {
		if err := validResponse.VisitUpdateFlightResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	var request HealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx, request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		if err := validResponse.VisitHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListItineraries operation middleware
func (sh *strictHandler) ListItineraries(w http.ResponseWriter, r *http.Request) {
	var request ListItinerariesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListItineraries(ctx, request.(ListItinerariesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListItineraries")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListItinerariesResponseObject); ok {
		if err := validResponse.VisitListItinerariesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateItinerary operation middleware
func (sh *strictHandler) CreateItinerary(w http.ResponseWriter, r *http.Request) {
	var request CreateItineraryRequestObject

	var body CreateItineraryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateItinerary(ctx, request.(CreateItineraryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateItinerary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateItineraryResponseObject); ok {
		if err := validResponse.VisitCreateItineraryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteItinerary operation middleware
func (sh *strictHandler) DeleteItinerary(w http.ResponseWriter, r *http.Request, itinerarySpec ItinerarySpec) {
	var request DeleteItineraryRequestObject

	request.ItinerarySpec = itinerarySpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteItinerary(ctx, request.(DeleteItineraryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteItinerary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteItineraryResponseObject); ok {
		if err := validResponse.VisitDeleteItineraryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetItinerary operation middleware
func (sh *strictHandler) GetItinerary(w http.ResponseWriter, r *http.Request, itinerarySpec ItinerarySpec) {
	var request GetItineraryRequestObject

	request.ItinerarySpec = itinerarySpec

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetItinerary(ctx, request.(GetItineraryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItinerary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetItineraryResponseObject); ok {
		if err := validResponse.VisitGetItineraryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPassengers operation middleware
func (sh *strictHandler) ListPassengers(w http.ResponseWriter, r *http.Request) {
	var request ListPassengersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPassengers(ctx, request.(ListPassengersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPassengers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPassengersResponseObject); ok {
		if err := validResponse.VisitListPassengersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePassenger operation middleware
func (sh *strictHandler) CreatePassenger(w http.ResponseWriter, r *http.Request) {
	var request CreatePassengerRequestObject

	var body CreatePassengerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePassenger(ctx, request.(CreatePassengerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePassenger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePassengerResponseObject); ok {
		if err := validResponse.VisitCreatePassengerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePassenger operation middleware
func (sh *strictHandler) DeletePassenger(w http.ResponseWriter, r *http.Request, id int) {
	var request DeletePassengerRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePassenger(ctx, request.(DeletePassengerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePassenger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePassengerResponseObject); ok {
		if err := validResponse.VisitDeletePassengerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPassenger operation middleware
func (sh *strictHandler) GetPassenger(w http.ResponseWriter, r *http.Request, id int) {
	var request GetPassengerRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPassenger(ctx, request.(GetPassengerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPassenger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPassengerResponseObject); ok {
		if err := validResponse.VisitGetPassengerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePassenger operation middleware
func (sh *strictHandler) UpdatePassenger(w http.ResponseWriter, r *http.Request, id int) {
	var request UpdatePassengerRequestObject

	request.Id = id

	var body UpdatePassengerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePassenger(ctx, request.(UpdatePassengerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePassenger")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePassengerResponseObject); ok {
		if err := validResponse.VisitUpdatePassengerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRoutes operation middleware
func (sh *strictHandler) ListRoutes(w http.ResponseWriter, r *http.Request) {
	var request ListRoutesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRoutes(ctx, request.(ListRoutesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRoutes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRoutesResponseObject); ok {
		if err := validResponse.VisitListRoutesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRoute operation middleware
func (sh *strictHandler) GetRoute(w http.ResponseWriter, r *http.Request, route RouteSpec) {
	var request GetRouteRequestObject

	request.Route = route

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoute(ctx, request.(GetRouteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoute")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRouteResponseObject); ok {
		if err := validResponse.VisitGetRouteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlightsByRoute operation middleware
func (sh *strictHandler) ListFlightsByRoute(w http.ResponseWriter, r *http.Request, route RouteSpec) {
	var request ListFlightsByRouteRequestObject

	request.Route = route

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlightsByRoute(ctx, request.(ListFlightsByRouteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlightsByRoute")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightsByRouteResponseObject); ok {
		if err := validResponse.VisitListFlightsByRouteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListSchedulesByRoute operation middleware
func (sh *strictHandler) ListSchedulesByRoute(w http.ResponseWriter, r *http.Request, route RouteSpec) {
	var request ListSchedulesByRouteRequestObject

	request.Route = route

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListSchedulesByRoute(ctx, request.(ListSchedulesByRouteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSchedulesByRoute")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListSchedulesByRouteResponseObject); ok {
		if err := validResponse.VisitListSchedulesByRouteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAllSchedules operation middleware
func (sh *strictHandler) DeleteAllSchedules(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllSchedulesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllSchedules(ctx, request.(DeleteAllSchedulesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllSchedules")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllSchedulesResponseObject); ok {
		if err := validResponse.VisitDeleteAllSchedulesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListSchedules operation middleware
func (sh *strictHandler) ListSchedules(w http.ResponseWriter, r *http.Request) {
	var request ListSchedulesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListSchedules(ctx, request.(ListSchedulesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSchedules")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListSchedulesResponseObject); ok {
		if err := validResponse.VisitListSchedulesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSchedule operation middleware
func (sh *strictHandler) CreateSchedule(w http.ResponseWriter, r *http.Request) {
	var request CreateScheduleRequestObject

	var body CreateScheduleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSchedule(ctx, request.(CreateScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateScheduleResponseObject); ok {
		if err := validResponse.VisitCreateScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSchedule operation middleware
func (sh *strictHandler) DeleteSchedule(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteScheduleRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSchedule(ctx, request.(DeleteScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteScheduleResponseObject); ok {
		if err := validResponse.VisitDeleteScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSchedule operation middleware
func (sh *strictHandler) GetSchedule(w http.ResponseWriter, r *http.Request, id int) {
	var request GetScheduleRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSchedule(ctx, request.(GetScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetScheduleResponseObject); ok {
		if err := validResponse.VisitGetScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSchedule operation middleware
func (sh *strictHandler) UpdateSchedule(w http.ResponseWriter, r *http.Request, id int) {
	var request UpdateScheduleRequestObject

	request.Id = id

	var body UpdateScheduleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSchedule(ctx, request.(UpdateScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateScheduleResponseObject); ok {
		if err := validResponse.VisitUpdateScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlightsForSchedule operation middleware
func (sh *strictHandler) ListFlightsForSchedule(w http.ResponseWriter, r *http.Request, id int) {
	var request ListFlightsForScheduleRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlightsForSchedule(ctx, request.(ListFlightsForScheduleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlightsForSchedule")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlightsForScheduleResponseObject); ok {
		if err := validResponse.VisitListFlightsForScheduleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
