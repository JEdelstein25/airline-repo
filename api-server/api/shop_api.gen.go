//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.2-0.20241128135601-9feb3033b612 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Category defines model for Category.
type Category struct {
	Id    string `json:"id"`
	Title string `json:"title"`
}

// Product defines model for Product.
type Product struct {
	Categories *[]Category `json:"categories,omitempty"`
	Id         string      `json:"id"`
	Starred    bool        `json:"starred"`
	Title      string      `json:"title"`
}

// CreateCategoryJSONBody defines parameters for CreateCategory.
type CreateCategoryJSONBody struct {
	Title *string `json:"title,omitempty"`
}

// CreateProductJSONBody defines parameters for CreateProduct.
type CreateProductJSONBody struct {
	Title *string `json:"title,omitempty"`
}

// SetProductStarredJSONBody defines parameters for SetProductStarred.
type SetProductStarredJSONBody struct {
	Starred *bool `json:"starred,omitempty"`
}

// UpdateProductCategoryMembershipJSONBody defines parameters for UpdateProductCategoryMembership.
type UpdateProductCategoryMembershipJSONBody struct {
	Value bool `json:"value"`
}

// CreateCategoryJSONRequestBody defines body for CreateCategory for application/json ContentType.
type CreateCategoryJSONRequestBody CreateCategoryJSONBody

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody CreateProductJSONBody

// SetProductStarredJSONRequestBody defines body for SetProductStarred for application/json ContentType.
type SetProductStarredJSONRequestBody SetProductStarredJSONBody

// UpdateProductCategoryMembershipJSONRequestBody defines body for UpdateProductCategoryMembership for application/json ContentType.
type UpdateProductCategoryMembershipJSONRequestBody UpdateProductCategoryMembershipJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all categories
	// (GET /categories)
	ListCategories(w http.ResponseWriter, r *http.Request)
	// Create a new category
	// (POST /categories)
	CreateCategory(w http.ResponseWriter, r *http.Request)
	// List products in a category
	// (GET /categories/{categoryId}/products)
	ListProductsByCategory(w http.ResponseWriter, r *http.Request, categoryId string)
	// Delete a category
	// (DELETE /categories/{id})
	DeleteCategory(w http.ResponseWriter, r *http.Request, id string)
	// Health check endpoint
	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Delete all products
	// (DELETE /products)
	DeleteAllProducts(w http.ResponseWriter, r *http.Request)
	// List all products
	// (GET /products)
	ListProducts(w http.ResponseWriter, r *http.Request)
	// Create a new product
	// (POST /products)
	CreateProduct(w http.ResponseWriter, r *http.Request)
	// Delete a product
	// (DELETE /products/{id})
	DeleteProduct(w http.ResponseWriter, r *http.Request, id string)
	// Set product starred status
	// (PATCH /products/{id})
	SetProductStarred(w http.ResponseWriter, r *http.Request, id string)
	// Set product category membership
	// (PUT /products/{productId}/categories/{categoryId})
	UpdateProductCategoryMembership(w http.ResponseWriter, r *http.Request, productId string, categoryId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListCategories operation middleware
func (siw *ServerInterfaceWrapper) ListCategories(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCategories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateCategory operation middleware
func (siw *ServerInterfaceWrapper) CreateCategory(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCategory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProductsByCategory operation middleware
func (siw *ServerInterfaceWrapper) ListProductsByCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "categoryId" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithOptions("simple", "categoryId", r.PathValue("categoryId"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProductsByCategory(w, r, categoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCategory operation middleware
func (siw *ServerInterfaceWrapper) DeleteCategory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCategory(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAllProducts operation middleware
func (siw *ServerInterfaceWrapper) DeleteAllProducts(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAllProducts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListProducts operation middleware
func (siw *ServerInterfaceWrapper) ListProducts(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListProducts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProduct(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteProduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteProduct(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteProduct(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetProductStarred operation middleware
func (siw *ServerInterfaceWrapper) SetProductStarred(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetProductStarred(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateProductCategoryMembership operation middleware
func (siw *ServerInterfaceWrapper) UpdateProductCategoryMembership(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", r.PathValue("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	// ------------- Path parameter "categoryId" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithOptions("simple", "categoryId", r.PathValue("categoryId"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProductCategoryMembership(w, r, productId, categoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/categories", wrapper.ListCategories)
	m.HandleFunc("POST "+options.BaseURL+"/categories", wrapper.CreateCategory)
	m.HandleFunc("GET "+options.BaseURL+"/categories/{categoryId}/products", wrapper.ListProductsByCategory)
	m.HandleFunc("DELETE "+options.BaseURL+"/categories/{id}", wrapper.DeleteCategory)
	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.HealthCheck)
	m.HandleFunc("DELETE "+options.BaseURL+"/products", wrapper.DeleteAllProducts)
	m.HandleFunc("GET "+options.BaseURL+"/products", wrapper.ListProducts)
	m.HandleFunc("POST "+options.BaseURL+"/products", wrapper.CreateProduct)
	m.HandleFunc("DELETE "+options.BaseURL+"/products/{id}", wrapper.DeleteProduct)
	m.HandleFunc("PATCH "+options.BaseURL+"/products/{id}", wrapper.SetProductStarred)
	m.HandleFunc("PUT "+options.BaseURL+"/products/{productId}/categories/{categoryId}", wrapper.UpdateProductCategoryMembership)

	return m
}

type ListCategoriesRequestObject struct {
}

type ListCategoriesResponseObject interface {
	VisitListCategoriesResponse(w http.ResponseWriter) error
}

type ListCategories200JSONResponse []Category

func (response ListCategories200JSONResponse) VisitListCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateCategoryRequestObject struct {
	Body *CreateCategoryJSONRequestBody
}

type CreateCategoryResponseObject interface {
	VisitCreateCategoryResponse(w http.ResponseWriter) error
}

type CreateCategory201Response struct {
}

func (response CreateCategory201Response) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateCategory400Response struct {
}

func (response CreateCategory400Response) VisitCreateCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListProductsByCategoryRequestObject struct {
	CategoryId string `json:"categoryId"`
}

type ListProductsByCategoryResponseObject interface {
	VisitListProductsByCategoryResponse(w http.ResponseWriter) error
}

type ListProductsByCategory200JSONResponse struct {
	ProductsInCategory    *[]Product `json:"productsInCategory,omitempty"`
	ProductsNotInCategory *[]Product `json:"productsNotInCategory,omitempty"`
}

func (response ListProductsByCategory200JSONResponse) VisitListProductsByCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryRequestObject struct {
	Id string `json:"id"`
}

type DeleteCategoryResponseObject interface {
	VisitDeleteCategoryResponse(w http.ResponseWriter) error
}

type DeleteCategory204Response struct {
}

func (response DeleteCategory204Response) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCategory404Response struct {
}

func (response DeleteCategory404Response) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(w http.ResponseWriter) error
}

type HealthCheck200JSONResponse struct {
	Ok *bool `json:"ok,omitempty"`
}

func (response HealthCheck200JSONResponse) VisitHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAllProductsRequestObject struct {
}

type DeleteAllProductsResponseObject interface {
	VisitDeleteAllProductsResponse(w http.ResponseWriter) error
}

type DeleteAllProducts204Response struct {
}

func (response DeleteAllProducts204Response) VisitDeleteAllProductsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ListProductsRequestObject struct {
}

type ListProductsResponseObject interface {
	VisitListProductsResponse(w http.ResponseWriter) error
}

type ListProducts200JSONResponse []Product

func (response ListProducts200JSONResponse) VisitListProductsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProductRequestObject struct {
	Body *CreateProductJSONRequestBody
}

type CreateProductResponseObject interface {
	VisitCreateProductResponse(w http.ResponseWriter) error
}

type CreateProduct201Response struct {
}

func (response CreateProduct201Response) VisitCreateProductResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateProduct400Response struct {
}

func (response CreateProduct400Response) VisitCreateProductResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteProductRequestObject struct {
	Id string `json:"id"`
}

type DeleteProductResponseObject interface {
	VisitDeleteProductResponse(w http.ResponseWriter) error
}

type DeleteProduct204Response struct {
}

func (response DeleteProduct204Response) VisitDeleteProductResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteProduct404Response struct {
}

func (response DeleteProduct404Response) VisitDeleteProductResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SetProductStarredRequestObject struct {
	Id   string `json:"id"`
	Body *SetProductStarredJSONRequestBody
}

type SetProductStarredResponseObject interface {
	VisitSetProductStarredResponse(w http.ResponseWriter) error
}

type SetProductStarred200Response struct {
}

func (response SetProductStarred200Response) VisitSetProductStarredResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetProductStarred404Response struct {
}

func (response SetProductStarred404Response) VisitSetProductStarredResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateProductCategoryMembershipRequestObject struct {
	ProductId  string `json:"productId"`
	CategoryId string `json:"categoryId"`
	Body       *UpdateProductCategoryMembershipJSONRequestBody
}

type UpdateProductCategoryMembershipResponseObject interface {
	VisitUpdateProductCategoryMembershipResponse(w http.ResponseWriter) error
}

type UpdateProductCategoryMembership200Response struct {
}

func (response UpdateProductCategoryMembership200Response) VisitUpdateProductCategoryMembershipResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateProductCategoryMembership404Response struct {
}

func (response UpdateProductCategoryMembership404Response) VisitUpdateProductCategoryMembershipResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all categories
	// (GET /categories)
	ListCategories(ctx context.Context, request ListCategoriesRequestObject) (ListCategoriesResponseObject, error)
	// Create a new category
	// (POST /categories)
	CreateCategory(ctx context.Context, request CreateCategoryRequestObject) (CreateCategoryResponseObject, error)
	// List products in a category
	// (GET /categories/{categoryId}/products)
	ListProductsByCategory(ctx context.Context, request ListProductsByCategoryRequestObject) (ListProductsByCategoryResponseObject, error)
	// Delete a category
	// (DELETE /categories/{id})
	DeleteCategory(ctx context.Context, request DeleteCategoryRequestObject) (DeleteCategoryResponseObject, error)
	// Health check endpoint
	// (GET /health)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
	// Delete all products
	// (DELETE /products)
	DeleteAllProducts(ctx context.Context, request DeleteAllProductsRequestObject) (DeleteAllProductsResponseObject, error)
	// List all products
	// (GET /products)
	ListProducts(ctx context.Context, request ListProductsRequestObject) (ListProductsResponseObject, error)
	// Create a new product
	// (POST /products)
	CreateProduct(ctx context.Context, request CreateProductRequestObject) (CreateProductResponseObject, error)
	// Delete a product
	// (DELETE /products/{id})
	DeleteProduct(ctx context.Context, request DeleteProductRequestObject) (DeleteProductResponseObject, error)
	// Set product starred status
	// (PATCH /products/{id})
	SetProductStarred(ctx context.Context, request SetProductStarredRequestObject) (SetProductStarredResponseObject, error)
	// Set product category membership
	// (PUT /products/{productId}/categories/{categoryId})
	UpdateProductCategoryMembership(ctx context.Context, request UpdateProductCategoryMembershipRequestObject) (UpdateProductCategoryMembershipResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListCategories operation middleware
func (sh *strictHandler) ListCategories(w http.ResponseWriter, r *http.Request) {
	var request ListCategoriesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListCategories(ctx, request.(ListCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCategories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListCategoriesResponseObject); ok {
		if err := validResponse.VisitListCategoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCategory operation middleware
func (sh *strictHandler) CreateCategory(w http.ResponseWriter, r *http.Request) {
	var request CreateCategoryRequestObject

	var body CreateCategoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCategory(ctx, request.(CreateCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCategoryResponseObject); ok {
		if err := validResponse.VisitCreateCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProductsByCategory operation middleware
func (sh *strictHandler) ListProductsByCategory(w http.ResponseWriter, r *http.Request, categoryId string) {
	var request ListProductsByCategoryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProductsByCategory(ctx, request.(ListProductsByCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProductsByCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProductsByCategoryResponseObject); ok {
		if err := validResponse.VisitListProductsByCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteCategory operation middleware
func (sh *strictHandler) DeleteCategory(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteCategoryRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCategory(ctx, request.(DeleteCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCategory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteCategoryResponseObject); ok {
		if err := validResponse.VisitDeleteCategoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	var request HealthCheckRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx, request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		if err := validResponse.VisitHealthCheckResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAllProducts operation middleware
func (sh *strictHandler) DeleteAllProducts(w http.ResponseWriter, r *http.Request) {
	var request DeleteAllProductsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAllProducts(ctx, request.(DeleteAllProductsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAllProducts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAllProductsResponseObject); ok {
		if err := validResponse.VisitDeleteAllProductsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListProducts operation middleware
func (sh *strictHandler) ListProducts(w http.ResponseWriter, r *http.Request) {
	var request ListProductsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListProducts(ctx, request.(ListProductsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListProducts")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListProductsResponseObject); ok {
		if err := validResponse.VisitListProductsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProduct operation middleware
func (sh *strictHandler) CreateProduct(w http.ResponseWriter, r *http.Request) {
	var request CreateProductRequestObject

	var body CreateProductJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProduct(ctx, request.(CreateProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProduct")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateProductResponseObject); ok {
		if err := validResponse.VisitCreateProductResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProduct operation middleware
func (sh *strictHandler) DeleteProduct(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteProductRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProduct(ctx, request.(DeleteProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProduct")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteProductResponseObject); ok {
		if err := validResponse.VisitDeleteProductResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetProductStarred operation middleware
func (sh *strictHandler) SetProductStarred(w http.ResponseWriter, r *http.Request, id string) {
	var request SetProductStarredRequestObject

	request.Id = id

	var body SetProductStarredJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetProductStarred(ctx, request.(SetProductStarredRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetProductStarred")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetProductStarredResponseObject); ok {
		if err := validResponse.VisitSetProductStarredResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateProductCategoryMembership operation middleware
func (sh *strictHandler) UpdateProductCategoryMembership(w http.ResponseWriter, r *http.Request, productId string, categoryId string) {
	var request UpdateProductCategoryMembershipRequestObject

	request.ProductId = productId
	request.CategoryId = categoryId

	var body UpdateProductCategoryMembershipJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProductCategoryMembership(ctx, request.(UpdateProductCategoryMembershipRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProductCategoryMembership")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateProductCategoryMembershipResponseObject); ok {
		if err := validResponse.VisitUpdateProductCategoryMembershipResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
